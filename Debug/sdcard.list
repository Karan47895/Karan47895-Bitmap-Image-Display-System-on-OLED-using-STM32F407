
sdcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  08007c88  08007c88  00008c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082f8  080082f8  0000a080  2**0
                  CONTENTS
  4 .ARM          00000008  080082f8  080082f8  000092f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008300  08008300  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008300  08008300  00009300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008304  08008304  00009304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008308  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a080  2**0
                  CONTENTS
 10 .bss          0000288c  20000080  20000080  0000a080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000290c  2000290c  0000a080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a974  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021d2  00000000  00000000  00014a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae0  00000000  00000000  00016bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000081e  00000000  00000000  000176d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229f8  00000000  00000000  00017ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f8b3  00000000  00000000  0003a8ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5a90  00000000  00000000  0004a1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010fc31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000351c  00000000  00000000  0010fc74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  00113190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c70 	.word	0x08007c70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08007c70 	.word	0x08007c70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96a 	b.w	8000b68 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	460c      	mov	r4, r1
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d14e      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008b8:	4694      	mov	ip, r2
 80008ba:	458c      	cmp	ip, r1
 80008bc:	4686      	mov	lr, r0
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	d962      	bls.n	800098a <__udivmoddi4+0xde>
 80008c4:	b14a      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c6:	f1c2 0320 	rsb	r3, r2, #32
 80008ca:	4091      	lsls	r1, r2
 80008cc:	fa20 f303 	lsr.w	r3, r0, r3
 80008d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d4:	4319      	orrs	r1, r3
 80008d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008de:	fa1f f68c 	uxth.w	r6, ip
 80008e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008ea:	fb07 1114 	mls	r1, r7, r4, r1
 80008ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f2:	fb04 f106 	mul.w	r1, r4, r6
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000902:	f080 8112 	bcs.w	8000b2a <__udivmoddi4+0x27e>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 810f 	bls.w	8000b2a <__udivmoddi4+0x27e>
 800090c:	3c02      	subs	r4, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a59      	subs	r1, r3, r1
 8000912:	fa1f f38e 	uxth.w	r3, lr
 8000916:	fbb1 f0f7 	udiv	r0, r1, r7
 800091a:	fb07 1110 	mls	r1, r7, r0, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb00 f606 	mul.w	r6, r0, r6
 8000926:	429e      	cmp	r6, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x94>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000932:	f080 80fc 	bcs.w	8000b2e <__udivmoddi4+0x282>
 8000936:	429e      	cmp	r6, r3
 8000938:	f240 80f9 	bls.w	8000b2e <__udivmoddi4+0x282>
 800093c:	4463      	add	r3, ip
 800093e:	3802      	subs	r0, #2
 8000940:	1b9b      	subs	r3, r3, r6
 8000942:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000946:	2100      	movs	r1, #0
 8000948:	b11d      	cbz	r5, 8000952 <__udivmoddi4+0xa6>
 800094a:	40d3      	lsrs	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	e9c5 3200 	strd	r3, r2, [r5]
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d905      	bls.n	8000966 <__udivmoddi4+0xba>
 800095a:	b10d      	cbz	r5, 8000960 <__udivmoddi4+0xb4>
 800095c:	e9c5 0100 	strd	r0, r1, [r5]
 8000960:	2100      	movs	r1, #0
 8000962:	4608      	mov	r0, r1
 8000964:	e7f5      	b.n	8000952 <__udivmoddi4+0xa6>
 8000966:	fab3 f183 	clz	r1, r3
 800096a:	2900      	cmp	r1, #0
 800096c:	d146      	bne.n	80009fc <__udivmoddi4+0x150>
 800096e:	42a3      	cmp	r3, r4
 8000970:	d302      	bcc.n	8000978 <__udivmoddi4+0xcc>
 8000972:	4290      	cmp	r0, r2
 8000974:	f0c0 80f0 	bcc.w	8000b58 <__udivmoddi4+0x2ac>
 8000978:	1a86      	subs	r6, r0, r2
 800097a:	eb64 0303 	sbc.w	r3, r4, r3
 800097e:	2001      	movs	r0, #1
 8000980:	2d00      	cmp	r5, #0
 8000982:	d0e6      	beq.n	8000952 <__udivmoddi4+0xa6>
 8000984:	e9c5 6300 	strd	r6, r3, [r5]
 8000988:	e7e3      	b.n	8000952 <__udivmoddi4+0xa6>
 800098a:	2a00      	cmp	r2, #0
 800098c:	f040 8090 	bne.w	8000ab0 <__udivmoddi4+0x204>
 8000990:	eba1 040c 	sub.w	r4, r1, ip
 8000994:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000998:	fa1f f78c 	uxth.w	r7, ip
 800099c:	2101      	movs	r1, #1
 800099e:	fbb4 f6f8 	udiv	r6, r4, r8
 80009a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009a6:	fb08 4416 	mls	r4, r8, r6, r4
 80009aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ae:	fb07 f006 	mul.w	r0, r7, r6
 80009b2:	4298      	cmp	r0, r3
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x11c>
 80009b6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x11a>
 80009c0:	4298      	cmp	r0, r3
 80009c2:	f200 80cd 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 80009c6:	4626      	mov	r6, r4
 80009c8:	1a1c      	subs	r4, r3, r0
 80009ca:	fa1f f38e 	uxth.w	r3, lr
 80009ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80009d2:	fb08 4410 	mls	r4, r8, r0, r4
 80009d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009da:	fb00 f707 	mul.w	r7, r0, r7
 80009de:	429f      	cmp	r7, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x148>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009ea:	d202      	bcs.n	80009f2 <__udivmoddi4+0x146>
 80009ec:	429f      	cmp	r7, r3
 80009ee:	f200 80b0 	bhi.w	8000b52 <__udivmoddi4+0x2a6>
 80009f2:	4620      	mov	r0, r4
 80009f4:	1bdb      	subs	r3, r3, r7
 80009f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fa:	e7a5      	b.n	8000948 <__udivmoddi4+0x9c>
 80009fc:	f1c1 0620 	rsb	r6, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 f706 	lsr.w	r7, r2, r6
 8000a06:	431f      	orrs	r7, r3
 8000a08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a10:	ea43 030c 	orr.w	r3, r3, ip
 8000a14:	40f4      	lsrs	r4, r6
 8000a16:	fa00 f801 	lsl.w	r8, r0, r1
 8000a1a:	0c38      	lsrs	r0, r7, #16
 8000a1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a20:	fbb4 fef0 	udiv	lr, r4, r0
 8000a24:	fa1f fc87 	uxth.w	ip, r7
 8000a28:	fb00 441e 	mls	r4, r0, lr, r4
 8000a2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a30:	fb0e f90c 	mul.w	r9, lr, ip
 8000a34:	45a1      	cmp	r9, r4
 8000a36:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3a:	d90a      	bls.n	8000a52 <__udivmoddi4+0x1a6>
 8000a3c:	193c      	adds	r4, r7, r4
 8000a3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a42:	f080 8084 	bcs.w	8000b4e <__udivmoddi4+0x2a2>
 8000a46:	45a1      	cmp	r9, r4
 8000a48:	f240 8081 	bls.w	8000b4e <__udivmoddi4+0x2a2>
 8000a4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a50:	443c      	add	r4, r7
 8000a52:	eba4 0409 	sub.w	r4, r4, r9
 8000a56:	fa1f f983 	uxth.w	r9, r3
 8000a5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a6a:	45a4      	cmp	ip, r4
 8000a6c:	d907      	bls.n	8000a7e <__udivmoddi4+0x1d2>
 8000a6e:	193c      	adds	r4, r7, r4
 8000a70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a74:	d267      	bcs.n	8000b46 <__udivmoddi4+0x29a>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	d965      	bls.n	8000b46 <__udivmoddi4+0x29a>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	443c      	add	r4, r7
 8000a7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a82:	fba0 9302 	umull	r9, r3, r0, r2
 8000a86:	eba4 040c 	sub.w	r4, r4, ip
 8000a8a:	429c      	cmp	r4, r3
 8000a8c:	46ce      	mov	lr, r9
 8000a8e:	469c      	mov	ip, r3
 8000a90:	d351      	bcc.n	8000b36 <__udivmoddi4+0x28a>
 8000a92:	d04e      	beq.n	8000b32 <__udivmoddi4+0x286>
 8000a94:	b155      	cbz	r5, 8000aac <__udivmoddi4+0x200>
 8000a96:	ebb8 030e 	subs.w	r3, r8, lr
 8000a9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000aa2:	40cb      	lsrs	r3, r1
 8000aa4:	431e      	orrs	r6, r3
 8000aa6:	40cc      	lsrs	r4, r1
 8000aa8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aac:	2100      	movs	r1, #0
 8000aae:	e750      	b.n	8000952 <__udivmoddi4+0xa6>
 8000ab0:	f1c2 0320 	rsb	r3, r2, #32
 8000ab4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000abc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	430c      	orrs	r4, r1
 8000ac4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000acc:	fa1f f78c 	uxth.w	r7, ip
 8000ad0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb00 f107 	mul.w	r1, r0, r7
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x24c>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aee:	d22c      	bcs.n	8000b4a <__udivmoddi4+0x29e>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	d92a      	bls.n	8000b4a <__udivmoddi4+0x29e>
 8000af4:	3802      	subs	r0, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	1a5b      	subs	r3, r3, r1
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b00:	fb08 3311 	mls	r3, r8, r1, r3
 8000b04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b08:	fb01 f307 	mul.w	r3, r1, r7
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x276>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b18:	d213      	bcs.n	8000b42 <__udivmoddi4+0x296>
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	d911      	bls.n	8000b42 <__udivmoddi4+0x296>
 8000b1e:	3902      	subs	r1, #2
 8000b20:	4464      	add	r4, ip
 8000b22:	1ae4      	subs	r4, r4, r3
 8000b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b28:	e739      	b.n	800099e <__udivmoddi4+0xf2>
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	e6f0      	b.n	8000910 <__udivmoddi4+0x64>
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e706      	b.n	8000940 <__udivmoddi4+0x94>
 8000b32:	45c8      	cmp	r8, r9
 8000b34:	d2ae      	bcs.n	8000a94 <__udivmoddi4+0x1e8>
 8000b36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b3e:	3801      	subs	r0, #1
 8000b40:	e7a8      	b.n	8000a94 <__udivmoddi4+0x1e8>
 8000b42:	4631      	mov	r1, r6
 8000b44:	e7ed      	b.n	8000b22 <__udivmoddi4+0x276>
 8000b46:	4603      	mov	r3, r0
 8000b48:	e799      	b.n	8000a7e <__udivmoddi4+0x1d2>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e7d4      	b.n	8000af8 <__udivmoddi4+0x24c>
 8000b4e:	46d6      	mov	lr, sl
 8000b50:	e77f      	b.n	8000a52 <__udivmoddi4+0x1a6>
 8000b52:	4463      	add	r3, ip
 8000b54:	3802      	subs	r0, #2
 8000b56:	e74d      	b.n	80009f4 <__udivmoddi4+0x148>
 8000b58:	4606      	mov	r6, r0
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e70f      	b.n	8000980 <__udivmoddi4+0xd4>
 8000b60:	3e02      	subs	r6, #2
 8000b62:	4463      	add	r3, ip
 8000b64:	e730      	b.n	80009c8 <__udivmoddi4+0x11c>
 8000b66:	bf00      	nop

08000b68 <__aeabi_idiv0>:
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <SELECT>:
 **************************************/
extern SPI_HandleTypeDef hspi1;

/* slave select */
static void SELECT(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2110      	movs	r1, #16
 8000b74:	4803      	ldr	r0, [pc, #12]	@ (8000b84 <SELECT+0x18>)
 8000b76:	f001 fba5 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f001 f8fc 	bl	8001d78 <HAL_Delay>
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40020800 	.word	0x40020800

08000b88 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2110      	movs	r1, #16
 8000b90:	4803      	ldr	r0, [pc, #12]	@ (8000ba0 <DESELECT+0x18>)
 8000b92:	f001 fb97 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f001 f8ee 	bl	8001d78 <HAL_Delay>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40020800 	.word	0x40020800

08000ba4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bae:	bf00      	nop
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <SPI_TxByte+0x30>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d1f8      	bne.n	8000bb0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000bbe:	1df9      	adds	r1, r7, #7
 8000bc0:	2364      	movs	r3, #100	@ 0x64
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4803      	ldr	r0, [pc, #12]	@ (8000bd4 <SPI_TxByte+0x30>)
 8000bc6:	f002 f884 	bl	8002cd2 <HAL_SPI_Transmit>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20002520 	.word	0x20002520

08000bd8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000be4:	bf00      	nop
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <SPI_TxBuffer+0x30>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d1f8      	bne.n	8000be6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000bf4:	887a      	ldrh	r2, [r7, #2]
 8000bf6:	2364      	movs	r3, #100	@ 0x64
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	4803      	ldr	r0, [pc, #12]	@ (8000c08 <SPI_TxBuffer+0x30>)
 8000bfc:	f002 f869 	bl	8002cd2 <HAL_SPI_Transmit>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20002520 	.word	0x20002520

08000c0c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c12:	23ff      	movs	r3, #255	@ 0xff
 8000c14:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c16:	bf00      	nop
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <SPI_RxByte+0x34>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d1f8      	bne.n	8000c18 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c26:	1dba      	adds	r2, r7, #6
 8000c28:	1df9      	adds	r1, r7, #7
 8000c2a:	2364      	movs	r3, #100	@ 0x64
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2301      	movs	r3, #1
 8000c30:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <SPI_RxByte+0x34>)
 8000c32:	f002 f992 	bl	8002f5a <HAL_SPI_TransmitReceive>

	return data;
 8000c36:	79bb      	ldrb	r3, [r7, #6]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20002520 	.word	0x20002520

08000c44 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000c4c:	f7ff ffde 	bl	8000c0c <SPI_RxByte>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	701a      	strb	r2, [r3, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000c66:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <SD_ReadyWait+0x30>)
 8000c68:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c6c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000c6e:	f7ff ffcd 	bl	8000c0c <SPI_RxByte>
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2bff      	cmp	r3, #255	@ 0xff
 8000c7a:	d003      	beq.n	8000c84 <SD_ReadyWait+0x24>
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <SD_ReadyWait+0x30>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1f4      	bne.n	8000c6e <SD_ReadyWait+0xe>

	return res;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000009e 	.word	0x2000009e

08000c94 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000c9a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000c9e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000ca0:	f7ff ff72 	bl	8000b88 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	e005      	b.n	8000cb6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000caa:	20ff      	movs	r0, #255	@ 0xff
 8000cac:	f7ff ff7a 	bl	8000ba4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	2b09      	cmp	r3, #9
 8000cba:	ddf6      	ble.n	8000caa <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000cbc:	f7ff ff56 	bl	8000b6c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000cc0:	2340      	movs	r3, #64	@ 0x40
 8000cc2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000cd4:	2395      	movs	r3, #149	@ 0x95
 8000cd6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2106      	movs	r1, #6
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff7b 	bl	8000bd8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000ce2:	e002      	b.n	8000cea <SD_PowerOn+0x56>
	{
		cnt--;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000cea:	f7ff ff8f 	bl	8000c0c <SPI_RxByte>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d002      	beq.n	8000cfa <SD_PowerOn+0x66>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f4      	bne.n	8000ce4 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000cfa:	f7ff ff45 	bl	8000b88 <DESELECT>
	SPI_TxByte(0XFF);
 8000cfe:	20ff      	movs	r0, #255	@ 0xff
 8000d00:	f7ff ff50 	bl	8000ba4 <SPI_TxByte>

	PowerFlag = 1;
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <SD_PowerOn+0x80>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000a1 	.word	0x200000a1

08000d18 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	@ (8000d2c <SD_PowerOff+0x14>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	200000a1 	.word	0x200000a1

08000d30 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d34:	4b03      	ldr	r3, [pc, #12]	@ (8000d44 <SD_CheckPower+0x14>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200000a1 	.word	0x200000a1

08000d48 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000d52:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <SD_RxDataBlock+0x58>)
 8000d54:	22c8      	movs	r2, #200	@ 0xc8
 8000d56:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000d58:	f7ff ff58 	bl	8000c0c <SPI_RxByte>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	2bff      	cmp	r3, #255	@ 0xff
 8000d64:	d103      	bne.n	8000d6e <SD_RxDataBlock+0x26>
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <SD_RxDataBlock+0x58>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1f4      	bne.n	8000d58 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d72:	d001      	beq.n	8000d78 <SD_RxDataBlock+0x30>
 8000d74:	2300      	movs	r3, #0
 8000d76:	e00f      	b.n	8000d98 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff60 	bl	8000c44 <SPI_RxBytePtr>
	} while(len--);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	1e5a      	subs	r2, r3, #1
 8000d88:	603a      	str	r2, [r7, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f4      	bne.n	8000d78 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000d8e:	f7ff ff3d 	bl	8000c0c <SPI_RxByte>
	SPI_RxByte();
 8000d92:	f7ff ff3b 	bl	8000c0c <SPI_RxByte>

	return TRUE;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	2000009c 	.word	0x2000009c

08000da4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000db4:	f7ff ff54 	bl	8000c60 <SD_ReadyWait>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2bff      	cmp	r3, #255	@ 0xff
 8000dbc:	d001      	beq.n	8000dc2 <SD_TxDataBlock+0x1e>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e02f      	b.n	8000e22 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff feed 	bl	8000ba4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000dca:	78fb      	ldrb	r3, [r7, #3]
 8000dcc:	2bfd      	cmp	r3, #253	@ 0xfd
 8000dce:	d020      	beq.n	8000e12 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000dd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff feff 	bl	8000bd8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000dda:	f7ff ff17 	bl	8000c0c <SPI_RxByte>
		SPI_RxByte();
 8000dde:	f7ff ff15 	bl	8000c0c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000de2:	e00b      	b.n	8000dfc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000de4:	f7ff ff12 	bl	8000c0c <SPI_RxByte>
 8000de8:	4603      	mov	r3, r0
 8000dea:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	f003 031f 	and.w	r3, r3, #31
 8000df2:	2b05      	cmp	r3, #5
 8000df4:	d006      	beq.n	8000e04 <SD_TxDataBlock+0x60>
			i++;
 8000df6:	7bbb      	ldrb	r3, [r7, #14]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000dfc:	7bbb      	ldrb	r3, [r7, #14]
 8000dfe:	2b40      	cmp	r3, #64	@ 0x40
 8000e00:	d9f0      	bls.n	8000de4 <SD_TxDataBlock+0x40>
 8000e02:	e000      	b.n	8000e06 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e04:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e06:	bf00      	nop
 8000e08:	f7ff ff00 	bl	8000c0c <SPI_RxByte>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0fa      	beq.n	8000e08 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	f003 031f 	and.w	r3, r3, #31
 8000e18:	2b05      	cmp	r3, #5
 8000e1a:	d101      	bne.n	8000e20 <SD_TxDataBlock+0x7c>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e000      	b.n	8000e22 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	6039      	str	r1, [r7, #0]
 8000e34:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e36:	f7ff ff13 	bl	8000c60 <SD_ReadyWait>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2bff      	cmp	r3, #255	@ 0xff
 8000e3e:	d001      	beq.n	8000e44 <SD_SendCmd+0x1a>
 8000e40:	23ff      	movs	r3, #255	@ 0xff
 8000e42:	e042      	b.n	8000eca <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff feac 	bl	8000ba4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	0e1b      	lsrs	r3, r3, #24
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fea6 	bl	8000ba4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	0c1b      	lsrs	r3, r3, #16
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fea0 	bl	8000ba4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	0a1b      	lsrs	r3, r3, #8
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fe9a 	bl	8000ba4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fe95 	bl	8000ba4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b40      	cmp	r3, #64	@ 0x40
 8000e7e:	d102      	bne.n	8000e86 <SD_SendCmd+0x5c>
 8000e80:	2395      	movs	r3, #149	@ 0x95
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e007      	b.n	8000e96 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b48      	cmp	r3, #72	@ 0x48
 8000e8a:	d102      	bne.n	8000e92 <SD_SendCmd+0x68>
 8000e8c:	2387      	movs	r3, #135	@ 0x87
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	e001      	b.n	8000e96 <SD_SendCmd+0x6c>
	else crc = 1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fe83 	bl	8000ba4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b4c      	cmp	r3, #76	@ 0x4c
 8000ea2:	d101      	bne.n	8000ea8 <SD_SendCmd+0x7e>
 8000ea4:	f7ff feb2 	bl	8000c0c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000eac:	f7ff feae 	bl	8000c0c <SPI_RxByte>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000eb4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	da05      	bge.n	8000ec8 <SD_SendCmd+0x9e>
 8000ebc:	7bbb      	ldrb	r3, [r7, #14]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	73bb      	strb	r3, [r7, #14]
 8000ec2:	7bbb      	ldrb	r3, [r7, #14]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f1      	bne.n	8000eac <SD_SendCmd+0x82>

	return res;
 8000ec8:	7b7b      	ldrb	r3, [r7, #13]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SD_disk_initialize+0x14>
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e0d1      	b.n	800108c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000ee8:	4b6a      	ldr	r3, [pc, #424]	@ (8001094 <SD_disk_initialize+0x1c0>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <SD_disk_initialize+0x2a>
 8000ef6:	4b67      	ldr	r3, [pc, #412]	@ (8001094 <SD_disk_initialize+0x1c0>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	e0c6      	b.n	800108c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000efe:	f7ff fec9 	bl	8000c94 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f02:	f7ff fe33 	bl	8000b6c <SELECT>

	/* check disk type */
	type = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2040      	movs	r0, #64	@ 0x40
 8000f0e:	f7ff ff8c 	bl	8000e2a <SD_SendCmd>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	f040 80a1 	bne.w	800105c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f1a:	4b5f      	ldr	r3, [pc, #380]	@ (8001098 <SD_disk_initialize+0x1c4>)
 8000f1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f20:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f22:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000f26:	2048      	movs	r0, #72	@ 0x48
 8000f28:	f7ff ff7f 	bl	8000e2a <SD_SendCmd>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d155      	bne.n	8000fde <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
 8000f36:	e00c      	b.n	8000f52 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f38:	7bfc      	ldrb	r4, [r7, #15]
 8000f3a:	f7ff fe67 	bl	8000c0c <SPI_RxByte>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	f104 0310 	add.w	r3, r4, #16
 8000f46:	443b      	add	r3, r7
 8000f48:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d9ef      	bls.n	8000f38 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f58:	7abb      	ldrb	r3, [r7, #10]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d17e      	bne.n	800105c <SD_disk_initialize+0x188>
 8000f5e:	7afb      	ldrb	r3, [r7, #11]
 8000f60:	2baa      	cmp	r3, #170	@ 0xaa
 8000f62:	d17b      	bne.n	800105c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f64:	2100      	movs	r1, #0
 8000f66:	2077      	movs	r0, #119	@ 0x77
 8000f68:	f7ff ff5f 	bl	8000e2a <SD_SendCmd>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d807      	bhi.n	8000f82 <SD_disk_initialize+0xae>
 8000f72:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f76:	2069      	movs	r0, #105	@ 0x69
 8000f78:	f7ff ff57 	bl	8000e2a <SD_SendCmd>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d004      	beq.n	8000f8c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000f82:	4b45      	ldr	r3, [pc, #276]	@ (8001098 <SD_disk_initialize+0x1c4>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1ec      	bne.n	8000f64 <SD_disk_initialize+0x90>
 8000f8a:	e000      	b.n	8000f8e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f8c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000f8e:	4b42      	ldr	r3, [pc, #264]	@ (8001098 <SD_disk_initialize+0x1c4>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d062      	beq.n	800105c <SD_disk_initialize+0x188>
 8000f96:	2100      	movs	r1, #0
 8000f98:	207a      	movs	r0, #122	@ 0x7a
 8000f9a:	f7ff ff46 	bl	8000e2a <SD_SendCmd>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d15b      	bne.n	800105c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	e00c      	b.n	8000fc4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000faa:	7bfc      	ldrb	r4, [r7, #15]
 8000fac:	f7ff fe2e 	bl	8000c0c <SPI_RxByte>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f104 0310 	add.w	r3, r4, #16
 8000fb8:	443b      	add	r3, r7
 8000fba:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d9ef      	bls.n	8000faa <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000fca:	7a3b      	ldrb	r3, [r7, #8]
 8000fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SD_disk_initialize+0x104>
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	e000      	b.n	8000fda <SD_disk_initialize+0x106>
 8000fd8:	2304      	movs	r3, #4
 8000fda:	73bb      	strb	r3, [r7, #14]
 8000fdc:	e03e      	b.n	800105c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2077      	movs	r0, #119	@ 0x77
 8000fe2:	f7ff ff22 	bl	8000e2a <SD_SendCmd>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d808      	bhi.n	8000ffe <SD_disk_initialize+0x12a>
 8000fec:	2100      	movs	r1, #0
 8000fee:	2069      	movs	r0, #105	@ 0x69
 8000ff0:	f7ff ff1b 	bl	8000e2a <SD_SendCmd>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d801      	bhi.n	8000ffe <SD_disk_initialize+0x12a>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e000      	b.n	8001000 <SD_disk_initialize+0x12c>
 8000ffe:	2301      	movs	r3, #1
 8001000:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d10e      	bne.n	8001026 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001008:	2100      	movs	r1, #0
 800100a:	2077      	movs	r0, #119	@ 0x77
 800100c:	f7ff ff0d 	bl	8000e2a <SD_SendCmd>
 8001010:	4603      	mov	r3, r0
 8001012:	2b01      	cmp	r3, #1
 8001014:	d80e      	bhi.n	8001034 <SD_disk_initialize+0x160>
 8001016:	2100      	movs	r1, #0
 8001018:	2069      	movs	r0, #105	@ 0x69
 800101a:	f7ff ff06 	bl	8000e2a <SD_SendCmd>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d107      	bne.n	8001034 <SD_disk_initialize+0x160>
 8001024:	e00c      	b.n	8001040 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001026:	2100      	movs	r1, #0
 8001028:	2041      	movs	r0, #65	@ 0x41
 800102a:	f7ff fefe 	bl	8000e2a <SD_SendCmd>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d004      	beq.n	800103e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001034:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <SD_disk_initialize+0x1c4>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e2      	bne.n	8001002 <SD_disk_initialize+0x12e>
 800103c:	e000      	b.n	8001040 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800103e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <SD_disk_initialize+0x1c4>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d007      	beq.n	8001058 <SD_disk_initialize+0x184>
 8001048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800104c:	2050      	movs	r0, #80	@ 0x50
 800104e:	f7ff feec 	bl	8000e2a <SD_SendCmd>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SD_disk_initialize+0x188>
 8001058:	2300      	movs	r3, #0
 800105a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800105c:	4a0f      	ldr	r2, [pc, #60]	@ (800109c <SD_disk_initialize+0x1c8>)
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001062:	f7ff fd91 	bl	8000b88 <DESELECT>
	SPI_RxByte();
 8001066:	f7ff fdd1 	bl	8000c0c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <SD_disk_initialize+0x1c0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f023 0301 	bic.w	r3, r3, #1
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <SD_disk_initialize+0x1c0>)
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	e001      	b.n	8001086 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001082:	f7ff fe49 	bl	8000d18 <SD_PowerOff>
	}

	return Stat;
 8001086:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <SD_disk_initialize+0x1c0>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b2db      	uxtb	r3, r3
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	bd90      	pop	{r4, r7, pc}
 8001094:	20000000 	.word	0x20000000
 8001098:	2000009c 	.word	0x2000009c
 800109c:	200000a0 	.word	0x200000a0

080010a0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SD_disk_status+0x14>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e002      	b.n	80010ba <SD_disk_status+0x1a>
	return Stat;
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <SD_disk_status+0x28>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000000 	.word	0x20000000

080010cc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	4603      	mov	r3, r0
 80010da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <SD_disk_read+0x1c>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <SD_disk_read+0x20>
 80010e8:	2304      	movs	r3, #4
 80010ea:	e051      	b.n	8001190 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001198 <SD_disk_read+0xcc>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SD_disk_read+0x32>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e048      	b.n	8001190 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80010fe:	4b27      	ldr	r3, [pc, #156]	@ (800119c <SD_disk_read+0xd0>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <SD_disk_read+0x44>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	025b      	lsls	r3, r3, #9
 800110e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001110:	f7ff fd2c 	bl	8000b6c <SELECT>

	if (count == 1)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d111      	bne.n	800113e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	2051      	movs	r0, #81	@ 0x51
 800111e:	f7ff fe84 	bl	8000e2a <SD_SendCmd>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d129      	bne.n	800117c <SD_disk_read+0xb0>
 8001128:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800112c:	68b8      	ldr	r0, [r7, #8]
 800112e:	f7ff fe0b 	bl	8000d48 <SD_RxDataBlock>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d021      	beq.n	800117c <SD_disk_read+0xb0>
 8001138:	2300      	movs	r3, #0
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	e01e      	b.n	800117c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	2052      	movs	r0, #82	@ 0x52
 8001142:	f7ff fe72 	bl	8000e2a <SD_SendCmd>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d117      	bne.n	800117c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800114c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001150:	68b8      	ldr	r0, [r7, #8]
 8001152:	f7ff fdf9 	bl	8000d48 <SD_RxDataBlock>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00a      	beq.n	8001172 <SD_disk_read+0xa6>
				buff += 512;
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001162:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	3b01      	subs	r3, #1
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1ed      	bne.n	800114c <SD_disk_read+0x80>
 8001170:	e000      	b.n	8001174 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001172:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001174:	2100      	movs	r1, #0
 8001176:	204c      	movs	r0, #76	@ 0x4c
 8001178:	f7ff fe57 	bl	8000e2a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800117c:	f7ff fd04 	bl	8000b88 <DESELECT>
	SPI_RxByte();
 8001180:	f7ff fd44 	bl	8000c0c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	bf14      	ite	ne
 800118a:	2301      	movne	r3, #1
 800118c:	2300      	moveq	r3, #0
 800118e:	b2db      	uxtb	r3, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000000 	.word	0x20000000
 800119c:	200000a0 	.word	0x200000a0

080011a0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	4603      	mov	r3, r0
 80011ae:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d102      	bne.n	80011bc <SD_disk_write+0x1c>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <SD_disk_write+0x20>
 80011bc:	2304      	movs	r3, #4
 80011be:	e06b      	b.n	8001298 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80011c0:	4b37      	ldr	r3, [pc, #220]	@ (80012a0 <SD_disk_write+0x100>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SD_disk_write+0x32>
 80011ce:	2303      	movs	r3, #3
 80011d0:	e062      	b.n	8001298 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80011d2:	4b33      	ldr	r3, [pc, #204]	@ (80012a0 <SD_disk_write+0x100>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SD_disk_write+0x44>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e059      	b.n	8001298 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80011e4:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <SD_disk_write+0x104>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <SD_disk_write+0x56>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	025b      	lsls	r3, r3, #9
 80011f4:	607b      	str	r3, [r7, #4]

	SELECT();
 80011f6:	f7ff fcb9 	bl	8000b6c <SELECT>

	if (count == 1)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d110      	bne.n	8001222 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	2058      	movs	r0, #88	@ 0x58
 8001204:	f7ff fe11 	bl	8000e2a <SD_SendCmd>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d13a      	bne.n	8001284 <SD_disk_write+0xe4>
 800120e:	21fe      	movs	r1, #254	@ 0xfe
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff fdc7 	bl	8000da4 <SD_TxDataBlock>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d033      	beq.n	8001284 <SD_disk_write+0xe4>
			count = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	e030      	b.n	8001284 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001222:	4b20      	ldr	r3, [pc, #128]	@ (80012a4 <SD_disk_write+0x104>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d007      	beq.n	800123e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800122e:	2100      	movs	r1, #0
 8001230:	2077      	movs	r0, #119	@ 0x77
 8001232:	f7ff fdfa 	bl	8000e2a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001236:	6839      	ldr	r1, [r7, #0]
 8001238:	2057      	movs	r0, #87	@ 0x57
 800123a:	f7ff fdf6 	bl	8000e2a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	2059      	movs	r0, #89	@ 0x59
 8001242:	f7ff fdf2 	bl	8000e2a <SD_SendCmd>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d11b      	bne.n	8001284 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800124c:	21fc      	movs	r1, #252	@ 0xfc
 800124e:	68b8      	ldr	r0, [r7, #8]
 8001250:	f7ff fda8 	bl	8000da4 <SD_TxDataBlock>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00a      	beq.n	8001270 <SD_disk_write+0xd0>
				buff += 512;
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001260:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	3b01      	subs	r3, #1
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1ee      	bne.n	800124c <SD_disk_write+0xac>
 800126e:	e000      	b.n	8001272 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001270:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001272:	21fd      	movs	r1, #253	@ 0xfd
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fd95 	bl	8000da4 <SD_TxDataBlock>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <SD_disk_write+0xe4>
			{
				count = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001284:	f7ff fc80 	bl	8000b88 <DESELECT>
	SPI_RxByte();
 8001288:	f7ff fcc0 	bl	8000c0c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf14      	ite	ne
 8001292:	2301      	movne	r3, #1
 8001294:	2300      	moveq	r3, #0
 8001296:	b2db      	uxtb	r3, r3
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000000 	.word	0x20000000
 80012a4:	200000a0 	.word	0x200000a0

080012a8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b08b      	sub	sp, #44	@ 0x2c
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	603a      	str	r2, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
 80012b4:	460b      	mov	r3, r1
 80012b6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SD_disk_ioctl+0x1e>
 80012c2:	2304      	movs	r3, #4
 80012c4:	e113      	b.n	80014ee <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80012cc:	79bb      	ldrb	r3, [r7, #6]
 80012ce:	2b05      	cmp	r3, #5
 80012d0:	d124      	bne.n	800131c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d012      	beq.n	8001300 <SD_disk_ioctl+0x58>
 80012da:	2b02      	cmp	r3, #2
 80012dc:	dc1a      	bgt.n	8001314 <SD_disk_ioctl+0x6c>
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <SD_disk_ioctl+0x40>
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d006      	beq.n	80012f4 <SD_disk_ioctl+0x4c>
 80012e6:	e015      	b.n	8001314 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80012e8:	f7ff fd16 	bl	8000d18 <SD_PowerOff>
			res = RES_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80012f2:	e0fa      	b.n	80014ea <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80012f4:	f7ff fcce 	bl	8000c94 <SD_PowerOn>
			res = RES_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80012fe:	e0f4      	b.n	80014ea <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	1c5c      	adds	r4, r3, #1
 8001304:	f7ff fd14 	bl	8000d30 <SD_CheckPower>
 8001308:	4603      	mov	r3, r0
 800130a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800130c:	2300      	movs	r3, #0
 800130e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001312:	e0ea      	b.n	80014ea <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001314:	2304      	movs	r3, #4
 8001316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800131a:	e0e6      	b.n	80014ea <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800131c:	4b76      	ldr	r3, [pc, #472]	@ (80014f8 <SD_disk_ioctl+0x250>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SD_disk_ioctl+0x86>
 800132a:	2303      	movs	r3, #3
 800132c:	e0df      	b.n	80014ee <SD_disk_ioctl+0x246>

		SELECT();
 800132e:	f7ff fc1d 	bl	8000b6c <SELECT>

		switch (ctrl)
 8001332:	79bb      	ldrb	r3, [r7, #6]
 8001334:	2b0d      	cmp	r3, #13
 8001336:	f200 80c9 	bhi.w	80014cc <SD_disk_ioctl+0x224>
 800133a:	a201      	add	r2, pc, #4	@ (adr r2, 8001340 <SD_disk_ioctl+0x98>)
 800133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001340:	08001437 	.word	0x08001437
 8001344:	08001379 	.word	0x08001379
 8001348:	08001427 	.word	0x08001427
 800134c:	080014cd 	.word	0x080014cd
 8001350:	080014cd 	.word	0x080014cd
 8001354:	080014cd 	.word	0x080014cd
 8001358:	080014cd 	.word	0x080014cd
 800135c:	080014cd 	.word	0x080014cd
 8001360:	080014cd 	.word	0x080014cd
 8001364:	080014cd 	.word	0x080014cd
 8001368:	080014cd 	.word	0x080014cd
 800136c:	08001449 	.word	0x08001449
 8001370:	0800146d 	.word	0x0800146d
 8001374:	08001491 	.word	0x08001491
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001378:	2100      	movs	r1, #0
 800137a:	2049      	movs	r0, #73	@ 0x49
 800137c:	f7ff fd55 	bl	8000e2a <SD_SendCmd>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	f040 80a6 	bne.w	80014d4 <SD_disk_ioctl+0x22c>
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2110      	movs	r1, #16
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fcda 	bl	8000d48 <SD_RxDataBlock>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 809c 	beq.w	80014d4 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 800139c:	7b3b      	ldrb	r3, [r7, #12]
 800139e:	099b      	lsrs	r3, r3, #6
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d10d      	bne.n	80013c2 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013a6:	7d7b      	ldrb	r3, [r7, #21]
 80013a8:	461a      	mov	r2, r3
 80013aa:	7d3b      	ldrb	r3, [r7, #20]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4413      	add	r3, r2
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	3301      	adds	r3, #1
 80013b6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80013b8:	8bfb      	ldrh	r3, [r7, #30]
 80013ba:	029a      	lsls	r2, r3, #10
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e02d      	b.n	800141e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80013c2:	7c7b      	ldrb	r3, [r7, #17]
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	7dbb      	ldrb	r3, [r7, #22]
 80013cc:	09db      	lsrs	r3, r3, #7
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	7d7b      	ldrb	r3, [r7, #21]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	f003 0306 	and.w	r3, r3, #6
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	4413      	add	r3, r2
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	3302      	adds	r3, #2
 80013e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80013ea:	7d3b      	ldrb	r3, [r7, #20]
 80013ec:	099b      	lsrs	r3, r3, #6
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	7cfb      	ldrb	r3, [r7, #19]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	7cbb      	ldrb	r3, [r7, #18]
 80013fe:	029b      	lsls	r3, r3, #10
 8001400:	b29b      	uxth	r3, r3
 8001402:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001406:	b29b      	uxth	r3, r3
 8001408:	4413      	add	r3, r2
 800140a:	b29b      	uxth	r3, r3
 800140c:	3301      	adds	r3, #1
 800140e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001410:	8bfa      	ldrh	r2, [r7, #30]
 8001412:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001416:	3b09      	subs	r3, #9
 8001418:	409a      	lsls	r2, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001424:	e056      	b.n	80014d4 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800142c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001434:	e055      	b.n	80014e2 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001436:	f7ff fc13 	bl	8000c60 <SD_ReadyWait>
 800143a:	4603      	mov	r3, r0
 800143c:	2bff      	cmp	r3, #255	@ 0xff
 800143e:	d14b      	bne.n	80014d8 <SD_disk_ioctl+0x230>
 8001440:	2300      	movs	r3, #0
 8001442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001446:	e047      	b.n	80014d8 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001448:	2100      	movs	r1, #0
 800144a:	2049      	movs	r0, #73	@ 0x49
 800144c:	f7ff fced 	bl	8000e2a <SD_SendCmd>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d142      	bne.n	80014dc <SD_disk_ioctl+0x234>
 8001456:	2110      	movs	r1, #16
 8001458:	6a38      	ldr	r0, [r7, #32]
 800145a:	f7ff fc75 	bl	8000d48 <SD_RxDataBlock>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d03b      	beq.n	80014dc <SD_disk_ioctl+0x234>
 8001464:	2300      	movs	r3, #0
 8001466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800146a:	e037      	b.n	80014dc <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800146c:	2100      	movs	r1, #0
 800146e:	204a      	movs	r0, #74	@ 0x4a
 8001470:	f7ff fcdb 	bl	8000e2a <SD_SendCmd>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d132      	bne.n	80014e0 <SD_disk_ioctl+0x238>
 800147a:	2110      	movs	r1, #16
 800147c:	6a38      	ldr	r0, [r7, #32]
 800147e:	f7ff fc63 	bl	8000d48 <SD_RxDataBlock>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d02b      	beq.n	80014e0 <SD_disk_ioctl+0x238>
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800148e:	e027      	b.n	80014e0 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001490:	2100      	movs	r1, #0
 8001492:	207a      	movs	r0, #122	@ 0x7a
 8001494:	f7ff fcc9 	bl	8000e2a <SD_SendCmd>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d116      	bne.n	80014cc <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800149e:	2300      	movs	r3, #0
 80014a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014a4:	e00b      	b.n	80014be <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80014a6:	6a3c      	ldr	r4, [r7, #32]
 80014a8:	1c63      	adds	r3, r4, #1
 80014aa:	623b      	str	r3, [r7, #32]
 80014ac:	f7ff fbae 	bl	8000c0c <SPI_RxByte>
 80014b0:	4603      	mov	r3, r0
 80014b2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80014b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014b8:	3301      	adds	r3, #1
 80014ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d9ef      	bls.n	80014a6 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80014cc:	2304      	movs	r3, #4
 80014ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80014d2:	e006      	b.n	80014e2 <SD_disk_ioctl+0x23a>
			break;
 80014d4:	bf00      	nop
 80014d6:	e004      	b.n	80014e2 <SD_disk_ioctl+0x23a>
			break;
 80014d8:	bf00      	nop
 80014da:	e002      	b.n	80014e2 <SD_disk_ioctl+0x23a>
			break;
 80014dc:	bf00      	nop
 80014de:	e000      	b.n	80014e2 <SD_disk_ioctl+0x23a>
			break;
 80014e0:	bf00      	nop
		}

		DESELECT();
 80014e2:	f7ff fb51 	bl	8000b88 <DESELECT>
		SPI_RxByte();
 80014e6:	f7ff fb91 	bl	8000c0c <SPI_RxByte>
	}

	return res;
 80014ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	372c      	adds	r7, #44	@ 0x2c
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd90      	pop	{r4, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000

080014fc <bufclear>:
	int i=0;
	while(*buf++!='\0') i++;
	return i;
}

void bufclear(void){
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
	for(int i=0;i<1024;i++){
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	e007      	b.n	8001518 <bufclear+0x1c>
		buffer[i]='\0';
 8001508:	4a09      	ldr	r2, [pc, #36]	@ (8001530 <bufclear+0x34>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<1024;i++){
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3301      	adds	r3, #1
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800151e:	dbf3      	blt.n	8001508 <bufclear+0xc>
	}
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20002110 	.word	0x20002110

08001534 <main>:
        printf("No response from SD Card! Check SPI connection.\n");
    }
}

int main(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001538:	f000 fbac 	bl	8001c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153c:	f000 f8d2 	bl	80016e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001540:	f000 f970 	bl	8001824 <MX_GPIO_Init>
  //MX_I2S3_Init();
  MX_SPI1_Init();
 8001544:	f000 f938 	bl	80017b8 <MX_SPI1_Init>
  //MX_USB_HOST_Init();
  //MX_USART1_UART_Init();
  MX_FATFS_Init();
 8001548:	f001 ff8c 	bl	8003464 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay (500);
 800154c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001550:	f000 fc12 	bl	8001d78 <HAL_Delay>
   //test_sd_card();
  fresult = f_mount(&fs, "/", 1);
 8001554:	2201      	movs	r2, #1
 8001556:	494f      	ldr	r1, [pc, #316]	@ (8001694 <main+0x160>)
 8001558:	484f      	ldr	r0, [pc, #316]	@ (8001698 <main+0x164>)
 800155a:	f004 f9cb 	bl	80058f4 <f_mount>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b4e      	ldr	r3, [pc, #312]	@ (800169c <main+0x168>)
 8001564:	701a      	strb	r2, [r3, #0]
  	if (fresult != FR_OK) printf("ERROR!!! in mounting SD CARD...\n\n");
 8001566:	4b4d      	ldr	r3, [pc, #308]	@ (800169c <main+0x168>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <main+0x42>
 800156e:	484c      	ldr	r0, [pc, #304]	@ (80016a0 <main+0x16c>)
 8001570:	f005 fb44 	bl	8006bfc <puts>
 8001574:	e002      	b.n	800157c <main+0x48>
  	else printf("SD CARD mounted successfully...\n\n");
 8001576:	484b      	ldr	r0, [pc, #300]	@ (80016a4 <main+0x170>)
 8001578:	f005 fb40 	bl	8006bfc <puts>


  	/*************** Card capacity details ********************/

  	/* Check free space */
  	f_getfree("", &fre_clust, &pfs);
 800157c:	4a4a      	ldr	r2, [pc, #296]	@ (80016a8 <main+0x174>)
 800157e:	494b      	ldr	r1, [pc, #300]	@ (80016ac <main+0x178>)
 8001580:	484b      	ldr	r0, [pc, #300]	@ (80016b0 <main+0x17c>)
 8001582:	f004 ff60 	bl	8006446 <f_getfree>

  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001586:	4b48      	ldr	r3, [pc, #288]	@ (80016a8 <main+0x174>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	3b02      	subs	r3, #2
 800158e:	4a46      	ldr	r2, [pc, #280]	@ (80016a8 <main+0x174>)
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	8952      	ldrh	r2, [r2, #10]
 8001594:	fb02 f303 	mul.w	r3, r2, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff f8d5 	bl	8000748 <__aeabi_ui2d>
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b44      	ldr	r3, [pc, #272]	@ (80016b4 <main+0x180>)
 80015a4:	f7fe fe64 	bl	8000270 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff f944 	bl	800083c <__aeabi_d2uiz>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a40      	ldr	r2, [pc, #256]	@ (80016b8 <main+0x184>)
 80015b8:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 80015ba:	4b3f      	ldr	r3, [pc, #252]	@ (80016b8 <main+0x184>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	493e      	ldr	r1, [pc, #248]	@ (80016bc <main+0x188>)
 80015c2:	483f      	ldr	r0, [pc, #252]	@ (80016c0 <main+0x18c>)
 80015c4:	f005 fb22 	bl	8006c0c <siprintf>
  	printf(buffer);
 80015c8:	483d      	ldr	r0, [pc, #244]	@ (80016c0 <main+0x18c>)
 80015ca:	f005 faaf 	bl	8006b2c <iprintf>
  	bufclear();
 80015ce:	f7ff ff95 	bl	80014fc <bufclear>
  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80015d2:	4b35      	ldr	r3, [pc, #212]	@ (80016a8 <main+0x174>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	895b      	ldrh	r3, [r3, #10]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b34      	ldr	r3, [pc, #208]	@ (80016ac <main+0x178>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f8b0 	bl	8000748 <__aeabi_ui2d>
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <main+0x180>)
 80015ee:	f7fe fe3f 	bl	8000270 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff f91f 	bl	800083c <__aeabi_d2uiz>
 80015fe:	4603      	mov	r3, r0
 8001600:	4a30      	ldr	r2, [pc, #192]	@ (80016c4 <main+0x190>)
 8001602:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 8001604:	4b2f      	ldr	r3, [pc, #188]	@ (80016c4 <main+0x190>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	492f      	ldr	r1, [pc, #188]	@ (80016c8 <main+0x194>)
 800160c:	482c      	ldr	r0, [pc, #176]	@ (80016c0 <main+0x18c>)
 800160e:	f005 fafd 	bl	8006c0c <siprintf>
  	printf(buffer);
 8001612:	482b      	ldr	r0, [pc, #172]	@ (80016c0 <main+0x18c>)
 8001614:	f005 fa8a 	bl	8006b2c <iprintf>
  	bufclear();
 8001618:	f7ff ff70 	bl	80014fc <bufclear>


  	/************* The following operation is using PUTS and GETS *********************/

  	/* Open file to write/ create a file if it doesn't exist */
      fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800161c:	2213      	movs	r2, #19
 800161e:	492b      	ldr	r1, [pc, #172]	@ (80016cc <main+0x198>)
 8001620:	482b      	ldr	r0, [pc, #172]	@ (80016d0 <main+0x19c>)
 8001622:	f004 f9ad 	bl	8005980 <f_open>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <main+0x168>)
 800162c:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	f_puts("This text is written with the help of the stm-32\n", &fil);
 800162e:	4928      	ldr	r1, [pc, #160]	@ (80016d0 <main+0x19c>)
 8001630:	4828      	ldr	r0, [pc, #160]	@ (80016d4 <main+0x1a0>)
 8001632:	f005 f872 	bl	800671a <f_puts>

  	/* Close file */
  	fresult = f_close(&fil);
 8001636:	4826      	ldr	r0, [pc, #152]	@ (80016d0 <main+0x19c>)
 8001638:	f004 fedb 	bl	80063f2 <f_close>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	4b16      	ldr	r3, [pc, #88]	@ (800169c <main+0x168>)
 8001642:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)printf ("File1.txt created and the data is written \n");
 8001644:	4b15      	ldr	r3, [pc, #84]	@ (800169c <main+0x168>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <main+0x11e>
 800164c:	4822      	ldr	r0, [pc, #136]	@ (80016d8 <main+0x1a4>)
 800164e:	f005 fad5 	bl	8006bfc <puts>

  	/* Open file to read */
  	fresult = f_open(&fil, "file1.txt", FA_READ);
 8001652:	2201      	movs	r2, #1
 8001654:	491d      	ldr	r1, [pc, #116]	@ (80016cc <main+0x198>)
 8001656:	481e      	ldr	r0, [pc, #120]	@ (80016d0 <main+0x19c>)
 8001658:	f004 f992 	bl	8005980 <f_open>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <main+0x168>)
 8001662:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	f_gets(buffer, f_size(&fil), &fil);
 8001664:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <main+0x19c>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	4a19      	ldr	r2, [pc, #100]	@ (80016d0 <main+0x19c>)
 800166a:	4619      	mov	r1, r3
 800166c:	4814      	ldr	r0, [pc, #80]	@ (80016c0 <main+0x18c>)
 800166e:	f004 ff9f 	bl	80065b0 <f_gets>

  	printf("File1.txt is opened and it contains the data as shown below\n");
 8001672:	481a      	ldr	r0, [pc, #104]	@ (80016dc <main+0x1a8>)
 8001674:	f005 fac2 	bl	8006bfc <puts>
  	printf(buffer);
 8001678:	4811      	ldr	r0, [pc, #68]	@ (80016c0 <main+0x18c>)
 800167a:	f005 fa57 	bl	8006b2c <iprintf>
  	printf("\n\n");
 800167e:	4818      	ldr	r0, [pc, #96]	@ (80016e0 <main+0x1ac>)
 8001680:	f005 fabc 	bl	8006bfc <puts>

  	/* Close file */
  	f_close(&fil);
 8001684:	4812      	ldr	r0, [pc, #72]	@ (80016d0 <main+0x19c>)
 8001686:	f004 feb4 	bl	80063f2 <f_close>

  	bufclear();
 800168a:	f7ff ff37 	bl	80014fc <bufclear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800168e:	bf00      	nop
 8001690:	e7fd      	b.n	800168e <main+0x15a>
 8001692:	bf00      	nop
 8001694:	08007cf8 	.word	0x08007cf8
 8001698:	200000a4 	.word	0x200000a4
 800169c:	2000210c 	.word	0x2000210c
 80016a0:	08007cfc 	.word	0x08007cfc
 80016a4:	08007d20 	.word	0x08007d20
 80016a8:	20002510 	.word	0x20002510
 80016ac:	20002514 	.word	0x20002514
 80016b0:	08007d44 	.word	0x08007d44
 80016b4:	3fe00000 	.word	0x3fe00000
 80016b8:	20002518 	.word	0x20002518
 80016bc:	08007d48 	.word	0x08007d48
 80016c0:	20002110 	.word	0x20002110
 80016c4:	2000251c 	.word	0x2000251c
 80016c8:	08007d64 	.word	0x08007d64
 80016cc:	08007d80 	.word	0x08007d80
 80016d0:	200010dc 	.word	0x200010dc
 80016d4:	08007d8c 	.word	0x08007d8c
 80016d8:	08007dc0 	.word	0x08007dc0
 80016dc:	08007dec 	.word	0x08007dec
 80016e0:	08007e28 	.word	0x08007e28

080016e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b094      	sub	sp, #80	@ 0x50
 80016e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 0320 	add.w	r3, r7, #32
 80016ee:	2230      	movs	r2, #48	@ 0x30
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f005 fb82 	bl	8006dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	4b28      	ldr	r3, [pc, #160]	@ (80017b0 <SystemClock_Config+0xcc>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	4a27      	ldr	r2, [pc, #156]	@ (80017b0 <SystemClock_Config+0xcc>)
 8001712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001716:	6413      	str	r3, [r2, #64]	@ 0x40
 8001718:	4b25      	ldr	r3, [pc, #148]	@ (80017b0 <SystemClock_Config+0xcc>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <SystemClock_Config+0xd0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a21      	ldr	r2, [pc, #132]	@ (80017b4 <SystemClock_Config+0xd0>)
 800172e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <SystemClock_Config+0xd0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001740:	2301      	movs	r3, #1
 8001742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001744:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174a:	2302      	movs	r3, #2
 800174c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001754:	2304      	movs	r3, #4
 8001756:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001758:	2348      	movs	r3, #72	@ 0x48
 800175a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800175c:	2302      	movs	r3, #2
 800175e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001760:	2303      	movs	r3, #3
 8001762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001764:	f107 0320 	add.w	r3, r7, #32
 8001768:	4618      	mov	r0, r3
 800176a:	f000 fdc5 	bl	80022f8 <HAL_RCC_OscConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001774:	f000 f8a8 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001778:	230f      	movs	r3, #15
 800177a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177c:	2302      	movs	r3, #2
 800177e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800178a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800178e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2102      	movs	r1, #2
 8001796:	4618      	mov	r0, r3
 8001798:	f001 f826 	bl	80027e8 <HAL_RCC_ClockConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017a2:	f000 f891 	bl	80018c8 <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	3750      	adds	r7, #80	@ 0x50
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40007000 	.word	0x40007000

080017b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017bc:	4b17      	ldr	r3, [pc, #92]	@ (800181c <MX_SPI1_Init+0x64>)
 80017be:	4a18      	ldr	r2, [pc, #96]	@ (8001820 <MX_SPI1_Init+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017c2:	4b16      	ldr	r3, [pc, #88]	@ (800181c <MX_SPI1_Init+0x64>)
 80017c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ca:	4b14      	ldr	r3, [pc, #80]	@ (800181c <MX_SPI1_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <MX_SPI1_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d6:	4b11      	ldr	r3, [pc, #68]	@ (800181c <MX_SPI1_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <MX_SPI1_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <MX_SPI1_Init+0x64>)
 80017e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <MX_SPI1_Init+0x64>)
 80017ec:	2218      	movs	r2, #24
 80017ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <MX_SPI1_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <MX_SPI1_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017fc:	4b07      	ldr	r3, [pc, #28]	@ (800181c <MX_SPI1_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <MX_SPI1_Init+0x64>)
 8001804:	220a      	movs	r2, #10
 8001806:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	@ (800181c <MX_SPI1_Init+0x64>)
 800180a:	f001 f9d9 	bl	8002bc0 <HAL_SPI_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001814:	f000 f858 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20002520 	.word	0x20002520
 8001820:	40013000 	.word	0x40013000

08001824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <MX_GPIO_Init+0x98>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a1e      	ldr	r2, [pc, #120]	@ (80018bc <MX_GPIO_Init+0x98>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <MX_GPIO_Init+0x98>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <MX_GPIO_Init+0x98>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a17      	ldr	r2, [pc, #92]	@ (80018bc <MX_GPIO_Init+0x98>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <MX_GPIO_Init+0x98>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	2110      	movs	r1, #16
 8001876:	4812      	ldr	r0, [pc, #72]	@ (80018c0 <MX_GPIO_Init+0x9c>)
 8001878:	f000 fd24 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800187c:	2301      	movs	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001880:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	4619      	mov	r1, r3
 8001890:	480c      	ldr	r0, [pc, #48]	@ (80018c4 <MX_GPIO_Init+0xa0>)
 8001892:	f000 fb7b 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001896:	2310      	movs	r3, #16
 8001898:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	4619      	mov	r1, r3
 80018ac:	4804      	ldr	r0, [pc, #16]	@ (80018c0 <MX_GPIO_Init+0x9c>)
 80018ae:	f000 fb6d 	bl	8001f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}/* USER CODE BEGIN 4 */
 80018b2:	bf00      	nop
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020800 	.word	0x40020800
 80018c4:	40020000 	.word	0x40020000

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <Error_Handler+0x8>

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <HAL_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001920 <HAL_MspInit+0x4c>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <HAL_MspInit+0x4c>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <HAL_MspInit+0x4c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	4a08      	ldr	r2, [pc, #32]	@ (8001920 <HAL_MspInit+0x4c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	@ 0x40
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_MspInit+0x4c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001912:	2007      	movs	r0, #7
 8001914:	f000 fb06 	bl	8001f24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	@ 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a19      	ldr	r2, [pc, #100]	@ (80019a8 <HAL_SPI_MspInit+0x84>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d12b      	bne.n	800199e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b18      	ldr	r3, [pc, #96]	@ (80019ac <HAL_SPI_MspInit+0x88>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	4a17      	ldr	r2, [pc, #92]	@ (80019ac <HAL_SPI_MspInit+0x88>)
 8001950:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001954:	6453      	str	r3, [r2, #68]	@ 0x44
 8001956:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <HAL_SPI_MspInit+0x88>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <HAL_SPI_MspInit+0x88>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	4a10      	ldr	r2, [pc, #64]	@ (80019ac <HAL_SPI_MspInit+0x88>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	@ 0x30
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <HAL_SPI_MspInit+0x88>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800197e:	23e0      	movs	r3, #224	@ 0xe0
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800198e:	2305      	movs	r3, #5
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	@ (80019b0 <HAL_SPI_MspInit+0x8c>)
 800199a:	f000 faf7 	bl	8001f8c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	@ 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40013000 	.word	0x40013000
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020000 	.word	0x40020000

080019b4 <SDTimer_Handler>:
/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
volatile uint8_t FatFsCnt=0;
volatile uint8_t timer1,timer2;

void SDTimer_Handler(void){
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
	if(timer1>0){
 80019b8:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <SDTimer_Handler+0x40>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d006      	beq.n	80019d0 <SDTimer_Handler+0x1c>
		timer1--;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <SDTimer_Handler+0x40>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <SDTimer_Handler+0x40>)
 80019ce:	701a      	strb	r2, [r3, #0]
	}
	if(timer2>0){
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <SDTimer_Handler+0x44>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <SDTimer_Handler+0x34>
		timer2--;
 80019da:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <SDTimer_Handler+0x44>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <SDTimer_Handler+0x44>)
 80019e6:	701a      	strb	r2, [r3, #0]
	}
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20002579 	.word	0x20002579
 80019f8:	2000257a 	.word	0x2000257a

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <NMI_Handler+0x4>

08001a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <MemManage_Handler+0x4>

08001a14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    FatFsCnt++;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <SysTick_Handler+0x30>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <SysTick_Handler+0x30>)
 8001a60:	701a      	strb	r2, [r3, #0]
    if(FatFsCnt>=10){
 8001a62:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <SysTick_Handler+0x30>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b09      	cmp	r3, #9
 8001a6a:	d904      	bls.n	8001a76 <SysTick_Handler+0x26>
    	FatFsCnt=0;
 8001a6c:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <SysTick_Handler+0x30>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
    	SDTimer_Handler();
 8001a72:	f7ff ff9f 	bl	80019b4 <SDTimer_Handler>
    }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a76:	f000 f95f 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20002578 	.word	0x20002578

08001a84 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <ITM_SendChar+0x48>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a0e      	ldr	r2, [pc, #56]	@ (8001acc <ITM_SendChar+0x48>)
 8001a94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a98:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <ITM_SendChar+0x4c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad0 <ITM_SendChar+0x4c>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001aa6:	bf00      	nop
 8001aa8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f8      	beq.n	8001aa8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001ab6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	6013      	str	r3, [r2, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000edfc 	.word	0xe000edfc
 8001ad0:	e0000e00 	.word	0xe0000e00

08001ad4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	e00a      	b.n	8001afc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ae6:	f3af 8000 	nop.w
 8001aea:	4601      	mov	r1, r0
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	60ba      	str	r2, [r7, #8]
 8001af2:	b2ca      	uxtb	r2, r1
 8001af4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3301      	adds	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	dbf0      	blt.n	8001ae6 <_read+0x12>
  }

  return len;
 8001b04:	687b      	ldr	r3, [r7, #4]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e009      	b.n	8001b34 <_write+0x26>
  {
   ITM_SendChar(*ptr++);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60ba      	str	r2, [r7, #8]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ffab 	bl	8001a84 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dbf1      	blt.n	8001b20 <_write+0x12>
  }
  return len;
 8001b3c:	687b      	ldr	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_close>:

int _close(int file)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <_isatty>:

int _isatty(int file)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb8:	4a14      	ldr	r2, [pc, #80]	@ (8001c0c <_sbrk+0x5c>)
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <_sbrk+0x60>)
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc4:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <_sbrk+0x64>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	@ (8001c18 <_sbrk+0x68>)
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd2:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d207      	bcs.n	8001bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be0:	f005 f95a 	bl	8006e98 <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	220c      	movs	r2, #12
 8001be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e009      	b.n	8001c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a05      	ldr	r2, [pc, #20]	@ (8001c14 <_sbrk+0x64>)
 8001c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20020000 	.word	0x20020000
 8001c10:	00000400 	.word	0x00000400
 8001c14:	2000257c 	.word	0x2000257c
 8001c18:	20002910 	.word	0x20002910

08001c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <SystemInit+0x20>)
 8001c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c26:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <SystemInit+0x20>)
 8001c28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c44:	f7ff ffea 	bl	8001c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c48:	480c      	ldr	r0, [pc, #48]	@ (8001c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c4a:	490d      	ldr	r1, [pc, #52]	@ (8001c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c50:	e002      	b.n	8001c58 <LoopCopyDataInit>

08001c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c56:	3304      	adds	r3, #4

08001c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c5c:	d3f9      	bcc.n	8001c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c60:	4c0a      	ldr	r4, [pc, #40]	@ (8001c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c64:	e001      	b.n	8001c6a <LoopFillZerobss>

08001c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c68:	3204      	adds	r2, #4

08001c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c6c:	d3fb      	bcc.n	8001c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f005 f919 	bl	8006ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c72:	f7ff fc5f 	bl	8001534 <main>
  bx  lr    
 8001c76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c80:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001c84:	08008308 	.word	0x08008308
  ldr r2, =_sbss
 8001c88:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001c8c:	2000290c 	.word	0x2000290c

08001c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c90:	e7fe      	b.n	8001c90 <ADC_IRQHandler>
	...

08001c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c98:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <HAL_Init+0x40>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd4 <HAL_Init+0x40>)
 8001c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <HAL_Init+0x40>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <HAL_Init+0x40>)
 8001caa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	@ (8001cd4 <HAL_Init+0x40>)
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f000 f931 	bl	8001f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f000 f808 	bl	8001cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc8:	f7ff fe04 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023c00 	.word	0x40023c00

08001cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce0:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <HAL_InitTick+0x54>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_InitTick+0x58>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f93b 	bl	8001f72 <HAL_SYSTICK_Config>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00e      	b.n	8001d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d80a      	bhi.n	8001d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f000 f911 	bl	8001f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d18:	4a06      	ldr	r2, [pc, #24]	@ (8001d34 <HAL_InitTick+0x5c>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000004 	.word	0x20000004
 8001d30:	2000000c 	.word	0x2000000c
 8001d34:	20000008 	.word	0x20000008

08001d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_IncTick+0x20>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_IncTick+0x24>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a04      	ldr	r2, [pc, #16]	@ (8001d5c <HAL_IncTick+0x24>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	2000000c 	.word	0x2000000c
 8001d5c:	20002580 	.word	0x20002580

08001d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return uwTick;
 8001d64:	4b03      	ldr	r3, [pc, #12]	@ (8001d74 <HAL_GetTick+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20002580 	.word	0x20002580

08001d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff ffee 	bl	8001d60 <HAL_GetTick>
 8001d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d005      	beq.n	8001d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d92:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <HAL_Delay+0x44>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d9e:	bf00      	nop
 8001da0:	f7ff ffde 	bl	8001d60 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d8f7      	bhi.n	8001da0 <HAL_Delay+0x28>
  {
  }
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2000000c 	.word	0x2000000c

08001dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df2:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	60d3      	str	r3, [r2, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <__NVIC_GetPriorityGrouping+0x18>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	f003 0307 	and.w	r3, r3, #7
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	db0a      	blt.n	8001e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	490c      	ldr	r1, [pc, #48]	@ (8001e70 <__NVIC_SetPriority+0x4c>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e4c:	e00a      	b.n	8001e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4908      	ldr	r1, [pc, #32]	@ (8001e74 <__NVIC_SetPriority+0x50>)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	761a      	strb	r2, [r3, #24]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000e100 	.word	0xe000e100
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	@ 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f1c3 0307 	rsb	r3, r3, #7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf28      	it	cs
 8001e96:	2304      	movcs	r3, #4
 8001e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d902      	bls.n	8001ea8 <NVIC_EncodePriority+0x30>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3b03      	subs	r3, #3
 8001ea6:	e000      	b.n	8001eaa <NVIC_EncodePriority+0x32>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43d9      	mvns	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	4313      	orrs	r3, r2
         );
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	@ 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ef0:	d301      	bcc.n	8001ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00f      	b.n	8001f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <SysTick_Config+0x40>)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efe:	210f      	movs	r1, #15
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f7ff ff8e 	bl	8001e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f08:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <SysTick_Config+0x40>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0e:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <SysTick_Config+0x40>)
 8001f10:	2207      	movs	r2, #7
 8001f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	e000e010 	.word	0xe000e010

08001f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff47 	bl	8001dc0 <__NVIC_SetPriorityGrouping>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f4c:	f7ff ff5c 	bl	8001e08 <__NVIC_GetPriorityGrouping>
 8001f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	6978      	ldr	r0, [r7, #20]
 8001f58:	f7ff ff8e 	bl	8001e78 <NVIC_EncodePriority>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff5d 	bl	8001e24 <__NVIC_SetPriority>
}
 8001f6a:	bf00      	nop
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffb0 	bl	8001ee0 <SysTick_Config>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e16b      	b.n	8002280 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	f040 815a 	bne.w	800227a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d005      	beq.n	8001fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d130      	bne.n	8002040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 0201 	and.w	r2, r3, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b03      	cmp	r3, #3
 800204a:	d017      	beq.n	800207c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d123      	bne.n	80020d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	220f      	movs	r2, #15
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3208      	adds	r2, #8
 80020ca:	69b9      	ldr	r1, [r7, #24]
 80020cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0203 	and.w	r2, r3, #3
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80b4 	beq.w	800227a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b60      	ldr	r3, [pc, #384]	@ (8002298 <HAL_GPIO_Init+0x30c>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	4a5f      	ldr	r2, [pc, #380]	@ (8002298 <HAL_GPIO_Init+0x30c>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002120:	6453      	str	r3, [r2, #68]	@ 0x44
 8002122:	4b5d      	ldr	r3, [pc, #372]	@ (8002298 <HAL_GPIO_Init+0x30c>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800212e:	4a5b      	ldr	r2, [pc, #364]	@ (800229c <HAL_GPIO_Init+0x310>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a52      	ldr	r2, [pc, #328]	@ (80022a0 <HAL_GPIO_Init+0x314>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02b      	beq.n	80021b2 <HAL_GPIO_Init+0x226>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a51      	ldr	r2, [pc, #324]	@ (80022a4 <HAL_GPIO_Init+0x318>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d025      	beq.n	80021ae <HAL_GPIO_Init+0x222>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a50      	ldr	r2, [pc, #320]	@ (80022a8 <HAL_GPIO_Init+0x31c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01f      	beq.n	80021aa <HAL_GPIO_Init+0x21e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4f      	ldr	r2, [pc, #316]	@ (80022ac <HAL_GPIO_Init+0x320>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d019      	beq.n	80021a6 <HAL_GPIO_Init+0x21a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4e      	ldr	r2, [pc, #312]	@ (80022b0 <HAL_GPIO_Init+0x324>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_GPIO_Init+0x216>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4d      	ldr	r2, [pc, #308]	@ (80022b4 <HAL_GPIO_Init+0x328>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00d      	beq.n	800219e <HAL_GPIO_Init+0x212>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4c      	ldr	r2, [pc, #304]	@ (80022b8 <HAL_GPIO_Init+0x32c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0x20e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4b      	ldr	r2, [pc, #300]	@ (80022bc <HAL_GPIO_Init+0x330>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_GPIO_Init+0x20a>
 8002192:	2307      	movs	r3, #7
 8002194:	e00e      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 8002196:	2308      	movs	r3, #8
 8002198:	e00c      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 800219a:	2306      	movs	r3, #6
 800219c:	e00a      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 800219e:	2305      	movs	r3, #5
 80021a0:	e008      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021a2:	2304      	movs	r3, #4
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021a6:	2303      	movs	r3, #3
 80021a8:	e004      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e002      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021b2:	2300      	movs	r3, #0
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	f002 0203 	and.w	r2, r2, #3
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	4093      	lsls	r3, r2
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c4:	4935      	ldr	r1, [pc, #212]	@ (800229c <HAL_GPIO_Init+0x310>)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d2:	4b3b      	ldr	r3, [pc, #236]	@ (80022c0 <HAL_GPIO_Init+0x334>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021f6:	4a32      	ldr	r2, [pc, #200]	@ (80022c0 <HAL_GPIO_Init+0x334>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021fc:	4b30      	ldr	r3, [pc, #192]	@ (80022c0 <HAL_GPIO_Init+0x334>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002220:	4a27      	ldr	r2, [pc, #156]	@ (80022c0 <HAL_GPIO_Init+0x334>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002226:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <HAL_GPIO_Init+0x334>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800224a:	4a1d      	ldr	r2, [pc, #116]	@ (80022c0 <HAL_GPIO_Init+0x334>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002250:	4b1b      	ldr	r3, [pc, #108]	@ (80022c0 <HAL_GPIO_Init+0x334>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002274:	4a12      	ldr	r2, [pc, #72]	@ (80022c0 <HAL_GPIO_Init+0x334>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3301      	adds	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	f67f ae90 	bls.w	8001fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3724      	adds	r7, #36	@ 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40013800 	.word	0x40013800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40020400 	.word	0x40020400
 80022a8:	40020800 	.word	0x40020800
 80022ac:	40020c00 	.word	0x40020c00
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40021400 	.word	0x40021400
 80022b8:	40021800 	.word	0x40021800
 80022bc:	40021c00 	.word	0x40021c00
 80022c0:	40013c00 	.word	0x40013c00

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e0:	e003      	b.n	80022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	619a      	str	r2, [r3, #24]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e267      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d075      	beq.n	8002402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002316:	4b88      	ldr	r3, [pc, #544]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b04      	cmp	r3, #4
 8002320:	d00c      	beq.n	800233c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002322:	4b85      	ldr	r3, [pc, #532]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800232a:	2b08      	cmp	r3, #8
 800232c:	d112      	bne.n	8002354 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232e:	4b82      	ldr	r3, [pc, #520]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800233a:	d10b      	bne.n	8002354 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	4b7e      	ldr	r3, [pc, #504]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d05b      	beq.n	8002400 <HAL_RCC_OscConfig+0x108>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d157      	bne.n	8002400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e242      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800235c:	d106      	bne.n	800236c <HAL_RCC_OscConfig+0x74>
 800235e:	4b76      	ldr	r3, [pc, #472]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a75      	ldr	r2, [pc, #468]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e01d      	b.n	80023a8 <HAL_RCC_OscConfig+0xb0>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x98>
 8002376:	4b70      	ldr	r3, [pc, #448]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a6f      	ldr	r2, [pc, #444]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b6d      	ldr	r3, [pc, #436]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a6c      	ldr	r2, [pc, #432]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0xb0>
 8002390:	4b69      	ldr	r3, [pc, #420]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a68      	ldr	r2, [pc, #416]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b66      	ldr	r3, [pc, #408]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a65      	ldr	r2, [pc, #404]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 80023a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff fcd6 	bl	8001d60 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff fcd2 	bl	8001d60 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	@ 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e207      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0xc0>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff fcc2 	bl	8001d60 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e0:	f7ff fcbe 	bl	8001d60 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	@ 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1f3      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	4b51      	ldr	r3, [pc, #324]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0xe8>
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d063      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800240e:	4b4a      	ldr	r3, [pc, #296]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241a:	4b47      	ldr	r3, [pc, #284]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002422:	2b08      	cmp	r3, #8
 8002424:	d11c      	bne.n	8002460 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002426:	4b44      	ldr	r3, [pc, #272]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d116      	bne.n	8002460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	4b41      	ldr	r3, [pc, #260]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_RCC_OscConfig+0x152>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d001      	beq.n	800244a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e1c7      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	4b3b      	ldr	r3, [pc, #236]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4937      	ldr	r1, [pc, #220]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	e03a      	b.n	80024d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002468:	4b34      	ldr	r3, [pc, #208]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246e:	f7ff fc77 	bl	8001d60 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002476:	f7ff fc73 	bl	8001d60 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e1a8      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	4b2b      	ldr	r3, [pc, #172]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002494:	4b28      	ldr	r3, [pc, #160]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4925      	ldr	r1, [pc, #148]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]
 80024a8:	e015      	b.n	80024d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024aa:	4b24      	ldr	r3, [pc, #144]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7ff fc56 	bl	8001d60 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b8:	f7ff fc52 	bl	8001d60 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e187      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d036      	beq.n	8002550 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d016      	beq.n	8002518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ea:	4b15      	ldr	r3, [pc, #84]	@ (8002540 <HAL_RCC_OscConfig+0x248>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7ff fc36 	bl	8001d60 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f8:	f7ff fc32 	bl	8001d60 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e167      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250a:	4b0b      	ldr	r3, [pc, #44]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800250c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x200>
 8002516:	e01b      	b.n	8002550 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002518:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_RCC_OscConfig+0x248>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251e:	f7ff fc1f 	bl	8001d60 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	e00e      	b.n	8002544 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002526:	f7ff fc1b 	bl	8001d60 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d907      	bls.n	8002544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e150      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
 8002538:	40023800 	.word	0x40023800
 800253c:	42470000 	.word	0x42470000
 8002540:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002544:	4b88      	ldr	r3, [pc, #544]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ea      	bne.n	8002526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8097 	beq.w	800268c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002562:	4b81      	ldr	r3, [pc, #516]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10f      	bne.n	800258e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b7d      	ldr	r3, [pc, #500]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	4a7c      	ldr	r2, [pc, #496]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257c:	6413      	str	r3, [r2, #64]	@ 0x40
 800257e:	4b7a      	ldr	r3, [pc, #488]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258a:	2301      	movs	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258e:	4b77      	ldr	r3, [pc, #476]	@ (800276c <HAL_RCC_OscConfig+0x474>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d118      	bne.n	80025cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259a:	4b74      	ldr	r3, [pc, #464]	@ (800276c <HAL_RCC_OscConfig+0x474>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a73      	ldr	r2, [pc, #460]	@ (800276c <HAL_RCC_OscConfig+0x474>)
 80025a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a6:	f7ff fbdb 	bl	8001d60 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ae:	f7ff fbd7 	bl	8001d60 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e10c      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	4b6a      	ldr	r3, [pc, #424]	@ (800276c <HAL_RCC_OscConfig+0x474>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x2ea>
 80025d4:	4b64      	ldr	r3, [pc, #400]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d8:	4a63      	ldr	r2, [pc, #396]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e0:	e01c      	b.n	800261c <HAL_RCC_OscConfig+0x324>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0x30c>
 80025ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6713      	str	r3, [r2, #112]	@ 0x70
 8002602:	e00b      	b.n	800261c <HAL_RCC_OscConfig+0x324>
 8002604:	4b58      	ldr	r3, [pc, #352]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002608:	4a57      	ldr	r2, [pc, #348]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002610:	4b55      	ldr	r3, [pc, #340]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002614:	4a54      	ldr	r2, [pc, #336]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002616:	f023 0304 	bic.w	r3, r3, #4
 800261a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d015      	beq.n	8002650 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7ff fb9c 	bl	8001d60 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	e00a      	b.n	8002642 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262c:	f7ff fb98 	bl	8001d60 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e0cb      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002642:	4b49      	ldr	r3, [pc, #292]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0ee      	beq.n	800262c <HAL_RCC_OscConfig+0x334>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002650:	f7ff fb86 	bl	8001d60 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002656:	e00a      	b.n	800266e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002658:	f7ff fb82 	bl	8001d60 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e0b5      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266e:	4b3e      	ldr	r3, [pc, #248]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ee      	bne.n	8002658 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002680:	4b39      	ldr	r3, [pc, #228]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	4a38      	ldr	r2, [pc, #224]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800268a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a1 	beq.w	80027d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002696:	4b34      	ldr	r3, [pc, #208]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d05c      	beq.n	800275c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d141      	bne.n	800272e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026aa:	4b31      	ldr	r3, [pc, #196]	@ (8002770 <HAL_RCC_OscConfig+0x478>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fb56 	bl	8001d60 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7ff fb52 	bl	8001d60 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e087      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	4b27      	ldr	r3, [pc, #156]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	019b      	lsls	r3, r3, #6
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	3b01      	subs	r3, #1
 80026f0:	041b      	lsls	r3, r3, #16
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	061b      	lsls	r3, r3, #24
 80026fa:	491b      	ldr	r1, [pc, #108]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002700:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <HAL_RCC_OscConfig+0x478>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7ff fb2b 	bl	8001d60 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270e:	f7ff fb27 	bl	8001d60 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e05c      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002720:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x416>
 800272c:	e054      	b.n	80027d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272e:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <HAL_RCC_OscConfig+0x478>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7ff fb14 	bl	8001d60 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273c:	f7ff fb10 	bl	8001d60 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e045      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x444>
 800275a:	e03d      	b.n	80027d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d107      	bne.n	8002774 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e038      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
 8002768:	40023800 	.word	0x40023800
 800276c:	40007000 	.word	0x40007000
 8002770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002774:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <HAL_RCC_OscConfig+0x4ec>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d028      	beq.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d121      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d11a      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027a4:	4013      	ands	r3, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d111      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	3b01      	subs	r3, #1
 80027be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d107      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800

080027e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0cc      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b68      	ldr	r3, [pc, #416]	@ (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d90c      	bls.n	8002824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b65      	ldr	r3, [pc, #404]	@ (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b63      	ldr	r3, [pc, #396]	@ (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0b8      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d020      	beq.n	8002872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800283c:	4b59      	ldr	r3, [pc, #356]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a58      	ldr	r2, [pc, #352]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002846:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002854:	4b53      	ldr	r3, [pc, #332]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a52      	ldr	r2, [pc, #328]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800285e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002860:	4b50      	ldr	r3, [pc, #320]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	494d      	ldr	r1, [pc, #308]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d044      	beq.n	8002908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b47      	ldr	r3, [pc, #284]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d119      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e07f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d003      	beq.n	80028a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a6:	4b3f      	ldr	r3, [pc, #252]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	4b3b      	ldr	r3, [pc, #236]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e067      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	4b37      	ldr	r3, [pc, #220]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4934      	ldr	r1, [pc, #208]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7ff fa42 	bl	8001d60 <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7ff fa3e 	bl	8001d60 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e04f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b2b      	ldr	r3, [pc, #172]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 020c 	and.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1eb      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b25      	ldr	r3, [pc, #148]	@ (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d20c      	bcs.n	8002930 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b22      	ldr	r3, [pc, #136]	@ (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b20      	ldr	r3, [pc, #128]	@ (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e032      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800293c:	4b19      	ldr	r3, [pc, #100]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4916      	ldr	r1, [pc, #88]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295a:	4b12      	ldr	r3, [pc, #72]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	490e      	ldr	r1, [pc, #56]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800296e:	f000 f821 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8002972:	4602      	mov	r2, r0
 8002974:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	490a      	ldr	r1, [pc, #40]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	5ccb      	ldrb	r3, [r1, r3]
 8002982:	fa22 f303 	lsr.w	r3, r2, r3
 8002986:	4a09      	ldr	r2, [pc, #36]	@ (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800298a:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff f9a2 	bl	8001cd8 <HAL_InitTick>

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023c00 	.word	0x40023c00
 80029a4:	40023800 	.word	0x40023800
 80029a8:	08007e74 	.word	0x08007e74
 80029ac:	20000004 	.word	0x20000004
 80029b0:	20000008 	.word	0x20000008

080029b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b8:	b094      	sub	sp, #80	@ 0x50
 80029ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029cc:	4b79      	ldr	r3, [pc, #484]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d00d      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x40>
 80029d8:	2b08      	cmp	r3, #8
 80029da:	f200 80e1 	bhi.w	8002ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x34>
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_GetSysClockFreq+0x3a>
 80029e6:	e0db      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b73      	ldr	r3, [pc, #460]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029ec:	e0db      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ee:	4b73      	ldr	r3, [pc, #460]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x208>)
 80029f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029f2:	e0d8      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f4:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029fe:	4b6d      	ldr	r3, [pc, #436]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d063      	beq.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	099b      	lsrs	r3, r3, #6
 8002a10:	2200      	movs	r2, #0
 8002a12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a1e:	2300      	movs	r3, #0
 8002a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a26:	4622      	mov	r2, r4
 8002a28:	462b      	mov	r3, r5
 8002a2a:	f04f 0000 	mov.w	r0, #0
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	0159      	lsls	r1, r3, #5
 8002a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a38:	0150      	lsls	r0, r2, #5
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4621      	mov	r1, r4
 8002a40:	1a51      	subs	r1, r2, r1
 8002a42:	6139      	str	r1, [r7, #16]
 8002a44:	4629      	mov	r1, r5
 8002a46:	eb63 0301 	sbc.w	r3, r3, r1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a58:	4659      	mov	r1, fp
 8002a5a:	018b      	lsls	r3, r1, #6
 8002a5c:	4651      	mov	r1, sl
 8002a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a62:	4651      	mov	r1, sl
 8002a64:	018a      	lsls	r2, r1, #6
 8002a66:	4651      	mov	r1, sl
 8002a68:	ebb2 0801 	subs.w	r8, r2, r1
 8002a6c:	4659      	mov	r1, fp
 8002a6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a86:	4690      	mov	r8, r2
 8002a88:	4699      	mov	r9, r3
 8002a8a:	4623      	mov	r3, r4
 8002a8c:	eb18 0303 	adds.w	r3, r8, r3
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	462b      	mov	r3, r5
 8002a94:	eb49 0303 	adc.w	r3, r9, r3
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	024b      	lsls	r3, r1, #9
 8002aaa:	4621      	mov	r1, r4
 8002aac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	024a      	lsls	r2, r1, #9
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aba:	2200      	movs	r2, #0
 8002abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ac0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ac4:	f7fd feda 	bl	800087c <__aeabi_uldivmod>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4613      	mov	r3, r2
 8002ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ad0:	e058      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad2:	4b38      	ldr	r3, [pc, #224]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	099b      	lsrs	r3, r3, #6
 8002ad8:	2200      	movs	r2, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	4611      	mov	r1, r2
 8002ade:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ae2:	623b      	str	r3, [r7, #32]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002aec:	4642      	mov	r2, r8
 8002aee:	464b      	mov	r3, r9
 8002af0:	f04f 0000 	mov.w	r0, #0
 8002af4:	f04f 0100 	mov.w	r1, #0
 8002af8:	0159      	lsls	r1, r3, #5
 8002afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002afe:	0150      	lsls	r0, r2, #5
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4641      	mov	r1, r8
 8002b06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b24:	ebb2 040a 	subs.w	r4, r2, sl
 8002b28:	eb63 050b 	sbc.w	r5, r3, fp
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	00eb      	lsls	r3, r5, #3
 8002b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b3a:	00e2      	lsls	r2, r4, #3
 8002b3c:	4614      	mov	r4, r2
 8002b3e:	461d      	mov	r5, r3
 8002b40:	4643      	mov	r3, r8
 8002b42:	18e3      	adds	r3, r4, r3
 8002b44:	603b      	str	r3, [r7, #0]
 8002b46:	464b      	mov	r3, r9
 8002b48:	eb45 0303 	adc.w	r3, r5, r3
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	028b      	lsls	r3, r1, #10
 8002b5e:	4621      	mov	r1, r4
 8002b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b64:	4621      	mov	r1, r4
 8002b66:	028a      	lsls	r2, r1, #10
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b6e:	2200      	movs	r2, #0
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	61fa      	str	r2, [r7, #28]
 8002b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b78:	f7fd fe80 	bl	800087c <__aeabi_uldivmod>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4613      	mov	r3, r2
 8002b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	0c1b      	lsrs	r3, r3, #16
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b9e:	e002      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3750      	adds	r7, #80	@ 0x50
 8002bac:	46bd      	mov	sp, r7
 8002bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	00f42400 	.word	0x00f42400
 8002bbc:	007a1200 	.word	0x007a1200

08002bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e07b      	b.n	8002cca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d108      	bne.n	8002bec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002be2:	d009      	beq.n	8002bf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	61da      	str	r2, [r3, #28]
 8002bea:	e005      	b.n	8002bf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe fe86 	bl	8001924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7c:	ea42 0103 	orr.w	r1, r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	f003 0104 	and.w	r1, r3, #4
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	f003 0210 	and.w	r2, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b088      	sub	sp, #32
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ce2:	f7ff f83d 	bl	8001d60 <HAL_GetTick>
 8002ce6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d001      	beq.n	8002cfc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e12a      	b.n	8002f52 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_SPI_Transmit+0x36>
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e122      	b.n	8002f52 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_SPI_Transmit+0x48>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e11b      	b.n	8002f52 <HAL_SPI_Transmit+0x280>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2203      	movs	r2, #3
 8002d26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	88fa      	ldrh	r2, [r7, #6]
 8002d3a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	88fa      	ldrh	r2, [r7, #6]
 8002d40:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d68:	d10f      	bne.n	8002d8a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d94:	2b40      	cmp	r3, #64	@ 0x40
 8002d96:	d007      	beq.n	8002da8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002da6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002db0:	d152      	bne.n	8002e58 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_SPI_Transmit+0xee>
 8002dba:	8b7b      	ldrh	r3, [r7, #26]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d145      	bne.n	8002e4c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc4:	881a      	ldrh	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd0:	1c9a      	adds	r2, r3, #2
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002de4:	e032      	b.n	8002e4c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d112      	bne.n	8002e1a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df8:	881a      	ldrh	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e04:	1c9a      	adds	r2, r3, #2
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e18:	e018      	b.n	8002e4c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e1a:	f7fe ffa1 	bl	8001d60 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d803      	bhi.n	8002e32 <HAL_SPI_Transmit+0x160>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d102      	bne.n	8002e38 <HAL_SPI_Transmit+0x166>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d109      	bne.n	8002e4c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e082      	b.n	8002f52 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1c7      	bne.n	8002de6 <HAL_SPI_Transmit+0x114>
 8002e56:	e053      	b.n	8002f00 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_SPI_Transmit+0x194>
 8002e60:	8b7b      	ldrh	r3, [r7, #26]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d147      	bne.n	8002ef6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	7812      	ldrb	r2, [r2, #0]
 8002e72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e8c:	e033      	b.n	8002ef6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d113      	bne.n	8002ec4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	330c      	adds	r3, #12
 8002ea6:	7812      	ldrb	r2, [r2, #0]
 8002ea8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ec2:	e018      	b.n	8002ef6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec4:	f7fe ff4c 	bl	8001d60 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d803      	bhi.n	8002edc <HAL_SPI_Transmit+0x20a>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eda:	d102      	bne.n	8002ee2 <HAL_SPI_Transmit+0x210>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e02d      	b.n	8002f52 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1c6      	bne.n	8002e8e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	6839      	ldr	r1, [r7, #0]
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fa59 	bl	80033bc <SPI_EndRxTxTransaction>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
  }
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3720      	adds	r7, #32
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b08a      	sub	sp, #40	@ 0x28
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f6c:	f7fe fef8 	bl	8001d60 <HAL_GetTick>
 8002f70:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f78:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002f80:	887b      	ldrh	r3, [r7, #2]
 8002f82:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f84:	7ffb      	ldrb	r3, [r7, #31]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d00c      	beq.n	8002fa4 <HAL_SPI_TransmitReceive+0x4a>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f90:	d106      	bne.n	8002fa0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <HAL_SPI_TransmitReceive+0x46>
 8002f9a:	7ffb      	ldrb	r3, [r7, #31]
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d001      	beq.n	8002fa4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e17f      	b.n	80032a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_SPI_TransmitReceive+0x5c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <HAL_SPI_TransmitReceive+0x5c>
 8002fb0:	887b      	ldrh	r3, [r7, #2]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e174      	b.n	80032a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x6e>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e16d      	b.n	80032a4 <HAL_SPI_TransmitReceive+0x34a>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d003      	beq.n	8002fe4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2205      	movs	r2, #5
 8002fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	887a      	ldrh	r2, [r7, #2]
 8002ffa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	887a      	ldrh	r2, [r7, #2]
 8003006:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	887a      	ldrh	r2, [r7, #2]
 800300c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003024:	2b40      	cmp	r3, #64	@ 0x40
 8003026:	d007      	beq.n	8003038 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003036:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003040:	d17e      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_SPI_TransmitReceive+0xf6>
 800304a:	8afb      	ldrh	r3, [r7, #22]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d16c      	bne.n	800312a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003054:	881a      	ldrh	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003060:	1c9a      	adds	r2, r3, #2
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003074:	e059      	b.n	800312a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b02      	cmp	r3, #2
 8003082:	d11b      	bne.n	80030bc <HAL_SPI_TransmitReceive+0x162>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d016      	beq.n	80030bc <HAL_SPI_TransmitReceive+0x162>
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	2b01      	cmp	r3, #1
 8003092:	d113      	bne.n	80030bc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003098:	881a      	ldrh	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	1c9a      	adds	r2, r3, #2
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d119      	bne.n	80030fe <HAL_SPI_TransmitReceive+0x1a4>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d014      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030de:	b292      	uxth	r2, r2
 80030e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e6:	1c9a      	adds	r2, r3, #2
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030fa:	2301      	movs	r3, #1
 80030fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030fe:	f7fe fe2f 	bl	8001d60 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800310a:	429a      	cmp	r2, r3
 800310c:	d80d      	bhi.n	800312a <HAL_SPI_TransmitReceive+0x1d0>
 800310e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d009      	beq.n	800312a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e0bc      	b.n	80032a4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1a0      	bne.n	8003076 <HAL_SPI_TransmitReceive+0x11c>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d19b      	bne.n	8003076 <HAL_SPI_TransmitReceive+0x11c>
 800313e:	e082      	b.n	8003246 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_SPI_TransmitReceive+0x1f4>
 8003148:	8afb      	ldrh	r3, [r7, #22]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d171      	bne.n	8003232 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	330c      	adds	r3, #12
 8003158:	7812      	ldrb	r2, [r2, #0]
 800315a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003174:	e05d      	b.n	8003232 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b02      	cmp	r3, #2
 8003182:	d11c      	bne.n	80031be <HAL_SPI_TransmitReceive+0x264>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d017      	beq.n	80031be <HAL_SPI_TransmitReceive+0x264>
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	2b01      	cmp	r3, #1
 8003192:	d114      	bne.n	80031be <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	330c      	adds	r3, #12
 800319e:	7812      	ldrb	r2, [r2, #0]
 80031a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d119      	bne.n	8003200 <HAL_SPI_TransmitReceive+0x2a6>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d014      	beq.n	8003200 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031fc:	2301      	movs	r3, #1
 80031fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003200:	f7fe fdae 	bl	8001d60 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800320c:	429a      	cmp	r2, r3
 800320e:	d803      	bhi.n	8003218 <HAL_SPI_TransmitReceive+0x2be>
 8003210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003216:	d102      	bne.n	800321e <HAL_SPI_TransmitReceive+0x2c4>
 8003218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e038      	b.n	80032a4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d19c      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x21c>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d197      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003246:	6a3a      	ldr	r2, [r7, #32]
 8003248:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f8b6 	bl	80033bc <SPI_EndRxTxTransaction>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e01d      	b.n	80032a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10a      	bne.n	8003286 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80032a2:	2300      	movs	r3, #0
  }
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3728      	adds	r7, #40	@ 0x28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032bc:	f7fe fd50 	bl	8001d60 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	4413      	add	r3, r2
 80032ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032cc:	f7fe fd48 	bl	8001d60 <HAL_GetTick>
 80032d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032d2:	4b39      	ldr	r3, [pc, #228]	@ (80033b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	015b      	lsls	r3, r3, #5
 80032d8:	0d1b      	lsrs	r3, r3, #20
 80032da:	69fa      	ldr	r2, [r7, #28]
 80032dc:	fb02 f303 	mul.w	r3, r2, r3
 80032e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032e2:	e054      	b.n	800338e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d050      	beq.n	800338e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032ec:	f7fe fd38 	bl	8001d60 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d902      	bls.n	8003302 <SPI_WaitFlagStateUntilTimeout+0x56>
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d13d      	bne.n	800337e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003310:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800331a:	d111      	bne.n	8003340 <SPI_WaitFlagStateUntilTimeout+0x94>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003324:	d004      	beq.n	8003330 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800332e:	d107      	bne.n	8003340 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800333e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003348:	d10f      	bne.n	800336a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003368:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e017      	b.n	80033ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	3b01      	subs	r3, #1
 800338c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	429a      	cmp	r2, r3
 800339c:	bf0c      	ite	eq
 800339e:	2301      	moveq	r3, #1
 80033a0:	2300      	movne	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d19b      	bne.n	80032e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3720      	adds	r7, #32
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000004 	.word	0x20000004

080033bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2201      	movs	r2, #1
 80033d0:	2102      	movs	r1, #2
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7ff ff6a 	bl	80032ac <SPI_WaitFlagStateUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e2:	f043 0220 	orr.w	r2, r3, #32
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e032      	b.n	8003454 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033ee:	4b1b      	ldr	r3, [pc, #108]	@ (800345c <SPI_EndRxTxTransaction+0xa0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003460 <SPI_EndRxTxTransaction+0xa4>)
 80033f4:	fba2 2303 	umull	r2, r3, r2, r3
 80033f8:	0d5b      	lsrs	r3, r3, #21
 80033fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800340c:	d112      	bne.n	8003434 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2200      	movs	r2, #0
 8003416:	2180      	movs	r1, #128	@ 0x80
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7ff ff47 	bl	80032ac <SPI_WaitFlagStateUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d016      	beq.n	8003452 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e00f      	b.n	8003454 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	3b01      	subs	r3, #1
 800343e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	2b80      	cmp	r3, #128	@ 0x80
 800344c:	d0f2      	beq.n	8003434 <SPI_EndRxTxTransaction+0x78>
 800344e:	e000      	b.n	8003452 <SPI_EndRxTxTransaction+0x96>
        break;
 8003450:	bf00      	nop
  }

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000004 	.word	0x20000004
 8003460:	165e9f81 	.word	0x165e9f81

08003464 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003468:	4904      	ldr	r1, [pc, #16]	@ (800347c <MX_FATFS_Init+0x18>)
 800346a:	4805      	ldr	r0, [pc, #20]	@ (8003480 <MX_FATFS_Init+0x1c>)
 800346c:	f003 f9c6 	bl	80067fc <FATFS_LinkDriver>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	4b03      	ldr	r3, [pc, #12]	@ (8003484 <MX_FATFS_Init+0x20>)
 8003476:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003478:	bf00      	nop
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20002588 	.word	0x20002588
 8003480:	20000010 	.word	0x20000010
 8003484:	20002584 	.word	0x20002584

08003488 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800348c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800348e:	4618      	mov	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fd fd15 	bl	8000ed4 <SD_disk_initialize>
 80034aa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd fded 	bl	80010a0 <SD_disk_status>
 80034c6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	4603      	mov	r3, r0
 80034de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80034e0:	7bf8      	ldrb	r0, [r7, #15]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	f7fd fdf0 	bl	80010cc <SD_disk_read>
 80034ec:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	4603      	mov	r3, r0
 8003504:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003506:	7bf8      	ldrb	r0, [r7, #15]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	f7fd fe47 	bl	80011a0 <SD_disk_write>
 8003512:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	603a      	str	r2, [r7, #0]
 8003526:	71fb      	strb	r3, [r7, #7]
 8003528:	460b      	mov	r3, r1
 800352a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800352c:	79b9      	ldrb	r1, [r7, #6]
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd feb8 	bl	80012a8 <SD_disk_ioctl>
 8003538:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	4a08      	ldr	r2, [pc, #32]	@ (8003574 <disk_status+0x30>)
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	79fa      	ldrb	r2, [r7, #7]
 800355c:	4905      	ldr	r1, [pc, #20]	@ (8003574 <disk_status+0x30>)
 800355e:	440a      	add	r2, r1
 8003560:	7a12      	ldrb	r2, [r2, #8]
 8003562:	4610      	mov	r0, r2
 8003564:	4798      	blx	r3
 8003566:	4603      	mov	r3, r0
 8003568:	73fb      	strb	r3, [r7, #15]
  return stat;
 800356a:	7bfb      	ldrb	r3, [r7, #15]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	200027b4 	.word	0x200027b4

08003578 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	4a0e      	ldr	r2, [pc, #56]	@ (80035c4 <disk_initialize+0x4c>)
 800358a:	5cd3      	ldrb	r3, [r2, r3]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d114      	bne.n	80035ba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	4a0c      	ldr	r2, [pc, #48]	@ (80035c4 <disk_initialize+0x4c>)
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	79fa      	ldrb	r2, [r7, #7]
 800359e:	4909      	ldr	r1, [pc, #36]	@ (80035c4 <disk_initialize+0x4c>)
 80035a0:	440a      	add	r2, r1
 80035a2:	7a12      	ldrb	r2, [r2, #8]
 80035a4:	4610      	mov	r0, r2
 80035a6:	4798      	blx	r3
 80035a8:	4603      	mov	r3, r0
 80035aa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	4a03      	ldr	r2, [pc, #12]	@ (80035c4 <disk_initialize+0x4c>)
 80035b6:	2101      	movs	r1, #1
 80035b8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	200027b4 	.word	0x200027b4

080035c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4603      	mov	r3, r0
 80035d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	4a0a      	ldr	r2, [pc, #40]	@ (8003604 <disk_read+0x3c>)
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	689c      	ldr	r4, [r3, #8]
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	4a07      	ldr	r2, [pc, #28]	@ (8003604 <disk_read+0x3c>)
 80035e8:	4413      	add	r3, r2
 80035ea:	7a18      	ldrb	r0, [r3, #8]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	47a0      	blx	r4
 80035f4:	4603      	mov	r3, r0
 80035f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd90      	pop	{r4, r7, pc}
 8003602:	bf00      	nop
 8003604:	200027b4 	.word	0x200027b4

08003608 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	4603      	mov	r3, r0
 8003616:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	4a0a      	ldr	r2, [pc, #40]	@ (8003644 <disk_write+0x3c>)
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	68dc      	ldr	r4, [r3, #12]
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	4a07      	ldr	r2, [pc, #28]	@ (8003644 <disk_write+0x3c>)
 8003628:	4413      	add	r3, r2
 800362a:	7a18      	ldrb	r0, [r3, #8]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	47a0      	blx	r4
 8003634:	4603      	mov	r3, r0
 8003636:	75fb      	strb	r3, [r7, #23]
  return res;
 8003638:	7dfb      	ldrb	r3, [r7, #23]
}
 800363a:	4618      	mov	r0, r3
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	bd90      	pop	{r4, r7, pc}
 8003642:	bf00      	nop
 8003644:	200027b4 	.word	0x200027b4

08003648 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	603a      	str	r2, [r7, #0]
 8003652:	71fb      	strb	r3, [r7, #7]
 8003654:	460b      	mov	r3, r1
 8003656:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	4a09      	ldr	r2, [pc, #36]	@ (8003680 <disk_ioctl+0x38>)
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	79fa      	ldrb	r2, [r7, #7]
 8003666:	4906      	ldr	r1, [pc, #24]	@ (8003680 <disk_ioctl+0x38>)
 8003668:	440a      	add	r2, r1
 800366a:	7a10      	ldrb	r0, [r2, #8]
 800366c:	79b9      	ldrb	r1, [r7, #6]
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	4798      	blx	r3
 8003672:	4603      	mov	r3, r0
 8003674:	73fb      	strb	r3, [r7, #15]
  return res;
 8003676:	7bfb      	ldrb	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	200027b4 	.word	0x200027b4

08003684 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3301      	adds	r3, #1
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003694:	89fb      	ldrh	r3, [r7, #14]
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	b21a      	sxth	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	b21b      	sxth	r3, r3
 80036a0:	4313      	orrs	r3, r2
 80036a2:	b21b      	sxth	r3, r3
 80036a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80036a6:	89fb      	ldrh	r3, [r7, #14]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3303      	adds	r3, #3
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	3202      	adds	r2, #2
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	3201      	adds	r2, #1
 80036da:	7812      	ldrb	r2, [r2, #0]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	7812      	ldrb	r2, [r2, #0]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80036ec:	68fb      	ldr	r3, [r7, #12]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	887a      	ldrh	r2, [r7, #2]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	887b      	ldrh	r3, [r7, #2]
 8003714:	0a1b      	lsrs	r3, r3, #8
 8003716:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	887a      	ldrh	r2, [r7, #2]
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	701a      	strb	r2, [r3, #0]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	0a1b      	lsrs	r3, r3, #8
 800374a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00d      	beq.n	80037be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	1c53      	adds	r3, r2, #1
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	1c59      	adds	r1, r3, #1
 80037ac:	6179      	str	r1, [r7, #20]
 80037ae:	7812      	ldrb	r2, [r2, #0]
 80037b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	607b      	str	r3, [r7, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f1      	bne.n	80037a2 <mem_cpy+0x1a>
	}
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80037ca:	b480      	push	{r7}
 80037cc:	b087      	sub	sp, #28
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	617a      	str	r2, [r7, #20]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3b01      	subs	r3, #1
 80037ea:	607b      	str	r3, [r7, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f3      	bne.n	80037da <mem_set+0x10>
}
 80037f2:	bf00      	nop
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003800:	b480      	push	{r7}
 8003802:	b089      	sub	sp, #36	@ 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	61fa      	str	r2, [r7, #28]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	4619      	mov	r1, r3
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	61ba      	str	r2, [r7, #24]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	1acb      	subs	r3, r1, r3
 800382c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3b01      	subs	r3, #1
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <mem_cmp+0x40>
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0eb      	beq.n	8003818 <mem_cmp+0x18>

	return r;
 8003840:	697b      	ldr	r3, [r7, #20]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3724      	adds	r7, #36	@ 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003858:	e002      	b.n	8003860 <chk_chr+0x12>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3301      	adds	r3, #1
 800385e:	607b      	str	r3, [r7, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <chk_chr+0x26>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	4293      	cmp	r3, r2
 8003872:	d1f2      	bne.n	800385a <chk_chr+0xc>
	return *str;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	781b      	ldrb	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	e029      	b.n	80038ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003898:	4a27      	ldr	r2, [pc, #156]	@ (8003938 <chk_lock+0xb4>)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	4413      	add	r3, r2
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01d      	beq.n	80038e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80038a6:	4a24      	ldr	r2, [pc, #144]	@ (8003938 <chk_lock+0xb4>)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	4413      	add	r3, r2
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d116      	bne.n	80038e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80038b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003938 <chk_lock+0xb4>)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	4413      	add	r3, r2
 80038c0:	3304      	adds	r3, #4
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d10c      	bne.n	80038e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80038cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003938 <chk_lock+0xb4>)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	4413      	add	r3, r2
 80038d4:	3308      	adds	r3, #8
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80038dc:	429a      	cmp	r2, r3
 80038de:	d102      	bne.n	80038e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80038e0:	e007      	b.n	80038f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	3301      	adds	r3, #1
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d9d2      	bls.n	8003898 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d109      	bne.n	800390c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <chk_lock+0x80>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d101      	bne.n	8003908 <chk_lock+0x84>
 8003904:	2300      	movs	r3, #0
 8003906:	e010      	b.n	800392a <chk_lock+0xa6>
 8003908:	2312      	movs	r3, #18
 800390a:	e00e      	b.n	800392a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d108      	bne.n	8003924 <chk_lock+0xa0>
 8003912:	4a09      	ldr	r2, [pc, #36]	@ (8003938 <chk_lock+0xb4>)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	4413      	add	r3, r2
 800391a:	330c      	adds	r3, #12
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003922:	d101      	bne.n	8003928 <chk_lock+0xa4>
 8003924:	2310      	movs	r3, #16
 8003926:	e000      	b.n	800392a <chk_lock+0xa6>
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20002594 	.word	0x20002594

0800393c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
 8003946:	e002      	b.n	800394e <enq_lock+0x12>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3301      	adds	r3, #1
 800394c:	607b      	str	r3, [r7, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d806      	bhi.n	8003962 <enq_lock+0x26>
 8003954:	4a09      	ldr	r2, [pc, #36]	@ (800397c <enq_lock+0x40>)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	4413      	add	r3, r2
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f2      	bne.n	8003948 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b02      	cmp	r3, #2
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20002594 	.word	0x20002594

08003980 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	e01f      	b.n	80039d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003990:	4a41      	ldr	r2, [pc, #260]	@ (8003a98 <inc_lock+0x118>)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	4413      	add	r3, r2
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d113      	bne.n	80039ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80039a2:	4a3d      	ldr	r2, [pc, #244]	@ (8003a98 <inc_lock+0x118>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	4413      	add	r3, r2
 80039aa:	3304      	adds	r3, #4
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d109      	bne.n	80039ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80039b6:	4a38      	ldr	r2, [pc, #224]	@ (8003a98 <inc_lock+0x118>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	4413      	add	r3, r2
 80039be:	3308      	adds	r3, #8
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d006      	beq.n	80039d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3301      	adds	r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d9dc      	bls.n	8003990 <inc_lock+0x10>
 80039d6:	e000      	b.n	80039da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80039d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d132      	bne.n	8003a46 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	e002      	b.n	80039ec <inc_lock+0x6c>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3301      	adds	r3, #1
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d806      	bhi.n	8003a00 <inc_lock+0x80>
 80039f2:	4a29      	ldr	r2, [pc, #164]	@ (8003a98 <inc_lock+0x118>)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	4413      	add	r3, r2
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f2      	bne.n	80039e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d101      	bne.n	8003a0a <inc_lock+0x8a>
 8003a06:	2300      	movs	r3, #0
 8003a08:	e040      	b.n	8003a8c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4922      	ldr	r1, [pc, #136]	@ (8003a98 <inc_lock+0x118>)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	440b      	add	r3, r1
 8003a16:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	491e      	ldr	r1, [pc, #120]	@ (8003a98 <inc_lock+0x118>)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	440b      	add	r3, r1
 8003a24:	3304      	adds	r3, #4
 8003a26:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	491a      	ldr	r1, [pc, #104]	@ (8003a98 <inc_lock+0x118>)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	440b      	add	r3, r1
 8003a34:	3308      	adds	r3, #8
 8003a36:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003a38:	4a17      	ldr	r2, [pc, #92]	@ (8003a98 <inc_lock+0x118>)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	4413      	add	r3, r2
 8003a40:	330c      	adds	r3, #12
 8003a42:	2200      	movs	r2, #0
 8003a44:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d009      	beq.n	8003a60 <inc_lock+0xe0>
 8003a4c:	4a12      	ldr	r2, [pc, #72]	@ (8003a98 <inc_lock+0x118>)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	4413      	add	r3, r2
 8003a54:	330c      	adds	r3, #12
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <inc_lock+0xe0>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e015      	b.n	8003a8c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d108      	bne.n	8003a78 <inc_lock+0xf8>
 8003a66:	4a0c      	ldr	r2, [pc, #48]	@ (8003a98 <inc_lock+0x118>)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	4413      	add	r3, r2
 8003a6e:	330c      	adds	r3, #12
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	e001      	b.n	8003a7c <inc_lock+0xfc>
 8003a78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a7c:	4906      	ldr	r1, [pc, #24]	@ (8003a98 <inc_lock+0x118>)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	440b      	add	r3, r1
 8003a84:	330c      	adds	r3, #12
 8003a86:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3301      	adds	r3, #1
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	20002594 	.word	0x20002594

08003a9c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d825      	bhi.n	8003afc <dec_lock+0x60>
		n = Files[i].ctr;
 8003ab0:	4a17      	ldr	r2, [pc, #92]	@ (8003b10 <dec_lock+0x74>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	4413      	add	r3, r2
 8003ab8:	330c      	adds	r3, #12
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003abe:	89fb      	ldrh	r3, [r7, #14]
 8003ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ac4:	d101      	bne.n	8003aca <dec_lock+0x2e>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003aca:	89fb      	ldrh	r3, [r7, #14]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <dec_lock+0x3a>
 8003ad0:	89fb      	ldrh	r3, [r7, #14]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8003b10 <dec_lock+0x74>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	4413      	add	r3, r2
 8003ade:	330c      	adds	r3, #12
 8003ae0:	89fa      	ldrh	r2, [r7, #14]
 8003ae2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003ae4:	89fb      	ldrh	r3, [r7, #14]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d105      	bne.n	8003af6 <dec_lock+0x5a>
 8003aea:	4a09      	ldr	r2, [pc, #36]	@ (8003b10 <dec_lock+0x74>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	4413      	add	r3, r2
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	737b      	strb	r3, [r7, #13]
 8003afa:	e001      	b.n	8003b00 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003afc:	2302      	movs	r3, #2
 8003afe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003b00:	7b7b      	ldrb	r3, [r7, #13]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20002594 	.word	0x20002594

08003b14 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	e010      	b.n	8003b44 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003b22:	4a0d      	ldr	r2, [pc, #52]	@ (8003b58 <clear_lock+0x44>)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	4413      	add	r3, r2
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d105      	bne.n	8003b3e <clear_lock+0x2a>
 8003b32:	4a09      	ldr	r2, [pc, #36]	@ (8003b58 <clear_lock+0x44>)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	4413      	add	r3, r2
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3301      	adds	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d9eb      	bls.n	8003b22 <clear_lock+0xe>
	}
}
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	20002594 	.word	0x20002594

08003b5c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	78db      	ldrb	r3, [r3, #3]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d034      	beq.n	8003bda <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b74:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	7858      	ldrb	r0, [r3, #1]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003b80:	2301      	movs	r3, #1
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	f7ff fd40 	bl	8003608 <disk_write>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
 8003b92:	e022      	b.n	8003bda <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	1ad2      	subs	r2, r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d217      	bcs.n	8003bda <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	789b      	ldrb	r3, [r3, #2]
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	e010      	b.n	8003bd4 <sync_window+0x78>
					wsect += fs->fsize;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4413      	add	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	7858      	ldrb	r0, [r3, #1]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	f7ff fd1d 	bl	8003608 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d8eb      	bhi.n	8003bb2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d01b      	beq.n	8003c34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ffad 	bl	8003b5c <sync_window>
 8003c02:	4603      	mov	r3, r0
 8003c04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d113      	bne.n	8003c34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	7858      	ldrb	r0, [r3, #1]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003c16:	2301      	movs	r3, #1
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	f7ff fcd5 	bl	80035c8 <disk_read>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d004      	beq.n	8003c2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ff87 	bl	8003b5c <sync_window>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d159      	bne.n	8003d0c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d149      	bne.n	8003cf4 <sync_fs+0xb4>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	791b      	ldrb	r3, [r3, #4]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d145      	bne.n	8003cf4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	899b      	ldrh	r3, [r3, #12]
 8003c72:	461a      	mov	r2, r3
 8003c74:	2100      	movs	r1, #0
 8003c76:	f7ff fda8 	bl	80037ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3338      	adds	r3, #56	@ 0x38
 8003c7e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003c82:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fd37 	bl	80036fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3338      	adds	r3, #56	@ 0x38
 8003c90:	4921      	ldr	r1, [pc, #132]	@ (8003d18 <sync_fs+0xd8>)
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fd4c 	bl	8003730 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3338      	adds	r3, #56	@ 0x38
 8003c9c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003ca0:	491e      	ldr	r1, [pc, #120]	@ (8003d1c <sync_fs+0xdc>)
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fd44 	bl	8003730 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3338      	adds	r3, #56	@ 0x38
 8003cac:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f7ff fd3a 	bl	8003730 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3338      	adds	r3, #56	@ 0x38
 8003cc0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	f7ff fd30 	bl	8003730 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	7858      	ldrb	r0, [r3, #1]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f7ff fc8d 	bl	8003608 <disk_write>
			fs->fsi_flag = 0;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	785b      	ldrb	r3, [r3, #1]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fca3 	bl	8003648 <disk_ioctl>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <sync_fs+0xcc>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	41615252 	.word	0x41615252
 8003d1c:	61417272 	.word	0x61417272

08003d20 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	3b02      	subs	r3, #2
 8003d2e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	3b02      	subs	r3, #2
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d301      	bcc.n	8003d40 <clust2sect+0x20>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e008      	b.n	8003d52 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	895b      	ldrh	r3, [r3, #10]
 8003d44:	461a      	mov	r2, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	fb03 f202 	mul.w	r2, r3, r2
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d50:	4413      	add	r3, r2
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b086      	sub	sp, #24
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d904      	bls.n	8003d7e <get_fat+0x20>
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d302      	bcc.n	8003d84 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003d7e:	2301      	movs	r3, #1
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e0ba      	b.n	8003efa <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	f000 8082 	beq.w	8003e98 <get_fat+0x13a>
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	f300 80a6 	bgt.w	8003ee6 <get_fat+0x188>
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d002      	beq.n	8003da4 <get_fat+0x46>
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d055      	beq.n	8003e4e <get_fat+0xf0>
 8003da2:	e0a0      	b.n	8003ee6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4413      	add	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	899b      	ldrh	r3, [r3, #12]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6938      	ldr	r0, [r7, #16]
 8003dc8:	f7ff ff0c 	bl	8003be4 <move_window>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f040 808c 	bne.w	8003eec <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	60fa      	str	r2, [r7, #12]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	8992      	ldrh	r2, [r2, #12]
 8003dde:	fbb3 f1f2 	udiv	r1, r3, r2
 8003de2:	fb01 f202 	mul.w	r2, r1, r2
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4413      	add	r3, r2
 8003dec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003df0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	899b      	ldrh	r3, [r3, #12]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e02:	4413      	add	r3, r2
 8003e04:	4619      	mov	r1, r3
 8003e06:	6938      	ldr	r0, [r7, #16]
 8003e08:	f7ff feec 	bl	8003be4 <move_window>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d16e      	bne.n	8003ef0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	899b      	ldrh	r3, [r3, #12]
 8003e16:	461a      	mov	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e1e:	fb01 f202 	mul.w	r2, r1, r2
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <get_fat+0xe6>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	e002      	b.n	8003e4a <get_fat+0xec>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4a:	617b      	str	r3, [r7, #20]
			break;
 8003e4c:	e055      	b.n	8003efa <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	899b      	ldrh	r3, [r3, #12]
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e62:	4413      	add	r3, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	6938      	ldr	r0, [r7, #16]
 8003e68:	f7ff febc 	bl	8003be4 <move_window>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d140      	bne.n	8003ef4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	8992      	ldrh	r2, [r2, #12]
 8003e80:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e84:	fb00 f202 	mul.w	r2, r0, r2
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fbf9 	bl	8003684 <ld_word>
 8003e92:	4603      	mov	r3, r0
 8003e94:	617b      	str	r3, [r7, #20]
			break;
 8003e96:	e030      	b.n	8003efa <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	899b      	ldrh	r3, [r3, #12]
 8003ea0:	089b      	lsrs	r3, r3, #2
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eac:	4413      	add	r3, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6938      	ldr	r0, [r7, #16]
 8003eb2:	f7ff fe97 	bl	8003be4 <move_window>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d11d      	bne.n	8003ef8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	8992      	ldrh	r2, [r2, #12]
 8003eca:	fbb3 f0f2 	udiv	r0, r3, r2
 8003ece:	fb00 f202 	mul.w	r2, r0, r2
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff fbec 	bl	80036b4 <ld_dword>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003ee2:	617b      	str	r3, [r7, #20]
			break;
 8003ee4:	e009      	b.n	8003efa <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	e006      	b.n	8003efa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003eec:	bf00      	nop
 8003eee:	e004      	b.n	8003efa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ef0:	bf00      	nop
 8003ef2:	e002      	b.n	8003efa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003ef4:	bf00      	nop
 8003ef6:	e000      	b.n	8003efa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003ef8:	bf00      	nop
		}
	}

	return val;
 8003efa:	697b      	ldr	r3, [r7, #20]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b089      	sub	sp, #36	@ 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003f10:	2302      	movs	r3, #2
 8003f12:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	f240 8109 	bls.w	800412e <put_fat+0x22a>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	f080 8103 	bcs.w	800412e <put_fat+0x22a>
		switch (fs->fs_type) {
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	f000 80b6 	beq.w	800409e <put_fat+0x19a>
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	f300 80fb 	bgt.w	800412e <put_fat+0x22a>
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d003      	beq.n	8003f44 <put_fat+0x40>
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	f000 8083 	beq.w	8004048 <put_fat+0x144>
 8003f42:	e0f4      	b.n	800412e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4413      	add	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	899b      	ldrh	r3, [r3, #12]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f62:	4413      	add	r3, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f7ff fe3c 	bl	8003be4 <move_window>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f70:	7ffb      	ldrb	r3, [r7, #31]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 80d4 	bne.w	8004120 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	61ba      	str	r2, [r7, #24]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	8992      	ldrh	r2, [r2, #12]
 8003f88:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f8c:	fb00 f202 	mul.w	r2, r0, r2
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	440b      	add	r3, r1
 8003f94:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00d      	beq.n	8003fbc <put_fat+0xb8>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	b25b      	sxtb	r3, r3
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	b25a      	sxtb	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	b25b      	sxtb	r3, r3
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	b25b      	sxtb	r3, r3
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	e001      	b.n	8003fc0 <put_fat+0xbc>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	899b      	ldrh	r3, [r3, #12]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fda:	4413      	add	r3, r2
 8003fdc:	4619      	mov	r1, r3
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7ff fe00 	bl	8003be4 <move_window>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003fe8:	7ffb      	ldrb	r3, [r7, #31]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f040 809a 	bne.w	8004124 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	899b      	ldrh	r3, [r3, #12]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	fbb3 f0f2 	udiv	r0, r3, r2
 8004002:	fb00 f202 	mul.w	r2, r0, r2
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	440b      	add	r3, r1
 800400a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <put_fat+0x11a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	b2db      	uxtb	r3, r3
 800401c:	e00e      	b.n	800403c <put_fat+0x138>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	b25b      	sxtb	r3, r3
 8004024:	f023 030f 	bic.w	r3, r3, #15
 8004028:	b25a      	sxtb	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0a1b      	lsrs	r3, r3, #8
 800402e:	b25b      	sxtb	r3, r3
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	b25b      	sxtb	r3, r3
 8004036:	4313      	orrs	r3, r2
 8004038:	b25b      	sxtb	r3, r3
 800403a:	b2db      	uxtb	r3, r3
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	70da      	strb	r2, [r3, #3]
			break;
 8004046:	e072      	b.n	800412e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	899b      	ldrh	r3, [r3, #12]
 8004050:	085b      	lsrs	r3, r3, #1
 8004052:	b29b      	uxth	r3, r3
 8004054:	4619      	mov	r1, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	fbb3 f3f1 	udiv	r3, r3, r1
 800405c:	4413      	add	r3, r2
 800405e:	4619      	mov	r1, r3
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff fdbf 	bl	8003be4 <move_window>
 8004066:	4603      	mov	r3, r0
 8004068:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800406a:	7ffb      	ldrb	r3, [r7, #31]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d15b      	bne.n	8004128 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	8992      	ldrh	r2, [r2, #12]
 800407e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004082:	fb00 f202 	mul.w	r2, r0, r2
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	440b      	add	r3, r1
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	b292      	uxth	r2, r2
 800408e:	4611      	mov	r1, r2
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fb32 	bl	80036fa <st_word>
			fs->wflag = 1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	70da      	strb	r2, [r3, #3]
			break;
 800409c:	e047      	b.n	800412e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	899b      	ldrh	r3, [r3, #12]
 80040a6:	089b      	lsrs	r3, r3, #2
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	4619      	mov	r1, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80040b2:	4413      	add	r3, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7ff fd94 	bl	8003be4 <move_window>
 80040bc:	4603      	mov	r3, r0
 80040be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80040c0:	7ffb      	ldrb	r3, [r7, #31]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d132      	bne.n	800412c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	8992      	ldrh	r2, [r2, #12]
 80040da:	fbb3 f0f2 	udiv	r0, r3, r2
 80040de:	fb00 f202 	mul.w	r2, r0, r2
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	440b      	add	r3, r1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fae4 	bl	80036b4 <ld_dword>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80040f2:	4323      	orrs	r3, r4
 80040f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	8992      	ldrh	r2, [r2, #12]
 8004104:	fbb3 f0f2 	udiv	r0, r3, r2
 8004108:	fb00 f202 	mul.w	r2, r0, r2
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	440b      	add	r3, r1
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff fb0c 	bl	8003730 <st_dword>
			fs->wflag = 1;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	70da      	strb	r2, [r3, #3]
			break;
 800411e:	e006      	b.n	800412e <put_fat+0x22a>
			if (res != FR_OK) break;
 8004120:	bf00      	nop
 8004122:	e004      	b.n	800412e <put_fat+0x22a>
			if (res != FR_OK) break;
 8004124:	bf00      	nop
 8004126:	e002      	b.n	800412e <put_fat+0x22a>
			if (res != FR_OK) break;
 8004128:	bf00      	nop
 800412a:	e000      	b.n	800412e <put_fat+0x22a>
			if (res != FR_OK) break;
 800412c:	bf00      	nop
		}
	}
	return res;
 800412e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3724      	adds	r7, #36	@ 0x24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd90      	pop	{r4, r7, pc}

08004138 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d904      	bls.n	800415e <remove_chain+0x26>
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	429a      	cmp	r2, r3
 800415c:	d301      	bcc.n	8004162 <remove_chain+0x2a>
 800415e:	2302      	movs	r3, #2
 8004160:	e04b      	b.n	80041fa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00c      	beq.n	8004182 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004168:	f04f 32ff 	mov.w	r2, #4294967295
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	69b8      	ldr	r0, [r7, #24]
 8004170:	f7ff fec8 	bl	8003f04 <put_fat>
 8004174:	4603      	mov	r3, r0
 8004176:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004178:	7ffb      	ldrb	r3, [r7, #31]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <remove_chain+0x4a>
 800417e:	7ffb      	ldrb	r3, [r7, #31]
 8004180:	e03b      	b.n	80041fa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f7ff fdea 	bl	8003d5e <get_fat>
 800418a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d031      	beq.n	80041f6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <remove_chain+0x64>
 8004198:	2302      	movs	r3, #2
 800419a:	e02e      	b.n	80041fa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d101      	bne.n	80041a8 <remove_chain+0x70>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e028      	b.n	80041fa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80041a8:	2200      	movs	r2, #0
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	69b8      	ldr	r0, [r7, #24]
 80041ae:	f7ff fea9 	bl	8003f04 <put_fat>
 80041b2:	4603      	mov	r3, r0
 80041b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80041b6:	7ffb      	ldrb	r3, [r7, #31]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <remove_chain+0x88>
 80041bc:	7ffb      	ldrb	r3, [r7, #31]
 80041be:	e01c      	b.n	80041fa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	699a      	ldr	r2, [r3, #24]
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	3b02      	subs	r3, #2
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d20b      	bcs.n	80041e6 <remove_chain+0xae>
			fs->free_clst++;
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	791b      	ldrb	r3, [r3, #4]
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d3c6      	bcc.n	8004182 <remove_chain+0x4a>
 80041f4:	e000      	b.n	80041f8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80041f6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b088      	sub	sp, #32
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10d      	bne.n	8004234 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d004      	beq.n	800422e <create_chain+0x2c>
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	429a      	cmp	r2, r3
 800422c:	d31b      	bcc.n	8004266 <create_chain+0x64>
 800422e:	2301      	movs	r3, #1
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	e018      	b.n	8004266 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004234:	6839      	ldr	r1, [r7, #0]
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff fd91 	bl	8003d5e <get_fat>
 800423c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d801      	bhi.n	8004248 <create_chain+0x46>
 8004244:	2301      	movs	r3, #1
 8004246:	e070      	b.n	800432a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424e:	d101      	bne.n	8004254 <create_chain+0x52>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	e06a      	b.n	800432a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	429a      	cmp	r2, r3
 800425c:	d201      	bcs.n	8004262 <create_chain+0x60>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	e063      	b.n	800432a <create_chain+0x128>
		scl = clst;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3301      	adds	r3, #1
 800426e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	429a      	cmp	r2, r3
 8004278:	d307      	bcc.n	800428a <create_chain+0x88>
				ncl = 2;
 800427a:	2302      	movs	r3, #2
 800427c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	429a      	cmp	r2, r3
 8004284:	d901      	bls.n	800428a <create_chain+0x88>
 8004286:	2300      	movs	r3, #0
 8004288:	e04f      	b.n	800432a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800428a:	69f9      	ldr	r1, [r7, #28]
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff fd66 	bl	8003d5e <get_fat>
 8004292:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00e      	beq.n	80042b8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d003      	beq.n	80042a8 <create_chain+0xa6>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a6:	d101      	bne.n	80042ac <create_chain+0xaa>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	e03e      	b.n	800432a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d1da      	bne.n	800426a <create_chain+0x68>
 80042b4:	2300      	movs	r3, #0
 80042b6:	e038      	b.n	800432a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80042b8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80042ba:	f04f 32ff 	mov.w	r2, #4294967295
 80042be:	69f9      	ldr	r1, [r7, #28]
 80042c0:	6938      	ldr	r0, [r7, #16]
 80042c2:	f7ff fe1f 	bl	8003f04 <put_fat>
 80042c6:	4603      	mov	r3, r0
 80042c8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d109      	bne.n	80042e4 <create_chain+0xe2>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d006      	beq.n	80042e4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	6839      	ldr	r1, [r7, #0]
 80042da:	6938      	ldr	r0, [r7, #16]
 80042dc:	f7ff fe12 	bl	8003f04 <put_fat>
 80042e0:	4603      	mov	r3, r0
 80042e2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d116      	bne.n	8004318 <create_chain+0x116>
		fs->last_clst = ncl;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	3b02      	subs	r3, #2
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d804      	bhi.n	8004308 <create_chain+0x106>
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	1e5a      	subs	r2, r3, #1
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	791b      	ldrb	r3, [r3, #4]
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	b2da      	uxtb	r2, r3
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	711a      	strb	r2, [r3, #4]
 8004316:	e007      	b.n	8004328 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d102      	bne.n	8004324 <create_chain+0x122>
 800431e:	f04f 33ff 	mov.w	r3, #4294967295
 8004322:	e000      	b.n	8004326 <create_chain+0x124>
 8004324:	2301      	movs	r3, #1
 8004326:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004328:	69fb      	ldr	r3, [r7, #28]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004332:	b480      	push	{r7}
 8004334:	b087      	sub	sp, #28
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004346:	3304      	adds	r3, #4
 8004348:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	899b      	ldrh	r3, [r3, #12]
 800434e:	461a      	mov	r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	fbb3 f3f2 	udiv	r3, r3, r2
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	8952      	ldrh	r2, [r2, #10]
 800435a:	fbb3 f3f2 	udiv	r3, r3, r2
 800435e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1d1a      	adds	r2, r3, #4
 8004364:	613a      	str	r2, [r7, #16]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <clmt_clust+0x42>
 8004370:	2300      	movs	r3, #0
 8004372:	e010      	b.n	8004396 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	429a      	cmp	r2, r3
 800437a:	d307      	bcc.n	800438c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	3304      	adds	r3, #4
 8004388:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800438a:	e7e9      	b.n	8004360 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800438c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	4413      	add	r3, r2
}
 8004396:	4618      	mov	r0, r3
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043b8:	d204      	bcs.n	80043c4 <dir_sdi+0x22>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80043c4:	2302      	movs	r3, #2
 80043c6:	e071      	b.n	80044ac <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <dir_sdi+0x46>
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d902      	bls.n	80043e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10c      	bne.n	8004408 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	8912      	ldrh	r2, [r2, #8]
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d301      	bcc.n	80043fe <dir_sdi+0x5c>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e056      	b.n	80044ac <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	61da      	str	r2, [r3, #28]
 8004406:	e02d      	b.n	8004464 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	895b      	ldrh	r3, [r3, #10]
 800440c:	461a      	mov	r2, r3
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	899b      	ldrh	r3, [r3, #12]
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004418:	e019      	b.n	800444e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6979      	ldr	r1, [r7, #20]
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff fc9d 	bl	8003d5e <get_fat>
 8004424:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442c:	d101      	bne.n	8004432 <dir_sdi+0x90>
 800442e:	2301      	movs	r3, #1
 8004430:	e03c      	b.n	80044ac <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d904      	bls.n	8004442 <dir_sdi+0xa0>
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	429a      	cmp	r2, r3
 8004440:	d301      	bcc.n	8004446 <dir_sdi+0xa4>
 8004442:	2302      	movs	r3, #2
 8004444:	e032      	b.n	80044ac <dir_sdi+0x10a>
			ofs -= csz;
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	429a      	cmp	r2, r3
 8004454:	d2e1      	bcs.n	800441a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004456:	6979      	ldr	r1, [r7, #20]
 8004458:	6938      	ldr	r0, [r7, #16]
 800445a:	f7ff fc61 	bl	8003d20 <clust2sect>
 800445e:	4602      	mov	r2, r0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <dir_sdi+0xd4>
 8004472:	2302      	movs	r3, #2
 8004474:	e01a      	b.n	80044ac <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69da      	ldr	r2, [r3, #28]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	899b      	ldrh	r3, [r3, #12]
 800447e:	4619      	mov	r1, r3
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	fbb3 f3f1 	udiv	r3, r3, r1
 8004486:	441a      	add	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	899b      	ldrh	r3, [r3, #12]
 8004496:	461a      	mov	r2, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	fbb3 f0f2 	udiv	r0, r3, r2
 800449e:	fb00 f202 	mul.w	r2, r0, r2
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	18ca      	adds	r2, r1, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	3320      	adds	r3, #32
 80044ca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <dir_next+0x28>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044da:	d301      	bcc.n	80044e0 <dir_next+0x2c>
 80044dc:	2304      	movs	r3, #4
 80044de:	e0bb      	b.n	8004658 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	899b      	ldrh	r3, [r3, #12]
 80044e4:	461a      	mov	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80044ec:	fb01 f202 	mul.w	r2, r1, r2
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f040 809d 	bne.w	8004632 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	8912      	ldrh	r2, [r2, #8]
 8004512:	4293      	cmp	r3, r2
 8004514:	f0c0 808d 	bcc.w	8004632 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	61da      	str	r2, [r3, #28]
 800451e:	2304      	movs	r3, #4
 8004520:	e09a      	b.n	8004658 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	899b      	ldrh	r3, [r3, #12]
 8004526:	461a      	mov	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	fbb3 f3f2 	udiv	r3, r3, r2
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	8952      	ldrh	r2, [r2, #10]
 8004532:	3a01      	subs	r2, #1
 8004534:	4013      	ands	r3, r2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d17b      	bne.n	8004632 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f7ff fc0b 	bl	8003d5e <get_fat>
 8004548:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d801      	bhi.n	8004554 <dir_next+0xa0>
 8004550:	2302      	movs	r3, #2
 8004552:	e081      	b.n	8004658 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d101      	bne.n	8004560 <dir_next+0xac>
 800455c:	2301      	movs	r3, #1
 800455e:	e07b      	b.n	8004658 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	429a      	cmp	r2, r3
 8004568:	d359      	bcc.n	800461e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d104      	bne.n	800457a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	61da      	str	r2, [r3, #28]
 8004576:	2304      	movs	r3, #4
 8004578:	e06e      	b.n	8004658 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f7ff fe3d 	bl	8004202 <create_chain>
 8004588:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <dir_next+0xe0>
 8004590:	2307      	movs	r3, #7
 8004592:	e061      	b.n	8004658 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <dir_next+0xea>
 800459a:	2302      	movs	r3, #2
 800459c:	e05c      	b.n	8004658 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d101      	bne.n	80045aa <dir_next+0xf6>
 80045a6:	2301      	movs	r3, #1
 80045a8:	e056      	b.n	8004658 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f7ff fad6 	bl	8003b5c <sync_window>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <dir_next+0x106>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e04e      	b.n	8004658 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	899b      	ldrh	r3, [r3, #12]
 80045c4:	461a      	mov	r2, r3
 80045c6:	2100      	movs	r1, #0
 80045c8:	f7ff f8ff 	bl	80037ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	6979      	ldr	r1, [r7, #20]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f7ff fba4 	bl	8003d20 <clust2sect>
 80045d8:	4602      	mov	r2, r0
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80045de:	e012      	b.n	8004606 <dir_next+0x152>
						fs->wflag = 1;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7ff fab8 	bl	8003b5c <sync_window>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <dir_next+0x142>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e030      	b.n	8004658 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	3301      	adds	r3, #1
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	635a      	str	r2, [r3, #52]	@ 0x34
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	895b      	ldrh	r3, [r3, #10]
 800460a:	461a      	mov	r2, r3
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4293      	cmp	r3, r2
 8004610:	d3e6      	bcc.n	80045e0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad2      	subs	r2, r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004624:	6979      	ldr	r1, [r7, #20]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff fb7a 	bl	8003d20 <clust2sect>
 800462c:	4602      	mov	r2, r0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	899b      	ldrh	r3, [r3, #12]
 8004642:	461a      	mov	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	fbb3 f0f2 	udiv	r0, r3, r2
 800464a:	fb00 f202 	mul.w	r2, r0, r2
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	18ca      	adds	r2, r1, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004670:	2100      	movs	r1, #0
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff fe95 	bl	80043a2 <dir_sdi>
 8004678:	4603      	mov	r3, r0
 800467a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d12b      	bne.n	80046da <dir_alloc+0x7a>
		n = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	4619      	mov	r1, r3
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f7ff faa9 	bl	8003be4 <move_window>
 8004692:	4603      	mov	r3, r0
 8004694:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d11d      	bne.n	80046d8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2be5      	cmp	r3, #229	@ 0xe5
 80046a4:	d004      	beq.n	80046b0 <dir_alloc+0x50>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d107      	bne.n	80046c0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	3301      	adds	r3, #1
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d102      	bne.n	80046c4 <dir_alloc+0x64>
 80046be:	e00c      	b.n	80046da <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80046c4:	2101      	movs	r1, #1
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff fef4 	bl	80044b4 <dir_next>
 80046cc:	4603      	mov	r3, r0
 80046ce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0d7      	beq.n	8004686 <dir_alloc+0x26>
 80046d6:	e000      	b.n	80046da <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80046d8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80046da:	7dfb      	ldrb	r3, [r7, #23]
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d101      	bne.n	80046e4 <dir_alloc+0x84>
 80046e0:	2307      	movs	r3, #7
 80046e2:	75fb      	strb	r3, [r7, #23]
	return res;
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	331a      	adds	r3, #26
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fe ffc1 	bl	8003684 <ld_word>
 8004702:	4603      	mov	r3, r0
 8004704:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b03      	cmp	r3, #3
 800470c:	d109      	bne.n	8004722 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	3314      	adds	r3, #20
 8004712:	4618      	mov	r0, r3
 8004714:	f7fe ffb6 	bl	8003684 <ld_word>
 8004718:	4603      	mov	r3, r0
 800471a:	041b      	lsls	r3, r3, #16
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004722:	68fb      	ldr	r3, [r7, #12]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	331a      	adds	r3, #26
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	b292      	uxth	r2, r2
 8004740:	4611      	mov	r1, r2
 8004742:	4618      	mov	r0, r3
 8004744:	f7fe ffd9 	bl	80036fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d109      	bne.n	8004764 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f103 0214 	add.w	r2, r3, #20
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	b29b      	uxth	r3, r3
 800475c:	4619      	mov	r1, r3
 800475e:	4610      	mov	r0, r2
 8004760:	f7fe ffcb 	bl	80036fa <st_word>
	}
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	331a      	adds	r3, #26
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe ff82 	bl	8003684 <ld_word>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <cmp_lfn+0x1e>
 8004786:	2300      	movs	r3, #0
 8004788:	e059      	b.n	800483e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004792:	1e5a      	subs	r2, r3, #1
 8004794:	4613      	mov	r3, r2
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80047a0:	2301      	movs	r3, #1
 80047a2:	81fb      	strh	r3, [r7, #14]
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	e033      	b.n	8004812 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80047aa:	4a27      	ldr	r2, [pc, #156]	@ (8004848 <cmp_lfn+0xdc>)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4413      	add	r3, r2
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4413      	add	r3, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fe ff63 	bl	8003684 <ld_word>
 80047be:	4603      	mov	r3, r0
 80047c0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80047c2:	89fb      	ldrh	r3, [r7, #14]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01a      	beq.n	80047fe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80047cc:	d812      	bhi.n	80047f4 <cmp_lfn+0x88>
 80047ce:	89bb      	ldrh	r3, [r7, #12]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f002 f85f 	bl	8006894 <ff_wtoupper>
 80047d6:	4603      	mov	r3, r0
 80047d8:	461c      	mov	r4, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	617a      	str	r2, [r7, #20]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	4413      	add	r3, r2
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f002 f853 	bl	8006894 <ff_wtoupper>
 80047ee:	4603      	mov	r3, r0
 80047f0:	429c      	cmp	r4, r3
 80047f2:	d001      	beq.n	80047f8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80047f4:	2300      	movs	r3, #0
 80047f6:	e022      	b.n	800483e <cmp_lfn+0xd2>
			}
			wc = uc;
 80047f8:	89bb      	ldrh	r3, [r7, #12]
 80047fa:	81fb      	strh	r3, [r7, #14]
 80047fc:	e006      	b.n	800480c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80047fe:	89bb      	ldrh	r3, [r7, #12]
 8004800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004804:	4293      	cmp	r3, r2
 8004806:	d001      	beq.n	800480c <cmp_lfn+0xa0>
 8004808:	2300      	movs	r3, #0
 800480a:	e018      	b.n	800483e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	3301      	adds	r3, #1
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b0c      	cmp	r3, #12
 8004816:	d9c8      	bls.n	80047aa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <cmp_lfn+0xd0>
 8004824:	89fb      	ldrh	r3, [r7, #14]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <cmp_lfn+0xd0>
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <cmp_lfn+0xd0>
 8004838:	2300      	movs	r3, #0
 800483a:	e000      	b.n	800483e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800483c:	2301      	movs	r3, #1
}
 800483e:	4618      	mov	r0, r3
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	bd90      	pop	{r4, r7, pc}
 8004846:	bf00      	nop
 8004848:	08007f04 	.word	0x08007f04

0800484c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	4611      	mov	r1, r2
 8004858:	461a      	mov	r2, r3
 800485a:	460b      	mov	r3, r1
 800485c:	71fb      	strb	r3, [r7, #7]
 800485e:	4613      	mov	r3, r2
 8004860:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	330d      	adds	r3, #13
 8004866:	79ba      	ldrb	r2, [r7, #6]
 8004868:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	330b      	adds	r3, #11
 800486e:	220f      	movs	r2, #15
 8004870:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	330c      	adds	r3, #12
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	331a      	adds	r3, #26
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe ff3a 	bl	80036fa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	1e5a      	subs	r2, r3, #1
 800488a:	4613      	mov	r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	82fb      	strh	r3, [r7, #22]
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800489e:	8afb      	ldrh	r3, [r7, #22]
 80048a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d007      	beq.n	80048b8 <put_lfn+0x6c>
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	61fa      	str	r2, [r7, #28]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80048b8:	4a17      	ldr	r2, [pc, #92]	@ (8004918 <put_lfn+0xcc>)
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	4413      	add	r3, r2
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4413      	add	r3, r2
 80048c6:	8afa      	ldrh	r2, [r7, #22]
 80048c8:	4611      	mov	r1, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe ff15 	bl	80036fa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80048d0:	8afb      	ldrh	r3, [r7, #22]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d102      	bne.n	80048dc <put_lfn+0x90>
 80048d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048da:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	3301      	adds	r3, #1
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b0c      	cmp	r3, #12
 80048e6:	d9da      	bls.n	800489e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80048e8:	8afb      	ldrh	r3, [r7, #22]
 80048ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d006      	beq.n	8004900 <put_lfn+0xb4>
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d103      	bne.n	8004908 <put_lfn+0xbc>
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004906:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	79fa      	ldrb	r2, [r7, #7]
 800490c:	701a      	strb	r2, [r3, #0]
}
 800490e:	bf00      	nop
 8004910:	3720      	adds	r7, #32
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	08007f04 	.word	0x08007f04

0800491c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08c      	sub	sp, #48	@ 0x30
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800492a:	220b      	movs	r2, #11
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7fe ff2a 	bl	8003788 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b05      	cmp	r3, #5
 8004938:	d92b      	bls.n	8004992 <gen_numname+0x76>
		sr = seq;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800493e:	e022      	b.n	8004986 <gen_numname+0x6a>
			wc = *lfn++;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	1c9a      	adds	r2, r3, #2
 8004944:	607a      	str	r2, [r7, #4]
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800494a:	2300      	movs	r3, #0
 800494c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800494e:	e017      	b.n	8004980 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	005a      	lsls	r2, r3, #1
 8004954:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	4413      	add	r3, r2
 800495c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800495e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d005      	beq.n	800497a <gen_numname+0x5e>
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8004974:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8004978:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800497a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497c:	3301      	adds	r3, #1
 800497e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004982:	2b0f      	cmp	r3, #15
 8004984:	d9e4      	bls.n	8004950 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1d8      	bne.n	8004940 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004992:	2307      	movs	r3, #7
 8004994:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	3330      	adds	r3, #48	@ 0x30
 80049a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80049a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80049aa:	2b39      	cmp	r3, #57	@ 0x39
 80049ac:	d904      	bls.n	80049b8 <gen_numname+0x9c>
 80049ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80049b2:	3307      	adds	r3, #7
 80049b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80049b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ba:	1e5a      	subs	r2, r3, #1
 80049bc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80049be:	3330      	adds	r3, #48	@ 0x30
 80049c0:	443b      	add	r3, r7
 80049c2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80049c6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	603b      	str	r3, [r7, #0]
	} while (seq);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1df      	bne.n	8004996 <gen_numname+0x7a>
	ns[i] = '~';
 80049d6:	f107 0214 	add.w	r2, r7, #20
 80049da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049dc:	4413      	add	r3, r2
 80049de:	227e      	movs	r2, #126	@ 0x7e
 80049e0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80049e2:	2300      	movs	r3, #0
 80049e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e6:	e002      	b.n	80049ee <gen_numname+0xd2>
 80049e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ea:	3301      	adds	r3, #1
 80049ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d205      	bcs.n	8004a02 <gen_numname+0xe6>
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fa:	4413      	add	r3, r2
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d1f2      	bne.n	80049e8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a04:	2b07      	cmp	r3, #7
 8004a06:	d807      	bhi.n	8004a18 <gen_numname+0xfc>
 8004a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a0e:	3330      	adds	r3, #48	@ 0x30
 8004a10:	443b      	add	r3, r7
 8004a12:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004a16:	e000      	b.n	8004a1a <gen_numname+0xfe>
 8004a18:	2120      	movs	r1, #32
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	460a      	mov	r2, r1
 8004a26:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	2b07      	cmp	r3, #7
 8004a2c:	d9e9      	bls.n	8004a02 <gen_numname+0xe6>
}
 8004a2e:	bf00      	nop
 8004a30:	bf00      	nop
 8004a32:	3730      	adds	r7, #48	@ 0x30
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004a44:	230b      	movs	r3, #11
 8004a46:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	0852      	lsrs	r2, r2, #1
 8004a4e:	01db      	lsls	r3, r3, #7
 8004a50:	4313      	orrs	r3, r2
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	1c59      	adds	r1, r3, #1
 8004a58:	6079      	str	r1, [r7, #4]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1ed      	bne.n	8004a48 <sum_sfn+0x10>
	return sum;
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b086      	sub	sp, #24
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004a88:	2100      	movs	r1, #0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fc89 	bl	80043a2 <dir_sdi>
 8004a90:	4603      	mov	r3, r0
 8004a92:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <dir_find+0x24>
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
 8004a9c:	e0a9      	b.n	8004bf2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004a9e:	23ff      	movs	r3, #255	@ 0xff
 8004aa0:	753b      	strb	r3, [r7, #20]
 8004aa2:	7d3b      	ldrb	r3, [r7, #20]
 8004aa4:	757b      	strb	r3, [r7, #21]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004aac:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6938      	ldr	r0, [r7, #16]
 8004ab6:	f7ff f895 	bl	8003be4 <move_window>
 8004aba:	4603      	mov	r3, r0
 8004abc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004abe:	7dfb      	ldrb	r3, [r7, #23]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f040 8090 	bne.w	8004be6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004ace:	7dbb      	ldrb	r3, [r7, #22]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <dir_find+0x60>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	75fb      	strb	r3, [r7, #23]
 8004ad8:	e08a      	b.n	8004bf0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	330b      	adds	r3, #11
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ae6:	73fb      	strb	r3, [r7, #15]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	7bfa      	ldrb	r2, [r7, #15]
 8004aec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004aee:	7dbb      	ldrb	r3, [r7, #22]
 8004af0:	2be5      	cmp	r3, #229	@ 0xe5
 8004af2:	d007      	beq.n	8004b04 <dir_find+0x8a>
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <dir_find+0x98>
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b0f      	cmp	r3, #15
 8004b02:	d006      	beq.n	8004b12 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004b04:	23ff      	movs	r3, #255	@ 0xff
 8004b06:	757b      	strb	r3, [r7, #21]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b10:	e05e      	b.n	8004bd0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	2b0f      	cmp	r3, #15
 8004b16:	d136      	bne.n	8004b86 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d154      	bne.n	8004bd0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004b26:	7dbb      	ldrb	r3, [r7, #22]
 8004b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	7b5b      	ldrb	r3, [r3, #13]
 8004b36:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004b38:	7dbb      	ldrb	r3, [r7, #22]
 8004b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b3e:	75bb      	strb	r3, [r7, #22]
 8004b40:	7dbb      	ldrb	r3, [r7, #22]
 8004b42:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004b4c:	7dba      	ldrb	r2, [r7, #22]
 8004b4e:	7d7b      	ldrb	r3, [r7, #21]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d115      	bne.n	8004b80 <dir_find+0x106>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	330d      	adds	r3, #13
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	7d3a      	ldrb	r2, [r7, #20]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d10e      	bne.n	8004b80 <dir_find+0x106>
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	f7ff fdfd 	bl	800476c <cmp_lfn>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <dir_find+0x106>
 8004b78:	7d7b      	ldrb	r3, [r7, #21]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e000      	b.n	8004b82 <dir_find+0x108>
 8004b80:	23ff      	movs	r3, #255	@ 0xff
 8004b82:	757b      	strb	r3, [r7, #21]
 8004b84:	e024      	b.n	8004bd0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004b86:	7d7b      	ldrb	r3, [r7, #21]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d109      	bne.n	8004ba0 <dir_find+0x126>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff ff51 	bl	8004a38 <sum_sfn>
 8004b96:	4603      	mov	r3, r0
 8004b98:	461a      	mov	r2, r3
 8004b9a:	7d3b      	ldrb	r3, [r7, #20]
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d024      	beq.n	8004bea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <dir_find+0x14a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a18      	ldr	r0, [r3, #32]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3324      	adds	r3, #36	@ 0x24
 8004bb6:	220b      	movs	r2, #11
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f7fe fe21 	bl	8003800 <mem_cmp>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d014      	beq.n	8004bee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004bc4:	23ff      	movs	r3, #255	@ 0xff
 8004bc6:	757b      	strb	r3, [r7, #21]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f04f 32ff 	mov.w	r2, #4294967295
 8004bce:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff fc6e 	bl	80044b4 <dir_next>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f43f af65 	beq.w	8004aae <dir_find+0x34>
 8004be4:	e004      	b.n	8004bf0 <dir_find+0x176>
		if (res != FR_OK) break;
 8004be6:	bf00      	nop
 8004be8:	e002      	b.n	8004bf0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004bea:	bf00      	nop
 8004bec:	e000      	b.n	8004bf0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004bee:	bf00      	nop

	return res;
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08c      	sub	sp, #48	@ 0x30
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004c10:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <dir_register+0x20>
 8004c18:	2306      	movs	r3, #6
 8004c1a:	e0e0      	b.n	8004dde <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c20:	e002      	b.n	8004c28 <dir_register+0x2c>
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	3301      	adds	r3, #1
 8004c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1f4      	bne.n	8004c22 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8004c3e:	f107 030c 	add.w	r3, r7, #12
 8004c42:	220c      	movs	r2, #12
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fe fd9f 	bl	8003788 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d032      	beq.n	8004cba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2240      	movs	r2, #64	@ 0x40
 8004c58:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c60:	e016      	b.n	8004c90 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	f107 010c 	add.w	r1, r7, #12
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	f7ff fe53 	bl	800491c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff feff 	bl	8004a7a <dir_find>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8004c82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c92:	2b63      	cmp	r3, #99	@ 0x63
 8004c94:	d9e5      	bls.n	8004c62 <dir_register+0x66>
 8004c96:	e000      	b.n	8004c9a <dir_register+0x9e>
			if (res != FR_OK) break;
 8004c98:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	2b64      	cmp	r3, #100	@ 0x64
 8004c9e:	d101      	bne.n	8004ca4 <dir_register+0xa8>
 8004ca0:	2307      	movs	r3, #7
 8004ca2:	e09c      	b.n	8004dde <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d002      	beq.n	8004cb2 <dir_register+0xb6>
 8004cac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004cb0:	e095      	b.n	8004dde <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004cb2:	7dfa      	ldrb	r2, [r7, #23]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004cba:	7dfb      	ldrb	r3, [r7, #23]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <dir_register+0xd8>
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	4a47      	ldr	r2, [pc, #284]	@ (8004de8 <dir_register+0x1ec>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	089b      	lsrs	r3, r3, #2
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <dir_register+0xda>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004cd8:	6a39      	ldr	r1, [r7, #32]
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fcc0 	bl	8004660 <dir_alloc>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d148      	bne.n	8004d80 <dir_register+0x184>
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	623b      	str	r3, [r7, #32]
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d042      	beq.n	8004d80 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	015b      	lsls	r3, r3, #5
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	4619      	mov	r1, r3
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fb4b 	bl	80043a2 <dir_sdi>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004d12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d132      	bne.n	8004d80 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3324      	adds	r3, #36	@ 0x24
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fe8a 	bl	8004a38 <sum_sfn>
 8004d24:	4603      	mov	r3, r0
 8004d26:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	69f8      	ldr	r0, [r7, #28]
 8004d30:	f7fe ff58 	bl	8003be4 <move_window>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8004d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d11d      	bne.n	8004d7e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	6918      	ldr	r0, [r3, #16]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a19      	ldr	r1, [r3, #32]
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	7efb      	ldrb	r3, [r7, #27]
 8004d50:	f7ff fd7c 	bl	800484c <put_lfn>
				fs->wflag = 1;
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	2201      	movs	r2, #1
 8004d58:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff fba9 	bl	80044b4 <dir_next>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8004d68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d107      	bne.n	8004d80 <dir_register+0x184>
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	623b      	str	r3, [r7, #32]
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1d5      	bne.n	8004d28 <dir_register+0x12c>
 8004d7c:	e000      	b.n	8004d80 <dir_register+0x184>
				if (res != FR_OK) break;
 8004d7e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004d80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d128      	bne.n	8004dda <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	69f8      	ldr	r0, [r7, #28]
 8004d90:	f7fe ff28 	bl	8003be4 <move_window>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004d9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d11b      	bne.n	8004dda <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	2220      	movs	r2, #32
 8004da8:	2100      	movs	r1, #0
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fe fd0d 	bl	80037ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a18      	ldr	r0, [r3, #32]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3324      	adds	r3, #36	@ 0x24
 8004db8:	220b      	movs	r2, #11
 8004dba:	4619      	mov	r1, r3
 8004dbc:	f7fe fce4 	bl	8003788 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	f002 0218 	and.w	r2, r2, #24
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004dda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3730      	adds	r7, #48	@ 0x30
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	4ec4ec4f 	.word	0x4ec4ec4f

08004dec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	@ 0x28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	2300      	movs	r3, #0
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	61ba      	str	r2, [r7, #24]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4413      	add	r3, r2
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004e1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e1c:	2b1f      	cmp	r3, #31
 8004e1e:	d940      	bls.n	8004ea2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004e20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e22:	2b2f      	cmp	r3, #47	@ 0x2f
 8004e24:	d006      	beq.n	8004e34 <create_name+0x48>
 8004e26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e28:	2b5c      	cmp	r3, #92	@ 0x5c
 8004e2a:	d110      	bne.n	8004e4e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004e2c:	e002      	b.n	8004e34 <create_name+0x48>
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	3301      	adds	r3, #1
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	4413      	add	r3, r2
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8004e3e:	d0f6      	beq.n	8004e2e <create_name+0x42>
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	4413      	add	r3, r2
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b5c      	cmp	r3, #92	@ 0x5c
 8004e4a:	d0f0      	beq.n	8004e2e <create_name+0x42>
			break;
 8004e4c:	e02a      	b.n	8004ea4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2bfe      	cmp	r3, #254	@ 0xfe
 8004e52:	d901      	bls.n	8004e58 <create_name+0x6c>
 8004e54:	2306      	movs	r3, #6
 8004e56:	e17d      	b.n	8005154 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004e58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004e5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e60:	2101      	movs	r1, #1
 8004e62:	4618      	mov	r0, r3
 8004e64:	f001 fcda 	bl	800681c <ff_convert>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004e6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <create_name+0x8a>
 8004e72:	2306      	movs	r3, #6
 8004e74:	e16e      	b.n	8005154 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004e76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e78:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e7a:	d809      	bhi.n	8004e90 <create_name+0xa4>
 8004e7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e7e:	4619      	mov	r1, r3
 8004e80:	488d      	ldr	r0, [pc, #564]	@ (80050b8 <create_name+0x2cc>)
 8004e82:	f7fe fce4 	bl	800384e <chk_chr>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <create_name+0xa4>
 8004e8c:	2306      	movs	r3, #6
 8004e8e:	e161      	b.n	8005154 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	617a      	str	r2, [r7, #20]
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e9e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004ea0:	e7b4      	b.n	8004e0c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8004ea2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	441a      	add	r2, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004eae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004eb0:	2b1f      	cmp	r3, #31
 8004eb2:	d801      	bhi.n	8004eb8 <create_name+0xcc>
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	e000      	b.n	8004eba <create_name+0xce>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004ebe:	e011      	b.n	8004ee4 <create_name+0xf8>
		w = lfn[di - 1];
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4413      	add	r3, r2
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8004ed2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d002      	beq.n	8004ede <create_name+0xf2>
 8004ed8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004eda:	2b2e      	cmp	r3, #46	@ 0x2e
 8004edc:	d106      	bne.n	8004eec <create_name+0x100>
		di--;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1ea      	bne.n	8004ec0 <create_name+0xd4>
 8004eea:	e000      	b.n	8004eee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8004eec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <create_name+0x118>
 8004f00:	2306      	movs	r3, #6
 8004f02:	e127      	b.n	8005154 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3324      	adds	r3, #36	@ 0x24
 8004f08:	220b      	movs	r2, #11
 8004f0a:	2120      	movs	r1, #32
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fe fc5c 	bl	80037ca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004f12:	2300      	movs	r3, #0
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e002      	b.n	8004f1e <create_name+0x132>
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4413      	add	r3, r2
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d0f5      	beq.n	8004f18 <create_name+0x12c>
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f38:	d0ee      	beq.n	8004f18 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d009      	beq.n	8004f54 <create_name+0x168>
 8004f40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f44:	f043 0303 	orr.w	r3, r3, #3
 8004f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004f4c:	e002      	b.n	8004f54 <create_name+0x168>
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <create_name+0x182>
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004f60:	3b01      	subs	r3, #1
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f6c:	d1ef      	bne.n	8004f4e <create_name+0x162>

	i = b = 0; ni = 8;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004f74:	2300      	movs	r3, #0
 8004f76:	623b      	str	r3, [r7, #32]
 8004f78:	2308      	movs	r3, #8
 8004f7a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	61ba      	str	r2, [r7, #24]
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004f8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 8090 	beq.w	80050b4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004f94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d006      	beq.n	8004fa8 <create_name+0x1bc>
 8004f9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f9e:	d10a      	bne.n	8004fb6 <create_name+0x1ca>
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d006      	beq.n	8004fb6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fac:	f043 0303 	orr.w	r3, r3, #3
 8004fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004fb4:	e07d      	b.n	80050b2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004fb6:	6a3a      	ldr	r2, [r7, #32]
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d203      	bcs.n	8004fc6 <create_name+0x1da>
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d123      	bne.n	800500e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	2b0b      	cmp	r3, #11
 8004fca:	d106      	bne.n	8004fda <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fd0:	f043 0303 	orr.w	r3, r3, #3
 8004fd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004fd8:	e075      	b.n	80050c6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d005      	beq.n	8004fee <create_name+0x202>
 8004fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fe6:	f043 0303 	orr.w	r3, r3, #3
 8004fea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d866      	bhi.n	80050c4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	2308      	movs	r3, #8
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	230b      	movs	r3, #11
 8005000:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005002:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800500c:	e051      	b.n	80050b2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800500e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005010:	2b7f      	cmp	r3, #127	@ 0x7f
 8005012:	d914      	bls.n	800503e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005014:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005016:	2100      	movs	r1, #0
 8005018:	4618      	mov	r0, r3
 800501a:	f001 fbff 	bl	800681c <ff_convert>
 800501e:	4603      	mov	r3, r0
 8005020:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005022:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	d004      	beq.n	8005032 <create_name+0x246>
 8005028:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800502a:	3b80      	subs	r3, #128	@ 0x80
 800502c:	4a23      	ldr	r2, [pc, #140]	@ (80050bc <create_name+0x2d0>)
 800502e:	5cd3      	ldrb	r3, [r2, r3]
 8005030:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005032:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005036:	f043 0302 	orr.w	r3, r3, #2
 800503a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800503e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <create_name+0x268>
 8005044:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005046:	4619      	mov	r1, r3
 8005048:	481d      	ldr	r0, [pc, #116]	@ (80050c0 <create_name+0x2d4>)
 800504a:	f7fe fc00 	bl	800384e <chk_chr>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005054:	235f      	movs	r3, #95	@ 0x5f
 8005056:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800505c:	f043 0303 	orr.w	r3, r3, #3
 8005060:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005064:	e01b      	b.n	800509e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005066:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005068:	2b40      	cmp	r3, #64	@ 0x40
 800506a:	d909      	bls.n	8005080 <create_name+0x294>
 800506c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800506e:	2b5a      	cmp	r3, #90	@ 0x5a
 8005070:	d806      	bhi.n	8005080 <create_name+0x294>
					b |= 2;
 8005072:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005076:	f043 0302 	orr.w	r3, r3, #2
 800507a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800507e:	e00e      	b.n	800509e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005080:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005082:	2b60      	cmp	r3, #96	@ 0x60
 8005084:	d90b      	bls.n	800509e <create_name+0x2b2>
 8005086:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005088:	2b7a      	cmp	r3, #122	@ 0x7a
 800508a:	d808      	bhi.n	800509e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800508c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005098:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800509a:	3b20      	subs	r3, #32
 800509c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	623a      	str	r2, [r7, #32]
 80050a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80050a6:	b2d1      	uxtb	r1, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	4413      	add	r3, r2
 80050ac:	460a      	mov	r2, r1
 80050ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80050b2:	e763      	b.n	8004f7c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80050b4:	bf00      	nop
 80050b6:	e006      	b.n	80050c6 <create_name+0x2da>
 80050b8:	08007e2c 	.word	0x08007e2c
 80050bc:	08007e84 	.word	0x08007e84
 80050c0:	08007e38 	.word	0x08007e38
			if (si > di) break;			/* No extension */
 80050c4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80050cc:	2be5      	cmp	r3, #229	@ 0xe5
 80050ce:	d103      	bne.n	80050d8 <create_name+0x2ec>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2205      	movs	r2, #5
 80050d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d104      	bne.n	80050e8 <create_name+0x2fc>
 80050de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80050e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80050ec:	f003 030c 	and.w	r3, r3, #12
 80050f0:	2b0c      	cmp	r3, #12
 80050f2:	d005      	beq.n	8005100 <create_name+0x314>
 80050f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d105      	bne.n	800510c <create_name+0x320>
 8005100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005104:	f043 0302 	orr.w	r3, r3, #2
 8005108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800510c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d117      	bne.n	8005148 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005118:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	2b01      	cmp	r3, #1
 8005122:	d105      	bne.n	8005130 <create_name+0x344>
 8005124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005128:	f043 0310 	orr.w	r3, r3, #16
 800512c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005130:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005134:	f003 030c 	and.w	r3, r3, #12
 8005138:	2b04      	cmp	r3, #4
 800513a:	d105      	bne.n	8005148 <create_name+0x35c>
 800513c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005140:	f043 0308 	orr.w	r3, r3, #8
 8005144:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800514e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8005152:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005154:	4618      	mov	r0, r3
 8005156:	3728      	adds	r7, #40	@ 0x28
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005170:	e002      	b.n	8005178 <follow_path+0x1c>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b2f      	cmp	r3, #47	@ 0x2f
 800517e:	d0f8      	beq.n	8005172 <follow_path+0x16>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b5c      	cmp	r3, #92	@ 0x5c
 8005186:	d0f4      	beq.n	8005172 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2200      	movs	r2, #0
 800518c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b1f      	cmp	r3, #31
 8005194:	d80a      	bhi.n	80051ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2280      	movs	r2, #128	@ 0x80
 800519a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800519e:	2100      	movs	r1, #0
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff f8fe 	bl	80043a2 <dir_sdi>
 80051a6:	4603      	mov	r3, r0
 80051a8:	75fb      	strb	r3, [r7, #23]
 80051aa:	e048      	b.n	800523e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80051ac:	463b      	mov	r3, r7
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff fe1b 	bl	8004dec <create_name>
 80051b6:	4603      	mov	r3, r0
 80051b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d139      	bne.n	8005234 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff fc5a 	bl	8004a7a <dir_find>
 80051c6:	4603      	mov	r3, r0
 80051c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80051d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d12c      	bne.n	8005238 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80051de:	7afb      	ldrb	r3, [r7, #11]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d127      	bne.n	8005238 <follow_path+0xdc>
 80051e8:	2305      	movs	r3, #5
 80051ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80051ec:	e024      	b.n	8005238 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80051ee:	7afb      	ldrb	r3, [r7, #11]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d121      	bne.n	800523c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	799b      	ldrb	r3, [r3, #6]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	d102      	bne.n	800520a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005204:	2305      	movs	r3, #5
 8005206:	75fb      	strb	r3, [r7, #23]
 8005208:	e019      	b.n	800523e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	8992      	ldrh	r2, [r2, #12]
 8005218:	fbb3 f0f2 	udiv	r0, r3, r2
 800521c:	fb00 f202 	mul.w	r2, r0, r2
 8005220:	1a9b      	subs	r3, r3, r2
 8005222:	440b      	add	r3, r1
 8005224:	4619      	mov	r1, r3
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f7ff fa61 	bl	80046ee <ld_clust>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005232:	e7bb      	b.n	80051ac <follow_path+0x50>
			if (res != FR_OK) break;
 8005234:	bf00      	nop
 8005236:	e002      	b.n	800523e <follow_path+0xe2>
				break;
 8005238:	bf00      	nop
 800523a:	e000      	b.n	800523e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800523c:	bf00      	nop
			}
		}
	}

	return res;
 800523e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005250:	f04f 33ff 	mov.w	r3, #4294967295
 8005254:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d031      	beq.n	80052c2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	e002      	b.n	800526c <get_ldnumber+0x24>
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	3301      	adds	r3, #1
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b1f      	cmp	r3, #31
 8005272:	d903      	bls.n	800527c <get_ldnumber+0x34>
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b3a      	cmp	r3, #58	@ 0x3a
 800527a:	d1f4      	bne.n	8005266 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b3a      	cmp	r3, #58	@ 0x3a
 8005282:	d11c      	bne.n	80052be <get_ldnumber+0x76>
			tp = *path;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	60fa      	str	r2, [r7, #12]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	3b30      	subs	r3, #48	@ 0x30
 8005294:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b09      	cmp	r3, #9
 800529a:	d80e      	bhi.n	80052ba <get_ldnumber+0x72>
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d10a      	bne.n	80052ba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d107      	bne.n	80052ba <get_ldnumber+0x72>
					vol = (int)i;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	3301      	adds	r3, #1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	e002      	b.n	80052c4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80052be:	2300      	movs	r3, #0
 80052c0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80052c2:	693b      	ldr	r3, [r7, #16]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	70da      	strb	r2, [r3, #3]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f04f 32ff 	mov.w	r2, #4294967295
 80052e6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fe fc7a 	bl	8003be4 <move_window>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <check_fs+0x2a>
 80052f6:	2304      	movs	r3, #4
 80052f8:	e038      	b.n	800536c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3338      	adds	r3, #56	@ 0x38
 80052fe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe f9be 	bl	8003684 <ld_word>
 8005308:	4603      	mov	r3, r0
 800530a:	461a      	mov	r2, r3
 800530c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <check_fs+0x48>
 8005314:	2303      	movs	r3, #3
 8005316:	e029      	b.n	800536c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800531e:	2be9      	cmp	r3, #233	@ 0xe9
 8005320:	d009      	beq.n	8005336 <check_fs+0x66>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005328:	2beb      	cmp	r3, #235	@ 0xeb
 800532a:	d11e      	bne.n	800536a <check_fs+0x9a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005332:	2b90      	cmp	r3, #144	@ 0x90
 8005334:	d119      	bne.n	800536a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3338      	adds	r3, #56	@ 0x38
 800533a:	3336      	adds	r3, #54	@ 0x36
 800533c:	4618      	mov	r0, r3
 800533e:	f7fe f9b9 	bl	80036b4 <ld_dword>
 8005342:	4603      	mov	r3, r0
 8005344:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005348:	4a0a      	ldr	r2, [pc, #40]	@ (8005374 <check_fs+0xa4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d101      	bne.n	8005352 <check_fs+0x82>
 800534e:	2300      	movs	r3, #0
 8005350:	e00c      	b.n	800536c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3338      	adds	r3, #56	@ 0x38
 8005356:	3352      	adds	r3, #82	@ 0x52
 8005358:	4618      	mov	r0, r3
 800535a:	f7fe f9ab 	bl	80036b4 <ld_dword>
 800535e:	4603      	mov	r3, r0
 8005360:	4a05      	ldr	r2, [pc, #20]	@ (8005378 <check_fs+0xa8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d101      	bne.n	800536a <check_fs+0x9a>
 8005366:	2300      	movs	r3, #0
 8005368:	e000      	b.n	800536c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800536a:	2302      	movs	r3, #2
}
 800536c:	4618      	mov	r0, r3
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	00544146 	.word	0x00544146
 8005378:	33544146 	.word	0x33544146

0800537c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b096      	sub	sp, #88	@ 0x58
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	4613      	mov	r3, r2
 8005388:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f7ff ff59 	bl	8005248 <get_ldnumber>
 8005396:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800539a:	2b00      	cmp	r3, #0
 800539c:	da01      	bge.n	80053a2 <find_volume+0x26>
 800539e:	230b      	movs	r3, #11
 80053a0:	e265      	b.n	800586e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80053a2:	4a9f      	ldr	r2, [pc, #636]	@ (8005620 <find_volume+0x2a4>)
 80053a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053aa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80053ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <find_volume+0x3a>
 80053b2:	230c      	movs	r3, #12
 80053b4:	e25b      	b.n	800586e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	f023 0301 	bic.w	r3, r3, #1
 80053c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80053c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01a      	beq.n	8005402 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80053cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe f8b7 	bl	8003544 <disk_status>
 80053d6:	4603      	mov	r3, r0
 80053d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80053dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10c      	bne.n	8005402 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <find_volume+0x82>
 80053ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80053fa:	230a      	movs	r3, #10
 80053fc:	e237      	b.n	800586e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80053fe:	2300      	movs	r3, #0
 8005400:	e235      	b.n	800586e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800540a:	b2da      	uxtb	r2, r3
 800540c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe f8af 	bl	8003578 <disk_initialize>
 800541a:	4603      	mov	r3, r0
 800541c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005420:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800542c:	2303      	movs	r3, #3
 800542e:	e21e      	b.n	800586e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d007      	beq.n	8005446 <find_volume+0xca>
 8005436:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005442:	230a      	movs	r3, #10
 8005444:	e213      	b.n	800586e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005448:	7858      	ldrb	r0, [r3, #1]
 800544a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544c:	330c      	adds	r3, #12
 800544e:	461a      	mov	r2, r3
 8005450:	2102      	movs	r1, #2
 8005452:	f7fe f8f9 	bl	8003648 <disk_ioctl>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <find_volume+0xe4>
 800545c:	2301      	movs	r3, #1
 800545e:	e206      	b.n	800586e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005462:	899b      	ldrh	r3, [r3, #12]
 8005464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005468:	d80d      	bhi.n	8005486 <find_volume+0x10a>
 800546a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546c:	899b      	ldrh	r3, [r3, #12]
 800546e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005472:	d308      	bcc.n	8005486 <find_volume+0x10a>
 8005474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005476:	899b      	ldrh	r3, [r3, #12]
 8005478:	461a      	mov	r2, r3
 800547a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547c:	899b      	ldrh	r3, [r3, #12]
 800547e:	3b01      	subs	r3, #1
 8005480:	4013      	ands	r3, r2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <find_volume+0x10e>
 8005486:	2301      	movs	r3, #1
 8005488:	e1f1      	b.n	800586e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800548a:	2300      	movs	r3, #0
 800548c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800548e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005490:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005492:	f7ff ff1d 	bl	80052d0 <check_fs>
 8005496:	4603      	mov	r3, r0
 8005498:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800549c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d149      	bne.n	8005538 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80054a4:	2300      	movs	r3, #0
 80054a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80054a8:	e01e      	b.n	80054e8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80054aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ac:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80054b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80054b8:	4413      	add	r3, r2
 80054ba:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80054bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054be:	3304      	adds	r3, #4
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d006      	beq.n	80054d4 <find_volume+0x158>
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	3308      	adds	r3, #8
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fe f8f2 	bl	80036b4 <ld_dword>
 80054d0:	4602      	mov	r2, r0
 80054d2:	e000      	b.n	80054d6 <find_volume+0x15a>
 80054d4:	2200      	movs	r2, #0
 80054d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	3358      	adds	r3, #88	@ 0x58
 80054dc:	443b      	add	r3, r7
 80054de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80054e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054e4:	3301      	adds	r3, #1
 80054e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80054e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d9dd      	bls.n	80054aa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80054ee:	2300      	movs	r3, #0
 80054f0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80054f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <find_volume+0x182>
 80054f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054fa:	3b01      	subs	r3, #1
 80054fc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80054fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	3358      	adds	r3, #88	@ 0x58
 8005504:	443b      	add	r3, r7
 8005506:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800550a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800550c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <find_volume+0x1a2>
 8005512:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005514:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005516:	f7ff fedb 	bl	80052d0 <check_fs>
 800551a:	4603      	mov	r3, r0
 800551c:	e000      	b.n	8005520 <find_volume+0x1a4>
 800551e:	2303      	movs	r3, #3
 8005520:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005524:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005528:	2b01      	cmp	r3, #1
 800552a:	d905      	bls.n	8005538 <find_volume+0x1bc>
 800552c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800552e:	3301      	adds	r3, #1
 8005530:	643b      	str	r3, [r7, #64]	@ 0x40
 8005532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005534:	2b03      	cmp	r3, #3
 8005536:	d9e2      	bls.n	80054fe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005538:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800553c:	2b04      	cmp	r3, #4
 800553e:	d101      	bne.n	8005544 <find_volume+0x1c8>
 8005540:	2301      	movs	r3, #1
 8005542:	e194      	b.n	800586e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005544:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005548:	2b01      	cmp	r3, #1
 800554a:	d901      	bls.n	8005550 <find_volume+0x1d4>
 800554c:	230d      	movs	r3, #13
 800554e:	e18e      	b.n	800586e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005552:	3338      	adds	r3, #56	@ 0x38
 8005554:	330b      	adds	r3, #11
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe f894 	bl	8003684 <ld_word>
 800555c:	4603      	mov	r3, r0
 800555e:	461a      	mov	r2, r3
 8005560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005562:	899b      	ldrh	r3, [r3, #12]
 8005564:	429a      	cmp	r2, r3
 8005566:	d001      	beq.n	800556c <find_volume+0x1f0>
 8005568:	230d      	movs	r3, #13
 800556a:	e180      	b.n	800586e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800556c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556e:	3338      	adds	r3, #56	@ 0x38
 8005570:	3316      	adds	r3, #22
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe f886 	bl	8003684 <ld_word>
 8005578:	4603      	mov	r3, r0
 800557a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800557c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <find_volume+0x214>
 8005582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005584:	3338      	adds	r3, #56	@ 0x38
 8005586:	3324      	adds	r3, #36	@ 0x24
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe f893 	bl	80036b4 <ld_dword>
 800558e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005592:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005594:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005598:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800559c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80055a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a2:	789b      	ldrb	r3, [r3, #2]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d005      	beq.n	80055b4 <find_volume+0x238>
 80055a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055aa:	789b      	ldrb	r3, [r3, #2]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d001      	beq.n	80055b4 <find_volume+0x238>
 80055b0:	230d      	movs	r3, #13
 80055b2:	e15c      	b.n	800586e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80055b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b6:	789b      	ldrb	r3, [r3, #2]
 80055b8:	461a      	mov	r2, r3
 80055ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055bc:	fb02 f303 	mul.w	r3, r2, r3
 80055c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80055c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055c8:	461a      	mov	r2, r3
 80055ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80055ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d0:	895b      	ldrh	r3, [r3, #10]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d008      	beq.n	80055e8 <find_volume+0x26c>
 80055d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d8:	895b      	ldrh	r3, [r3, #10]
 80055da:	461a      	mov	r2, r3
 80055dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055de:	895b      	ldrh	r3, [r3, #10]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	4013      	ands	r3, r2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <find_volume+0x270>
 80055e8:	230d      	movs	r3, #13
 80055ea:	e140      	b.n	800586e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80055ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ee:	3338      	adds	r3, #56	@ 0x38
 80055f0:	3311      	adds	r3, #17
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fe f846 	bl	8003684 <ld_word>
 80055f8:	4603      	mov	r3, r0
 80055fa:	461a      	mov	r2, r3
 80055fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005602:	891b      	ldrh	r3, [r3, #8]
 8005604:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005606:	8992      	ldrh	r2, [r2, #12]
 8005608:	0952      	lsrs	r2, r2, #5
 800560a:	b292      	uxth	r2, r2
 800560c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005610:	fb01 f202 	mul.w	r2, r1, r2
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <find_volume+0x2a8>
 800561c:	230d      	movs	r3, #13
 800561e:	e126      	b.n	800586e <find_volume+0x4f2>
 8005620:	2000258c 	.word	0x2000258c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005626:	3338      	adds	r3, #56	@ 0x38
 8005628:	3313      	adds	r3, #19
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe f82a 	bl	8003684 <ld_word>
 8005630:	4603      	mov	r3, r0
 8005632:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005634:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <find_volume+0x2cc>
 800563a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563c:	3338      	adds	r3, #56	@ 0x38
 800563e:	3320      	adds	r3, #32
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe f837 	bl	80036b4 <ld_dword>
 8005646:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	3338      	adds	r3, #56	@ 0x38
 800564c:	330e      	adds	r3, #14
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe f818 	bl	8003684 <ld_word>
 8005654:	4603      	mov	r3, r0
 8005656:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005658:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <find_volume+0x2e6>
 800565e:	230d      	movs	r3, #13
 8005660:	e105      	b.n	800586e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005662:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005664:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005666:	4413      	add	r3, r2
 8005668:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800566a:	8911      	ldrh	r1, [r2, #8]
 800566c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800566e:	8992      	ldrh	r2, [r2, #12]
 8005670:	0952      	lsrs	r2, r2, #5
 8005672:	b292      	uxth	r2, r2
 8005674:	fbb1 f2f2 	udiv	r2, r1, r2
 8005678:	b292      	uxth	r2, r2
 800567a:	4413      	add	r3, r2
 800567c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800567e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005682:	429a      	cmp	r2, r3
 8005684:	d201      	bcs.n	800568a <find_volume+0x30e>
 8005686:	230d      	movs	r3, #13
 8005688:	e0f1      	b.n	800586e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800568a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005692:	8952      	ldrh	r2, [r2, #10]
 8005694:	fbb3 f3f2 	udiv	r3, r3, r2
 8005698:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <find_volume+0x328>
 80056a0:	230d      	movs	r3, #13
 80056a2:	e0e4      	b.n	800586e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80056a4:	2303      	movs	r3, #3
 80056a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d802      	bhi.n	80056ba <find_volume+0x33e>
 80056b4:	2302      	movs	r3, #2
 80056b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d802      	bhi.n	80056ca <find_volume+0x34e>
 80056c4:	2301      	movs	r3, #1
 80056c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	1c9a      	adds	r2, r3, #2
 80056ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80056d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80056d6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80056d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80056da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056dc:	441a      	add	r2, r3
 80056de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80056e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80056e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e6:	441a      	add	r2, r3
 80056e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ea:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80056ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d11e      	bne.n	8005732 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80056f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f6:	3338      	adds	r3, #56	@ 0x38
 80056f8:	332a      	adds	r3, #42	@ 0x2a
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fd ffc2 	bl	8003684 <ld_word>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <find_volume+0x38e>
 8005706:	230d      	movs	r3, #13
 8005708:	e0b1      	b.n	800586e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800570a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570c:	891b      	ldrh	r3, [r3, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <find_volume+0x39a>
 8005712:	230d      	movs	r3, #13
 8005714:	e0ab      	b.n	800586e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005718:	3338      	adds	r3, #56	@ 0x38
 800571a:	332c      	adds	r3, #44	@ 0x2c
 800571c:	4618      	mov	r0, r3
 800571e:	f7fd ffc9 	bl	80036b4 <ld_dword>
 8005722:	4602      	mov	r2, r0
 8005724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005726:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005730:	e01f      	b.n	8005772 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005734:	891b      	ldrh	r3, [r3, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <find_volume+0x3c2>
 800573a:	230d      	movs	r3, #13
 800573c:	e097      	b.n	800586e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800573e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005740:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005744:	441a      	add	r2, r3
 8005746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005748:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800574a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800574e:	2b02      	cmp	r3, #2
 8005750:	d103      	bne.n	800575a <find_volume+0x3de>
 8005752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	e00a      	b.n	8005770 <find_volume+0x3f4>
 800575a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575c:	69da      	ldr	r2, [r3, #28]
 800575e:	4613      	mov	r3, r2
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	4413      	add	r3, r2
 8005764:	085a      	lsrs	r2, r3, #1
 8005766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005770:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005774:	6a1a      	ldr	r2, [r3, #32]
 8005776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005778:	899b      	ldrh	r3, [r3, #12]
 800577a:	4619      	mov	r1, r3
 800577c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800577e:	440b      	add	r3, r1
 8005780:	3b01      	subs	r3, #1
 8005782:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005784:	8989      	ldrh	r1, [r1, #12]
 8005786:	fbb3 f3f1 	udiv	r3, r3, r1
 800578a:	429a      	cmp	r2, r3
 800578c:	d201      	bcs.n	8005792 <find_volume+0x416>
 800578e:	230d      	movs	r3, #13
 8005790:	e06d      	b.n	800586e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005794:	f04f 32ff 	mov.w	r2, #4294967295
 8005798:	619a      	str	r2, [r3, #24]
 800579a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80057a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a4:	2280      	movs	r2, #128	@ 0x80
 80057a6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80057a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d149      	bne.n	8005844 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80057b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b2:	3338      	adds	r3, #56	@ 0x38
 80057b4:	3330      	adds	r3, #48	@ 0x30
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fd ff64 	bl	8003684 <ld_word>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d140      	bne.n	8005844 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80057c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057c4:	3301      	adds	r3, #1
 80057c6:	4619      	mov	r1, r3
 80057c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80057ca:	f7fe fa0b 	bl	8003be4 <move_window>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d137      	bne.n	8005844 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80057d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d6:	2200      	movs	r2, #0
 80057d8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80057da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057dc:	3338      	adds	r3, #56	@ 0x38
 80057de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fd ff4e 	bl	8003684 <ld_word>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d127      	bne.n	8005844 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80057f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f6:	3338      	adds	r3, #56	@ 0x38
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fd ff5b 	bl	80036b4 <ld_dword>
 80057fe:	4603      	mov	r3, r0
 8005800:	4a1d      	ldr	r2, [pc, #116]	@ (8005878 <find_volume+0x4fc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d11e      	bne.n	8005844 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005808:	3338      	adds	r3, #56	@ 0x38
 800580a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800580e:	4618      	mov	r0, r3
 8005810:	f7fd ff50 	bl	80036b4 <ld_dword>
 8005814:	4603      	mov	r3, r0
 8005816:	4a19      	ldr	r2, [pc, #100]	@ (800587c <find_volume+0x500>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d113      	bne.n	8005844 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800581c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581e:	3338      	adds	r3, #56	@ 0x38
 8005820:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005824:	4618      	mov	r0, r3
 8005826:	f7fd ff45 	bl	80036b4 <ld_dword>
 800582a:	4602      	mov	r2, r0
 800582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005832:	3338      	adds	r3, #56	@ 0x38
 8005834:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005838:	4618      	mov	r0, r3
 800583a:	f7fd ff3b 	bl	80036b4 <ld_dword>
 800583e:	4602      	mov	r2, r0
 8005840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005842:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005846:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800584a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800584c:	4b0c      	ldr	r3, [pc, #48]	@ (8005880 <find_volume+0x504>)
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	3301      	adds	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <find_volume+0x504>)
 8005856:	801a      	strh	r2, [r3, #0]
 8005858:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <find_volume+0x504>)
 800585a:	881a      	ldrh	r2, [r3, #0]
 800585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8005860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005862:	4a08      	ldr	r2, [pc, #32]	@ (8005884 <find_volume+0x508>)
 8005864:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005866:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005868:	f7fe f954 	bl	8003b14 <clear_lock>
#endif
	return FR_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3758      	adds	r7, #88	@ 0x58
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	41615252 	.word	0x41615252
 800587c:	61417272 	.word	0x61417272
 8005880:	20002590 	.word	0x20002590
 8005884:	200025b4 	.word	0x200025b4

08005888 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005892:	2309      	movs	r3, #9
 8005894:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01c      	beq.n	80058d6 <validate+0x4e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d018      	beq.n	80058d6 <validate+0x4e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d013      	beq.n	80058d6 <validate+0x4e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	889a      	ldrh	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	88db      	ldrh	r3, [r3, #6]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d10c      	bne.n	80058d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fd fe3e 	bl	8003544 <disk_status>
 80058c8:	4603      	mov	r3, r0
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <validate+0x4e>
			res = FR_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d102      	bne.n	80058e2 <validate+0x5a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	e000      	b.n	80058e4 <validate+0x5c>
 80058e2:	2300      	movs	r3, #0
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	6013      	str	r3, [r2, #0]
	return res;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	4613      	mov	r3, r2
 8005900:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005906:	f107 0310 	add.w	r3, r7, #16
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff fc9c 	bl	8005248 <get_ldnumber>
 8005910:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	2b00      	cmp	r3, #0
 8005916:	da01      	bge.n	800591c <f_mount+0x28>
 8005918:	230b      	movs	r3, #11
 800591a:	e02b      	b.n	8005974 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800591c:	4a17      	ldr	r2, [pc, #92]	@ (800597c <f_mount+0x88>)
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005924:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800592c:	69b8      	ldr	r0, [r7, #24]
 800592e:	f7fe f8f1 	bl	8003b14 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2200      	movs	r2, #0
 8005936:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	490d      	ldr	r1, [pc, #52]	@ (800597c <f_mount+0x88>)
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <f_mount+0x66>
 8005954:	79fb      	ldrb	r3, [r7, #7]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d001      	beq.n	800595e <f_mount+0x6a>
 800595a:	2300      	movs	r3, #0
 800595c:	e00a      	b.n	8005974 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800595e:	f107 010c 	add.w	r1, r7, #12
 8005962:	f107 0308 	add.w	r3, r7, #8
 8005966:	2200      	movs	r2, #0
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fd07 	bl	800537c <find_volume>
 800596e:	4603      	mov	r3, r0
 8005970:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005972:	7dfb      	ldrb	r3, [r7, #23]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3720      	adds	r7, #32
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	2000258c 	.word	0x2000258c

08005980 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b09a      	sub	sp, #104	@ 0x68
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	4613      	mov	r3, r2
 800598c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <f_open+0x18>
 8005994:	2309      	movs	r3, #9
 8005996:	e1b7      	b.n	8005d08 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800599e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80059a0:	79fa      	ldrb	r2, [r7, #7]
 80059a2:	f107 0114 	add.w	r1, r7, #20
 80059a6:	f107 0308 	add.w	r3, r7, #8
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff fce6 	bl	800537c <find_volume>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80059b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f040 819b 	bne.w	8005cf6 <f_open+0x376>
		dj.obj.fs = fs;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	f107 0318 	add.w	r3, r7, #24
 80059ca:	4611      	mov	r1, r2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff fbc5 	bl	800515c <follow_path>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80059d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d118      	bne.n	8005a12 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80059e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80059e4:	b25b      	sxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	da03      	bge.n	80059f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80059ea:	2306      	movs	r3, #6
 80059ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80059f0:	e00f      	b.n	8005a12 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	bf8c      	ite	hi
 80059f8:	2301      	movhi	r3, #1
 80059fa:	2300      	movls	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	f107 0318 	add.w	r3, r7, #24
 8005a04:	4611      	mov	r1, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fd ff3c 	bl	8003884 <chk_lock>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	f003 031c 	and.w	r3, r3, #28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d07f      	beq.n	8005b1c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005a1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d017      	beq.n	8005a54 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005a24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d10e      	bne.n	8005a4a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005a2c:	f7fd ff86 	bl	800393c <enq_lock>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d006      	beq.n	8005a44 <f_open+0xc4>
 8005a36:	f107 0318 	add.w	r3, r7, #24
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff f8de 	bl	8004bfc <dir_register>
 8005a40:	4603      	mov	r3, r0
 8005a42:	e000      	b.n	8005a46 <f_open+0xc6>
 8005a44:	2312      	movs	r3, #18
 8005a46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	f043 0308 	orr.w	r3, r3, #8
 8005a50:	71fb      	strb	r3, [r7, #7]
 8005a52:	e010      	b.n	8005a76 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005a54:	7fbb      	ldrb	r3, [r7, #30]
 8005a56:	f003 0311 	and.w	r3, r3, #17
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <f_open+0xe6>
					res = FR_DENIED;
 8005a5e:	2307      	movs	r3, #7
 8005a60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005a64:	e007      	b.n	8005a76 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <f_open+0xf6>
 8005a70:	2308      	movs	r3, #8
 8005a72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005a76:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d168      	bne.n	8005b50 <f_open+0x1d0>
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d063      	beq.n	8005b50 <f_open+0x1d0>
				dw = GET_FATTIME();
 8005a88:	f7fd fcfe 	bl	8003488 <get_fattime>
 8005a8c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a90:	330e      	adds	r3, #14
 8005a92:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fd fe4b 	bl	8003730 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9c:	3316      	adds	r3, #22
 8005a9e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fd fe45 	bl	8003730 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa8:	330b      	adds	r3, #11
 8005aaa:	2220      	movs	r2, #32
 8005aac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe fe1a 	bl	80046ee <ld_clust>
 8005aba:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fe32 	bl	800472c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aca:	331c      	adds	r3, #28
 8005acc:	2100      	movs	r1, #0
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fd fe2e 	bl	8003730 <st_dword>
					fs->wflag = 1;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d037      	beq.n	8005b50 <f_open+0x1d0>
						dw = fs->winsect;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8005ae6:	f107 0318 	add.w	r3, r7, #24
 8005aea:	2200      	movs	r2, #0
 8005aec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe fb22 	bl	8004138 <remove_chain>
 8005af4:	4603      	mov	r3, r0
 8005af6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8005afa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d126      	bne.n	8005b50 <f_open+0x1d0>
							res = move_window(fs, dw);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fe f86c 	bl	8003be4 <move_window>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b16:	3a01      	subs	r2, #1
 8005b18:	615a      	str	r2, [r3, #20]
 8005b1a:	e019      	b.n	8005b50 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005b1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d115      	bne.n	8005b50 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005b24:	7fbb      	ldrb	r3, [r7, #30]
 8005b26:	f003 0310 	and.w	r3, r3, #16
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <f_open+0x1b6>
					res = FR_NO_FILE;
 8005b2e:	2304      	movs	r3, #4
 8005b30:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005b34:	e00c      	b.n	8005b50 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <f_open+0x1d0>
 8005b40:	7fbb      	ldrb	r3, [r7, #30]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <f_open+0x1d0>
						res = FR_DENIED;
 8005b4a:	2307      	movs	r3, #7
 8005b4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005b50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d126      	bne.n	8005ba6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005b62:	79fb      	ldrb	r3, [r7, #7]
 8005b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005b72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	bf8c      	ite	hi
 8005b7e:	2301      	movhi	r3, #1
 8005b80:	2300      	movls	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	f107 0318 	add.w	r3, r7, #24
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fd fef7 	bl	8003980 <inc_lock>
 8005b92:	4602      	mov	r2, r0
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <f_open+0x226>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005ba6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f040 80a3 	bne.w	8005cf6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fe fd99 	bl	80046ee <ld_clust>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc4:	331c      	adds	r3, #28
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fd fd74 	bl	80036b4 <ld_dword>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	88da      	ldrh	r2, [r3, #6]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	79fa      	ldrb	r2, [r7, #7]
 8005bea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3330      	adds	r3, #48	@ 0x30
 8005c02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005c06:	2100      	movs	r1, #0
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fd fdde 	bl	80037ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d06e      	beq.n	8005cf6 <f_open+0x376>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d06a      	beq.n	8005cf6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	68da      	ldr	r2, [r3, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	895b      	ldrh	r3, [r3, #10]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	899b      	ldrh	r3, [r3, #12]
 8005c32:	fb02 f303 	mul.w	r3, r2, r3
 8005c36:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c44:	e016      	b.n	8005c74 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe f887 	bl	8003d5e <get_fat>
 8005c50:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005c52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d802      	bhi.n	8005c5e <f_open+0x2de>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005c5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c64:	d102      	bne.n	8005c6c <f_open+0x2ec>
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005c6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d103      	bne.n	8005c84 <f_open+0x304>
 8005c7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005c7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d8e0      	bhi.n	8005c46 <f_open+0x2c6>
				}
				fp->clust = clst;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005c8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d131      	bne.n	8005cf6 <f_open+0x376>
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	899b      	ldrh	r3, [r3, #12]
 8005c96:	461a      	mov	r2, r3
 8005c98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c9e:	fb01 f202 	mul.w	r2, r1, r2
 8005ca2:	1a9b      	subs	r3, r3, r2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d026      	beq.n	8005cf6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fe f837 	bl	8003d20 <clust2sect>
 8005cb2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8005cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d103      	bne.n	8005cc2 <f_open+0x342>
						res = FR_INT_ERR;
 8005cba:	2302      	movs	r3, #2
 8005cbc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005cc0:	e019      	b.n	8005cf6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	899b      	ldrh	r3, [r3, #12]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cca:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd0:	441a      	add	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	7858      	ldrb	r0, [r3, #1]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a1a      	ldr	r2, [r3, #32]
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f7fd fc6f 	bl	80035c8 <disk_read>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <f_open+0x376>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005cf6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <f_open+0x384>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005d04:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3768      	adds	r7, #104	@ 0x68
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08e      	sub	sp, #56	@ 0x38
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f107 0214 	add.w	r2, r7, #20
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff fda9 	bl	8005888 <validate>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005d3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d107      	bne.n	8005d54 <f_read+0x44>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	7d5b      	ldrb	r3, [r3, #21]
 8005d48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005d4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <f_read+0x4a>
 8005d54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005d58:	e135      	b.n	8005fc6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	7d1b      	ldrb	r3, [r3, #20]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <f_read+0x5a>
 8005d66:	2307      	movs	r3, #7
 8005d68:	e12d      	b.n	8005fc6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	f240 811e 	bls.w	8005fbc <f_read+0x2ac>
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005d84:	e11a      	b.n	8005fbc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	8992      	ldrh	r2, [r2, #12]
 8005d8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d92:	fb01 f202 	mul.w	r2, r1, r2
 8005d96:	1a9b      	subs	r3, r3, r2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f040 80d5 	bne.w	8005f48 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	8992      	ldrh	r2, [r2, #12]
 8005da6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	8952      	ldrh	r2, [r2, #10]
 8005dae:	3a01      	subs	r2, #1
 8005db0:	4013      	ands	r3, r2
 8005db2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d12f      	bne.n	8005e1a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d103      	bne.n	8005dca <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dc8:	e013      	b.n	8005df2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d007      	beq.n	8005de2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7fe faaa 	bl	8004332 <clmt_clust>
 8005dde:	6338      	str	r0, [r7, #48]	@ 0x30
 8005de0:	e007      	b.n	8005df2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	4619      	mov	r1, r3
 8005dea:	4610      	mov	r0, r2
 8005dec:	f7fd ffb7 	bl	8003d5e <get_fat>
 8005df0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d804      	bhi.n	8005e02 <f_read+0xf2>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	755a      	strb	r2, [r3, #21]
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e0e1      	b.n	8005fc6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d104      	bne.n	8005e14 <f_read+0x104>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	755a      	strb	r2, [r3, #21]
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0d8      	b.n	8005fc6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e18:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	4619      	mov	r1, r3
 8005e22:	4610      	mov	r0, r2
 8005e24:	f7fd ff7c 	bl	8003d20 <clust2sect>
 8005e28:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <f_read+0x12a>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2202      	movs	r2, #2
 8005e34:	755a      	strb	r2, [r3, #21]
 8005e36:	2302      	movs	r3, #2
 8005e38:	e0c5      	b.n	8005fc6 <f_read+0x2b6>
			sect += csect;
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	4413      	add	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	899b      	ldrh	r3, [r3, #12]
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d041      	beq.n	8005eda <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	4413      	add	r3, r2
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	8952      	ldrh	r2, [r2, #10]
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d905      	bls.n	8005e70 <f_read+0x160>
					cc = fs->csize - csect;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	895b      	ldrh	r3, [r3, #10]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	7858      	ldrb	r0, [r3, #1]
 8005e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e7a:	f7fd fba5 	bl	80035c8 <disk_read>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d004      	beq.n	8005e8e <f_read+0x17e>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	755a      	strb	r2, [r3, #21]
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e09b      	b.n	8005fc6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	7d1b      	ldrb	r3, [r3, #20]
 8005e92:	b25b      	sxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	da18      	bge.n	8005eca <f_read+0x1ba>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a1a      	ldr	r2, [r3, #32]
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d911      	bls.n	8005eca <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a1a      	ldr	r2, [r3, #32]
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	8992      	ldrh	r2, [r2, #12]
 8005eb2:	fb02 f303 	mul.w	r3, r2, r3
 8005eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb8:	18d0      	adds	r0, r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	899b      	ldrh	r3, [r3, #12]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f7fd fc5f 	bl	8003788 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	899b      	ldrh	r3, [r3, #12]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
 8005ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8005ed8:	e05c      	b.n	8005f94 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d02e      	beq.n	8005f42 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	7d1b      	ldrb	r3, [r3, #20]
 8005ee8:	b25b      	sxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	da18      	bge.n	8005f20 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	7858      	ldrb	r0, [r3, #1]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a1a      	ldr	r2, [r3, #32]
 8005efc:	2301      	movs	r3, #1
 8005efe:	f7fd fb83 	bl	8003608 <disk_write>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d004      	beq.n	8005f12 <f_read+0x202>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	755a      	strb	r2, [r3, #21]
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e059      	b.n	8005fc6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	7d1b      	ldrb	r3, [r3, #20]
 8005f16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	7858      	ldrb	r0, [r3, #1]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	f7fd fb4b 	bl	80035c8 <disk_read>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <f_read+0x232>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	755a      	strb	r2, [r3, #21]
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e041      	b.n	8005fc6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	899b      	ldrh	r3, [r3, #12]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	8992      	ldrh	r2, [r2, #12]
 8005f56:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f5a:	fb01 f202 	mul.w	r2, r1, r2
 8005f5e:	1a9b      	subs	r3, r3, r2
 8005f60:	1ac3      	subs	r3, r0, r3
 8005f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005f64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d901      	bls.n	8005f70 <f_read+0x260>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	8992      	ldrh	r2, [r2, #12]
 8005f7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f82:	fb00 f202 	mul.w	r2, r0, r2
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	440b      	add	r3, r1
 8005f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f90:	f7fd fbfa 	bl	8003788 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f98:	4413      	add	r3, r2
 8005f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	699a      	ldr	r2, [r3, #24]
 8005fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa2:	441a      	add	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	619a      	str	r2, [r3, #24]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fae:	441a      	add	r2, r3
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f47f aee1 	bne.w	8005d86 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3738      	adds	r7, #56	@ 0x38
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b08c      	sub	sp, #48	@ 0x30
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	607a      	str	r2, [r7, #4]
 8005fda:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f107 0210 	add.w	r2, r7, #16
 8005fec:	4611      	mov	r1, r2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff fc4a 	bl	8005888 <validate>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d107      	bne.n	8006012 <f_write+0x44>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	7d5b      	ldrb	r3, [r3, #21]
 8006006:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800600a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <f_write+0x4a>
 8006012:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006016:	e16a      	b.n	80062ee <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	7d1b      	ldrb	r3, [r3, #20]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <f_write+0x5a>
 8006024:	2307      	movs	r3, #7
 8006026:	e162      	b.n	80062ee <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	699a      	ldr	r2, [r3, #24]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	441a      	add	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	429a      	cmp	r2, r3
 8006036:	f080 814c 	bcs.w	80062d2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	43db      	mvns	r3, r3
 8006040:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006042:	e146      	b.n	80062d2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	8992      	ldrh	r2, [r2, #12]
 800604c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006050:	fb01 f202 	mul.w	r2, r1, r2
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	2b00      	cmp	r3, #0
 8006058:	f040 80f1 	bne.w	800623e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	8992      	ldrh	r2, [r2, #12]
 8006064:	fbb3 f3f2 	udiv	r3, r3, r2
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	8952      	ldrh	r2, [r2, #10]
 800606c:	3a01      	subs	r2, #1
 800606e:	4013      	ands	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d143      	bne.n	8006100 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10c      	bne.n	800609a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006088:	2b00      	cmp	r3, #0
 800608a:	d11a      	bne.n	80060c2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2100      	movs	r1, #0
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe f8b6 	bl	8004202 <create_chain>
 8006096:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006098:	e013      	b.n	80060c2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	4619      	mov	r1, r3
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7fe f942 	bl	8004332 <clmt_clust>
 80060ae:	62b8      	str	r0, [r7, #40]	@ 0x28
 80060b0:	e007      	b.n	80060c2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f7fe f8a1 	bl	8004202 <create_chain>
 80060c0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80060c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8109 	beq.w	80062dc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80060ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d104      	bne.n	80060da <f_write+0x10c>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2202      	movs	r2, #2
 80060d4:	755a      	strb	r2, [r3, #21]
 80060d6:	2302      	movs	r3, #2
 80060d8:	e109      	b.n	80062ee <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80060da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e0:	d104      	bne.n	80060ec <f_write+0x11e>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	755a      	strb	r2, [r3, #21]
 80060e8:	2301      	movs	r3, #1
 80060ea:	e100      	b.n	80062ee <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060f0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d102      	bne.n	8006100 <f_write+0x132>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060fe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	7d1b      	ldrb	r3, [r3, #20]
 8006104:	b25b      	sxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	da18      	bge.n	800613c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	7858      	ldrb	r0, [r3, #1]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a1a      	ldr	r2, [r3, #32]
 8006118:	2301      	movs	r3, #1
 800611a:	f7fd fa75 	bl	8003608 <disk_write>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <f_write+0x160>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	755a      	strb	r2, [r3, #21]
 800612a:	2301      	movs	r3, #1
 800612c:	e0df      	b.n	80062ee <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	7d1b      	ldrb	r3, [r3, #20]
 8006132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006136:	b2da      	uxtb	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	4619      	mov	r1, r3
 8006144:	4610      	mov	r0, r2
 8006146:	f7fd fdeb 	bl	8003d20 <clust2sect>
 800614a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d104      	bne.n	800615c <f_write+0x18e>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2202      	movs	r2, #2
 8006156:	755a      	strb	r2, [r3, #21]
 8006158:	2302      	movs	r3, #2
 800615a:	e0c8      	b.n	80062ee <f_write+0x320>
			sect += csect;
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	4413      	add	r3, r2
 8006162:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	899b      	ldrh	r3, [r3, #12]
 8006168:	461a      	mov	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006170:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d043      	beq.n	8006200 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	4413      	add	r3, r2
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	8952      	ldrh	r2, [r2, #10]
 8006182:	4293      	cmp	r3, r2
 8006184:	d905      	bls.n	8006192 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	895b      	ldrh	r3, [r3, #10]
 800618a:	461a      	mov	r2, r3
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	7858      	ldrb	r0, [r3, #1]
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	69f9      	ldr	r1, [r7, #28]
 800619c:	f7fd fa34 	bl	8003608 <disk_write>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d004      	beq.n	80061b0 <f_write+0x1e2>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	755a      	strb	r2, [r3, #21]
 80061ac:	2301      	movs	r3, #1
 80061ae:	e09e      	b.n	80062ee <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a1a      	ldr	r2, [r3, #32]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	6a3a      	ldr	r2, [r7, #32]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d918      	bls.n	80061f0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	8992      	ldrh	r2, [r2, #12]
 80061d0:	fb02 f303 	mul.w	r3, r2, r3
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	18d1      	adds	r1, r2, r3
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	899b      	ldrh	r3, [r3, #12]
 80061dc:	461a      	mov	r2, r3
 80061de:	f7fd fad3 	bl	8003788 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	7d1b      	ldrb	r3, [r3, #20]
 80061e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	899b      	ldrh	r3, [r3, #12]
 80061f4:	461a      	mov	r2, r3
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	fb02 f303 	mul.w	r3, r2, r3
 80061fc:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80061fe:	e04b      	b.n	8006298 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	429a      	cmp	r2, r3
 8006208:	d016      	beq.n	8006238 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006212:	429a      	cmp	r2, r3
 8006214:	d210      	bcs.n	8006238 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	7858      	ldrb	r0, [r3, #1]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006220:	2301      	movs	r3, #1
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	f7fd f9d0 	bl	80035c8 <disk_read>
 8006228:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800622a:	2b00      	cmp	r3, #0
 800622c:	d004      	beq.n	8006238 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	755a      	strb	r2, [r3, #21]
 8006234:	2301      	movs	r3, #1
 8006236:	e05a      	b.n	80062ee <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	899b      	ldrh	r3, [r3, #12]
 8006242:	4618      	mov	r0, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	8992      	ldrh	r2, [r2, #12]
 800624c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006250:	fb01 f202 	mul.w	r2, r1, r2
 8006254:	1a9b      	subs	r3, r3, r2
 8006256:	1ac3      	subs	r3, r0, r3
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800625a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	429a      	cmp	r2, r3
 8006260:	d901      	bls.n	8006266 <f_write+0x298>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	8992      	ldrh	r2, [r2, #12]
 8006274:	fbb3 f0f2 	udiv	r0, r3, r2
 8006278:	fb00 f202 	mul.w	r2, r0, r2
 800627c:	1a9b      	subs	r3, r3, r2
 800627e:	440b      	add	r3, r1
 8006280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006282:	69f9      	ldr	r1, [r7, #28]
 8006284:	4618      	mov	r0, r3
 8006286:	f7fd fa7f 	bl	8003788 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	7d1b      	ldrb	r3, [r3, #20]
 800628e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006292:	b2da      	uxtb	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	4413      	add	r3, r2
 800629e:	61fb      	str	r3, [r7, #28]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	699a      	ldr	r2, [r3, #24]
 80062a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a6:	441a      	add	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	619a      	str	r2, [r3, #24]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	bf38      	it	cc
 80062b8:	461a      	movcc	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	60da      	str	r2, [r3, #12]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	441a      	add	r2, r3
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f47f aeb5 	bne.w	8006044 <f_write+0x76>
 80062da:	e000      	b.n	80062de <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80062dc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	7d1b      	ldrb	r3, [r3, #20]
 80062e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3730      	adds	r7, #48	@ 0x30
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b086      	sub	sp, #24
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f107 0208 	add.w	r2, r7, #8
 8006304:	4611      	mov	r1, r2
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff fabe 	bl	8005888 <validate>
 800630c:	4603      	mov	r3, r0
 800630e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006310:	7dfb      	ldrb	r3, [r7, #23]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d168      	bne.n	80063e8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	7d1b      	ldrb	r3, [r3, #20]
 800631a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d062      	beq.n	80063e8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	7d1b      	ldrb	r3, [r3, #20]
 8006326:	b25b      	sxtb	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	da15      	bge.n	8006358 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	7858      	ldrb	r0, [r3, #1]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1a      	ldr	r2, [r3, #32]
 800633a:	2301      	movs	r3, #1
 800633c:	f7fd f964 	bl	8003608 <disk_write>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <f_sync+0x54>
 8006346:	2301      	movs	r3, #1
 8006348:	e04f      	b.n	80063ea <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	7d1b      	ldrb	r3, [r3, #20]
 800634e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006352:	b2da      	uxtb	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006358:	f7fd f896 	bl	8003488 <get_fattime>
 800635c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f7fd fc3c 	bl	8003be4 <move_window>
 800636c:	4603      	mov	r3, r0
 800636e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d138      	bne.n	80063e8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	330b      	adds	r3, #11
 8006380:	781a      	ldrb	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	330b      	adds	r3, #11
 8006386:	f042 0220 	orr.w	r2, r2, #32
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	461a      	mov	r2, r3
 8006398:	68f9      	ldr	r1, [r7, #12]
 800639a:	f7fe f9c7 	bl	800472c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f103 021c 	add.w	r2, r3, #28
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f7fd f9c0 	bl	8003730 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3316      	adds	r3, #22
 80063b4:	6939      	ldr	r1, [r7, #16]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fd f9ba 	bl	8003730 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3312      	adds	r3, #18
 80063c0:	2100      	movs	r1, #0
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fd f999 	bl	80036fa <st_word>
					fs->wflag = 1;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2201      	movs	r2, #1
 80063cc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fd fc35 	bl	8003c40 <sync_fs>
 80063d6:	4603      	mov	r3, r0
 80063d8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	7d1b      	ldrb	r3, [r3, #20]
 80063de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff ff7b 	bl	80062f6 <f_sync>
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d118      	bne.n	800643c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f107 0208 	add.w	r2, r7, #8
 8006410:	4611      	mov	r1, r2
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff fa38 	bl	8005888 <validate>
 8006418:	4603      	mov	r3, r0
 800641a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10c      	bne.n	800643c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	4618      	mov	r0, r3
 8006428:	f7fd fb38 	bl	8003a9c <dec_lock>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d102      	bne.n	800643c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800643c:	7bfb      	ldrb	r3, [r7, #15]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b092      	sub	sp, #72	@ 0x48
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006452:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8006456:	f107 030c 	add.w	r3, r7, #12
 800645a:	2200      	movs	r2, #0
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe ff8d 	bl	800537c <find_volume>
 8006462:	4603      	mov	r3, r0
 8006464:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8006468:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 8099 	bne.w	80065a4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006472:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647a:	699a      	ldr	r2, [r3, #24]
 800647c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	3b02      	subs	r3, #2
 8006482:	429a      	cmp	r2, r3
 8006484:	d804      	bhi.n	8006490 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	e089      	b.n	80065a4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d128      	bne.n	80064ee <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800649c:	2302      	movs	r3, #2
 800649e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80064a4:	f107 0314 	add.w	r3, r7, #20
 80064a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fd fc57 	bl	8003d5e <get_fat>
 80064b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80064b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	d103      	bne.n	80064c2 <f_getfree+0x7c>
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80064c0:	e063      	b.n	800658a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80064c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d103      	bne.n	80064d0 <f_getfree+0x8a>
 80064c8:	2302      	movs	r3, #2
 80064ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80064ce:	e05c      	b.n	800658a <f_getfree+0x144>
					if (stat == 0) nfree++;
 80064d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d102      	bne.n	80064dc <f_getfree+0x96>
 80064d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064d8:	3301      	adds	r3, #1
 80064da:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80064dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064de:	3301      	adds	r3, #1
 80064e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d3db      	bcc.n	80064a4 <f_getfree+0x5e>
 80064ec:	e04d      	b.n	800658a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80064ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f8:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064fe:	2300      	movs	r3, #0
 8006500:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8006502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006504:	2b00      	cmp	r3, #0
 8006506:	d113      	bne.n	8006530 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006508:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800650a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006510:	4619      	mov	r1, r3
 8006512:	f7fd fb67 	bl	8003be4 <move_window>
 8006516:	4603      	mov	r3, r0
 8006518:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800651c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006520:	2b00      	cmp	r3, #0
 8006522:	d131      	bne.n	8006588 <f_getfree+0x142>
							p = fs->win;
 8006524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006526:	3338      	adds	r3, #56	@ 0x38
 8006528:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652c:	899b      	ldrh	r3, [r3, #12]
 800652e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b02      	cmp	r3, #2
 8006536:	d10f      	bne.n	8006558 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800653a:	f7fd f8a3 	bl	8003684 <ld_word>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d102      	bne.n	800654a <f_getfree+0x104>
 8006544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006546:	3301      	adds	r3, #1
 8006548:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	3302      	adds	r3, #2
 800654e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006552:	3b02      	subs	r3, #2
 8006554:	637b      	str	r3, [r7, #52]	@ 0x34
 8006556:	e010      	b.n	800657a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800655a:	f7fd f8ab 	bl	80036b4 <ld_dword>
 800655e:	4603      	mov	r3, r0
 8006560:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d102      	bne.n	800656e <f_getfree+0x128>
 8006568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800656a:	3301      	adds	r3, #1
 800656c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800656e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006570:	3304      	adds	r3, #4
 8006572:	633b      	str	r3, [r7, #48]	@ 0x30
 8006574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006576:	3b04      	subs	r3, #4
 8006578:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800657a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800657c:	3b01      	subs	r3, #1
 800657e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1bd      	bne.n	8006502 <f_getfree+0xbc>
 8006586:	e000      	b.n	800658a <f_getfree+0x144>
							if (res != FR_OK) break;
 8006588:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800658e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006592:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006594:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006598:	791a      	ldrb	r2, [r3, #4]
 800659a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659c:	f042 0201 	orr.w	r2, r2, #1
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80065a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3748      	adds	r7, #72	@ 0x48
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
	int n = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80065c4:	e01c      	b.n	8006600 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80065c6:	f107 0310 	add.w	r3, r7, #16
 80065ca:	f107 0114 	add.w	r1, r7, #20
 80065ce:	2201      	movs	r2, #1
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fb9d 	bl	8005d10 <f_read>
		if (rc != 1) break;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d117      	bne.n	800660c <f_gets+0x5c>
		c = s[0];
 80065dc:	7d3b      	ldrb	r3, [r7, #20]
 80065de:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
 80065e2:	2b0d      	cmp	r3, #13
 80065e4:	d00b      	beq.n	80065fe <f_gets+0x4e>
		*p++ = c;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	61ba      	str	r2, [r7, #24]
 80065ec:	7dfa      	ldrb	r2, [r7, #23]
 80065ee:	701a      	strb	r2, [r3, #0]
		n++;
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	3301      	adds	r3, #1
 80065f4:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
 80065f8:	2b0a      	cmp	r3, #10
 80065fa:	d009      	beq.n	8006610 <f_gets+0x60>
 80065fc:	e000      	b.n	8006600 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80065fe:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	3b01      	subs	r3, #1
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	429a      	cmp	r2, r3
 8006608:	dbdd      	blt.n	80065c6 <f_gets+0x16>
 800660a:	e002      	b.n	8006612 <f_gets+0x62>
		if (rc != 1) break;
 800660c:	bf00      	nop
 800660e:	e000      	b.n	8006612 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8006610:	bf00      	nop
	}
	*p = 0;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	2200      	movs	r2, #0
 8006616:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <f_gets+0x72>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	e000      	b.n	8006624 <f_gets+0x74>
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3720      	adds	r7, #32
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	2b0a      	cmp	r3, #10
 800663c:	d103      	bne.n	8006646 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800663e:	210d      	movs	r1, #13
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff fff3 	bl	800662c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	db25      	blt.n	800669e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	60fa      	str	r2, [r7, #12]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	4413      	add	r3, r2
 800665c:	78fa      	ldrb	r2, [r7, #3]
 800665e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b3c      	cmp	r3, #60	@ 0x3c
 8006664:	dd12      	ble.n	800668c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f103 010c 	add.w	r1, r3, #12
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	f107 0308 	add.w	r3, r7, #8
 8006676:	f7ff fcaa 	bl	8005fce <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	429a      	cmp	r2, r3
 8006680:	d101      	bne.n	8006686 <putc_bfd+0x5a>
 8006682:	2300      	movs	r3, #0
 8006684:	e001      	b.n	800668a <putc_bfd+0x5e>
 8006686:	f04f 33ff 	mov.w	r3, #4294967295
 800668a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	609a      	str	r2, [r3, #8]
 800669c:	e000      	b.n	80066a0 <putc_bfd+0x74>
	if (i < 0) return;
 800669e:	bf00      	nop
}
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	db16      	blt.n	80066e4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f103 010c 	add.w	r1, r3, #12
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	461a      	mov	r2, r3
 80066c6:	f107 030c 	add.w	r3, r7, #12
 80066ca:	f7ff fc80 	bl	8005fce <f_write>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d107      	bne.n	80066e4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4293      	cmp	r3, r2
 80066dc:	d102      	bne.n	80066e4 <putc_flush+0x3e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	e001      	b.n	80066e8 <putc_flush+0x42>
	return EOF;
 80066e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	605a      	str	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	609a      	str	r2, [r3, #8]
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b096      	sub	sp, #88	@ 0x58
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8006724:	f107 030c 	add.w	r3, r7, #12
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff ffe0 	bl	80066f0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8006730:	e009      	b.n	8006746 <f_puts+0x2c>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	781a      	ldrb	r2, [r3, #0]
 800673a:	f107 030c 	add.w	r3, r7, #12
 800673e:	4611      	mov	r1, r2
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff ff73 	bl	800662c <putc_bfd>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f1      	bne.n	8006732 <f_puts+0x18>
	return putc_flush(&pb);
 800674e:	f107 030c 	add.w	r3, r7, #12
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff ffa7 	bl	80066a6 <putc_flush>
 8006758:	4603      	mov	r3, r0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3758      	adds	r7, #88	@ 0x58
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006772:	2301      	movs	r3, #1
 8006774:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800677a:	4b1f      	ldr	r3, [pc, #124]	@ (80067f8 <FATFS_LinkDriverEx+0x94>)
 800677c:	7a5b      	ldrb	r3, [r3, #9]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d131      	bne.n	80067e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006784:	4b1c      	ldr	r3, [pc, #112]	@ (80067f8 <FATFS_LinkDriverEx+0x94>)
 8006786:	7a5b      	ldrb	r3, [r3, #9]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	4b1a      	ldr	r3, [pc, #104]	@ (80067f8 <FATFS_LinkDriverEx+0x94>)
 800678e:	2100      	movs	r1, #0
 8006790:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006792:	4b19      	ldr	r3, [pc, #100]	@ (80067f8 <FATFS_LinkDriverEx+0x94>)
 8006794:	7a5b      	ldrb	r3, [r3, #9]
 8006796:	b2db      	uxtb	r3, r3
 8006798:	4a17      	ldr	r2, [pc, #92]	@ (80067f8 <FATFS_LinkDriverEx+0x94>)
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80067a2:	4b15      	ldr	r3, [pc, #84]	@ (80067f8 <FATFS_LinkDriverEx+0x94>)
 80067a4:	7a5b      	ldrb	r3, [r3, #9]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	461a      	mov	r2, r3
 80067aa:	4b13      	ldr	r3, [pc, #76]	@ (80067f8 <FATFS_LinkDriverEx+0x94>)
 80067ac:	4413      	add	r3, r2
 80067ae:	79fa      	ldrb	r2, [r7, #7]
 80067b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80067b2:	4b11      	ldr	r3, [pc, #68]	@ (80067f8 <FATFS_LinkDriverEx+0x94>)
 80067b4:	7a5b      	ldrb	r3, [r3, #9]
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	b2d1      	uxtb	r1, r2
 80067bc:	4a0e      	ldr	r2, [pc, #56]	@ (80067f8 <FATFS_LinkDriverEx+0x94>)
 80067be:	7251      	strb	r1, [r2, #9]
 80067c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80067c2:	7dbb      	ldrb	r3, [r7, #22]
 80067c4:	3330      	adds	r3, #48	@ 0x30
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	3301      	adds	r3, #1
 80067d0:	223a      	movs	r2, #58	@ 0x3a
 80067d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	3302      	adds	r3, #2
 80067d8:	222f      	movs	r2, #47	@ 0x2f
 80067da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	3303      	adds	r3, #3
 80067e0:	2200      	movs	r2, #0
 80067e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	200027b4 	.word	0x200027b4

080067fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006806:	2200      	movs	r2, #0
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff ffaa 	bl	8006764 <FATFS_LinkDriverEx>
 8006810:	4603      	mov	r3, r0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	4603      	mov	r3, r0
 8006824:	6039      	str	r1, [r7, #0]
 8006826:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	2b7f      	cmp	r3, #127	@ 0x7f
 800682c:	d802      	bhi.n	8006834 <ff_convert+0x18>
		c = chr;
 800682e:	88fb      	ldrh	r3, [r7, #6]
 8006830:	81fb      	strh	r3, [r7, #14]
 8006832:	e025      	b.n	8006880 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00b      	beq.n	8006852 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800683a:	88fb      	ldrh	r3, [r7, #6]
 800683c:	2bff      	cmp	r3, #255	@ 0xff
 800683e:	d805      	bhi.n	800684c <ff_convert+0x30>
 8006840:	88fb      	ldrh	r3, [r7, #6]
 8006842:	3b80      	subs	r3, #128	@ 0x80
 8006844:	4a12      	ldr	r2, [pc, #72]	@ (8006890 <ff_convert+0x74>)
 8006846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800684a:	e000      	b.n	800684e <ff_convert+0x32>
 800684c:	2300      	movs	r3, #0
 800684e:	81fb      	strh	r3, [r7, #14]
 8006850:	e016      	b.n	8006880 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006852:	2300      	movs	r3, #0
 8006854:	81fb      	strh	r3, [r7, #14]
 8006856:	e009      	b.n	800686c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006858:	89fb      	ldrh	r3, [r7, #14]
 800685a:	4a0d      	ldr	r2, [pc, #52]	@ (8006890 <ff_convert+0x74>)
 800685c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006860:	88fa      	ldrh	r2, [r7, #6]
 8006862:	429a      	cmp	r2, r3
 8006864:	d006      	beq.n	8006874 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006866:	89fb      	ldrh	r3, [r7, #14]
 8006868:	3301      	adds	r3, #1
 800686a:	81fb      	strh	r3, [r7, #14]
 800686c:	89fb      	ldrh	r3, [r7, #14]
 800686e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006870:	d9f2      	bls.n	8006858 <ff_convert+0x3c>
 8006872:	e000      	b.n	8006876 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006874:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006876:	89fb      	ldrh	r3, [r7, #14]
 8006878:	3380      	adds	r3, #128	@ 0x80
 800687a:	b29b      	uxth	r3, r3
 800687c:	b2db      	uxtb	r3, r3
 800687e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006880:	89fb      	ldrh	r3, [r7, #14]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	08007f14 	.word	0x08007f14

08006894 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800689e:	88fb      	ldrh	r3, [r7, #6]
 80068a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068a4:	d201      	bcs.n	80068aa <ff_wtoupper+0x16>
 80068a6:	4b3e      	ldr	r3, [pc, #248]	@ (80069a0 <ff_wtoupper+0x10c>)
 80068a8:	e000      	b.n	80068ac <ff_wtoupper+0x18>
 80068aa:	4b3e      	ldr	r3, [pc, #248]	@ (80069a4 <ff_wtoupper+0x110>)
 80068ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	1c9a      	adds	r2, r3, #2
 80068b2:	617a      	str	r2, [r7, #20]
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80068b8:	8a7b      	ldrh	r3, [r7, #18]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d068      	beq.n	8006990 <ff_wtoupper+0xfc>
 80068be:	88fa      	ldrh	r2, [r7, #6]
 80068c0:	8a7b      	ldrh	r3, [r7, #18]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d364      	bcc.n	8006990 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	1c9a      	adds	r2, r3, #2
 80068ca:	617a      	str	r2, [r7, #20]
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	823b      	strh	r3, [r7, #16]
 80068d0:	8a3b      	ldrh	r3, [r7, #16]
 80068d2:	0a1b      	lsrs	r3, r3, #8
 80068d4:	81fb      	strh	r3, [r7, #14]
 80068d6:	8a3b      	ldrh	r3, [r7, #16]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80068dc:	88fa      	ldrh	r2, [r7, #6]
 80068de:	8a79      	ldrh	r1, [r7, #18]
 80068e0:	8a3b      	ldrh	r3, [r7, #16]
 80068e2:	440b      	add	r3, r1
 80068e4:	429a      	cmp	r2, r3
 80068e6:	da49      	bge.n	800697c <ff_wtoupper+0xe8>
			switch (cmd) {
 80068e8:	89fb      	ldrh	r3, [r7, #14]
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d84f      	bhi.n	800698e <ff_wtoupper+0xfa>
 80068ee:	a201      	add	r2, pc, #4	@ (adr r2, 80068f4 <ff_wtoupper+0x60>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006919 	.word	0x08006919
 80068f8:	0800692b 	.word	0x0800692b
 80068fc:	08006941 	.word	0x08006941
 8006900:	08006949 	.word	0x08006949
 8006904:	08006951 	.word	0x08006951
 8006908:	08006959 	.word	0x08006959
 800690c:	08006961 	.word	0x08006961
 8006910:	08006969 	.word	0x08006969
 8006914:	08006971 	.word	0x08006971
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006918:	88fa      	ldrh	r2, [r7, #6]
 800691a:	8a7b      	ldrh	r3, [r7, #18]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	80fb      	strh	r3, [r7, #6]
 8006928:	e027      	b.n	800697a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800692a:	88fa      	ldrh	r2, [r7, #6]
 800692c:	8a7b      	ldrh	r3, [r7, #18]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	b29b      	uxth	r3, r3
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	b29b      	uxth	r3, r3
 8006938:	88fa      	ldrh	r2, [r7, #6]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	80fb      	strh	r3, [r7, #6]
 800693e:	e01c      	b.n	800697a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006940:	88fb      	ldrh	r3, [r7, #6]
 8006942:	3b10      	subs	r3, #16
 8006944:	80fb      	strh	r3, [r7, #6]
 8006946:	e018      	b.n	800697a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006948:	88fb      	ldrh	r3, [r7, #6]
 800694a:	3b20      	subs	r3, #32
 800694c:	80fb      	strh	r3, [r7, #6]
 800694e:	e014      	b.n	800697a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006950:	88fb      	ldrh	r3, [r7, #6]
 8006952:	3b30      	subs	r3, #48	@ 0x30
 8006954:	80fb      	strh	r3, [r7, #6]
 8006956:	e010      	b.n	800697a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	3b1a      	subs	r3, #26
 800695c:	80fb      	strh	r3, [r7, #6]
 800695e:	e00c      	b.n	800697a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006960:	88fb      	ldrh	r3, [r7, #6]
 8006962:	3308      	adds	r3, #8
 8006964:	80fb      	strh	r3, [r7, #6]
 8006966:	e008      	b.n	800697a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006968:	88fb      	ldrh	r3, [r7, #6]
 800696a:	3b50      	subs	r3, #80	@ 0x50
 800696c:	80fb      	strh	r3, [r7, #6]
 800696e:	e004      	b.n	800697a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006970:	88fb      	ldrh	r3, [r7, #6]
 8006972:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8006976:	80fb      	strh	r3, [r7, #6]
 8006978:	bf00      	nop
			}
			break;
 800697a:	e008      	b.n	800698e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800697c:	89fb      	ldrh	r3, [r7, #14]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d195      	bne.n	80068ae <ff_wtoupper+0x1a>
 8006982:	8a3b      	ldrh	r3, [r7, #16]
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4413      	add	r3, r2
 800698a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800698c:	e78f      	b.n	80068ae <ff_wtoupper+0x1a>
			break;
 800698e:	bf00      	nop
	}

	return chr;
 8006990:	88fb      	ldrh	r3, [r7, #6]
}
 8006992:	4618      	mov	r0, r3
 8006994:	371c      	adds	r7, #28
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	08008014 	.word	0x08008014
 80069a4:	08008208 	.word	0x08008208

080069a8 <std>:
 80069a8:	2300      	movs	r3, #0
 80069aa:	b510      	push	{r4, lr}
 80069ac:	4604      	mov	r4, r0
 80069ae:	e9c0 3300 	strd	r3, r3, [r0]
 80069b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069b6:	6083      	str	r3, [r0, #8]
 80069b8:	8181      	strh	r1, [r0, #12]
 80069ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80069bc:	81c2      	strh	r2, [r0, #14]
 80069be:	6183      	str	r3, [r0, #24]
 80069c0:	4619      	mov	r1, r3
 80069c2:	2208      	movs	r2, #8
 80069c4:	305c      	adds	r0, #92	@ 0x5c
 80069c6:	f000 fa19 	bl	8006dfc <memset>
 80069ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006a00 <std+0x58>)
 80069cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80069ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006a04 <std+0x5c>)
 80069d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a08 <std+0x60>)
 80069d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069d6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a0c <std+0x64>)
 80069d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80069da:	4b0d      	ldr	r3, [pc, #52]	@ (8006a10 <std+0x68>)
 80069dc:	6224      	str	r4, [r4, #32]
 80069de:	429c      	cmp	r4, r3
 80069e0:	d006      	beq.n	80069f0 <std+0x48>
 80069e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80069e6:	4294      	cmp	r4, r2
 80069e8:	d002      	beq.n	80069f0 <std+0x48>
 80069ea:	33d0      	adds	r3, #208	@ 0xd0
 80069ec:	429c      	cmp	r4, r3
 80069ee:	d105      	bne.n	80069fc <std+0x54>
 80069f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80069f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f8:	f000 ba78 	b.w	8006eec <__retarget_lock_init_recursive>
 80069fc:	bd10      	pop	{r4, pc}
 80069fe:	bf00      	nop
 8006a00:	08006c4d 	.word	0x08006c4d
 8006a04:	08006c6f 	.word	0x08006c6f
 8006a08:	08006ca7 	.word	0x08006ca7
 8006a0c:	08006ccb 	.word	0x08006ccb
 8006a10:	200027c0 	.word	0x200027c0

08006a14 <stdio_exit_handler>:
 8006a14:	4a02      	ldr	r2, [pc, #8]	@ (8006a20 <stdio_exit_handler+0xc>)
 8006a16:	4903      	ldr	r1, [pc, #12]	@ (8006a24 <stdio_exit_handler+0x10>)
 8006a18:	4803      	ldr	r0, [pc, #12]	@ (8006a28 <stdio_exit_handler+0x14>)
 8006a1a:	f000 b869 	b.w	8006af0 <_fwalk_sglue>
 8006a1e:	bf00      	nop
 8006a20:	20000024 	.word	0x20000024
 8006a24:	08007a3d 	.word	0x08007a3d
 8006a28:	20000034 	.word	0x20000034

08006a2c <cleanup_stdio>:
 8006a2c:	6841      	ldr	r1, [r0, #4]
 8006a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a60 <cleanup_stdio+0x34>)
 8006a30:	4299      	cmp	r1, r3
 8006a32:	b510      	push	{r4, lr}
 8006a34:	4604      	mov	r4, r0
 8006a36:	d001      	beq.n	8006a3c <cleanup_stdio+0x10>
 8006a38:	f001 f800 	bl	8007a3c <_fflush_r>
 8006a3c:	68a1      	ldr	r1, [r4, #8]
 8006a3e:	4b09      	ldr	r3, [pc, #36]	@ (8006a64 <cleanup_stdio+0x38>)
 8006a40:	4299      	cmp	r1, r3
 8006a42:	d002      	beq.n	8006a4a <cleanup_stdio+0x1e>
 8006a44:	4620      	mov	r0, r4
 8006a46:	f000 fff9 	bl	8007a3c <_fflush_r>
 8006a4a:	68e1      	ldr	r1, [r4, #12]
 8006a4c:	4b06      	ldr	r3, [pc, #24]	@ (8006a68 <cleanup_stdio+0x3c>)
 8006a4e:	4299      	cmp	r1, r3
 8006a50:	d004      	beq.n	8006a5c <cleanup_stdio+0x30>
 8006a52:	4620      	mov	r0, r4
 8006a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a58:	f000 bff0 	b.w	8007a3c <_fflush_r>
 8006a5c:	bd10      	pop	{r4, pc}
 8006a5e:	bf00      	nop
 8006a60:	200027c0 	.word	0x200027c0
 8006a64:	20002828 	.word	0x20002828
 8006a68:	20002890 	.word	0x20002890

08006a6c <global_stdio_init.part.0>:
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a9c <global_stdio_init.part.0+0x30>)
 8006a70:	4c0b      	ldr	r4, [pc, #44]	@ (8006aa0 <global_stdio_init.part.0+0x34>)
 8006a72:	4a0c      	ldr	r2, [pc, #48]	@ (8006aa4 <global_stdio_init.part.0+0x38>)
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	4620      	mov	r0, r4
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2104      	movs	r1, #4
 8006a7c:	f7ff ff94 	bl	80069a8 <std>
 8006a80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a84:	2201      	movs	r2, #1
 8006a86:	2109      	movs	r1, #9
 8006a88:	f7ff ff8e 	bl	80069a8 <std>
 8006a8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a90:	2202      	movs	r2, #2
 8006a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a96:	2112      	movs	r1, #18
 8006a98:	f7ff bf86 	b.w	80069a8 <std>
 8006a9c:	200028f8 	.word	0x200028f8
 8006aa0:	200027c0 	.word	0x200027c0
 8006aa4:	08006a15 	.word	0x08006a15

08006aa8 <__sfp_lock_acquire>:
 8006aa8:	4801      	ldr	r0, [pc, #4]	@ (8006ab0 <__sfp_lock_acquire+0x8>)
 8006aaa:	f000 ba20 	b.w	8006eee <__retarget_lock_acquire_recursive>
 8006aae:	bf00      	nop
 8006ab0:	20002901 	.word	0x20002901

08006ab4 <__sfp_lock_release>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	@ (8006abc <__sfp_lock_release+0x8>)
 8006ab6:	f000 ba1b 	b.w	8006ef0 <__retarget_lock_release_recursive>
 8006aba:	bf00      	nop
 8006abc:	20002901 	.word	0x20002901

08006ac0 <__sinit>:
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	f7ff fff0 	bl	8006aa8 <__sfp_lock_acquire>
 8006ac8:	6a23      	ldr	r3, [r4, #32]
 8006aca:	b11b      	cbz	r3, 8006ad4 <__sinit+0x14>
 8006acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ad0:	f7ff bff0 	b.w	8006ab4 <__sfp_lock_release>
 8006ad4:	4b04      	ldr	r3, [pc, #16]	@ (8006ae8 <__sinit+0x28>)
 8006ad6:	6223      	str	r3, [r4, #32]
 8006ad8:	4b04      	ldr	r3, [pc, #16]	@ (8006aec <__sinit+0x2c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1f5      	bne.n	8006acc <__sinit+0xc>
 8006ae0:	f7ff ffc4 	bl	8006a6c <global_stdio_init.part.0>
 8006ae4:	e7f2      	b.n	8006acc <__sinit+0xc>
 8006ae6:	bf00      	nop
 8006ae8:	08006a2d 	.word	0x08006a2d
 8006aec:	200028f8 	.word	0x200028f8

08006af0 <_fwalk_sglue>:
 8006af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af4:	4607      	mov	r7, r0
 8006af6:	4688      	mov	r8, r1
 8006af8:	4614      	mov	r4, r2
 8006afa:	2600      	movs	r6, #0
 8006afc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b00:	f1b9 0901 	subs.w	r9, r9, #1
 8006b04:	d505      	bpl.n	8006b12 <_fwalk_sglue+0x22>
 8006b06:	6824      	ldr	r4, [r4, #0]
 8006b08:	2c00      	cmp	r4, #0
 8006b0a:	d1f7      	bne.n	8006afc <_fwalk_sglue+0xc>
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b12:	89ab      	ldrh	r3, [r5, #12]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d907      	bls.n	8006b28 <_fwalk_sglue+0x38>
 8006b18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	d003      	beq.n	8006b28 <_fwalk_sglue+0x38>
 8006b20:	4629      	mov	r1, r5
 8006b22:	4638      	mov	r0, r7
 8006b24:	47c0      	blx	r8
 8006b26:	4306      	orrs	r6, r0
 8006b28:	3568      	adds	r5, #104	@ 0x68
 8006b2a:	e7e9      	b.n	8006b00 <_fwalk_sglue+0x10>

08006b2c <iprintf>:
 8006b2c:	b40f      	push	{r0, r1, r2, r3}
 8006b2e:	b507      	push	{r0, r1, r2, lr}
 8006b30:	4906      	ldr	r1, [pc, #24]	@ (8006b4c <iprintf+0x20>)
 8006b32:	ab04      	add	r3, sp, #16
 8006b34:	6808      	ldr	r0, [r1, #0]
 8006b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b3a:	6881      	ldr	r1, [r0, #8]
 8006b3c:	9301      	str	r3, [sp, #4]
 8006b3e:	f000 fc53 	bl	80073e8 <_vfiprintf_r>
 8006b42:	b003      	add	sp, #12
 8006b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b48:	b004      	add	sp, #16
 8006b4a:	4770      	bx	lr
 8006b4c:	20000030 	.word	0x20000030

08006b50 <_puts_r>:
 8006b50:	6a03      	ldr	r3, [r0, #32]
 8006b52:	b570      	push	{r4, r5, r6, lr}
 8006b54:	6884      	ldr	r4, [r0, #8]
 8006b56:	4605      	mov	r5, r0
 8006b58:	460e      	mov	r6, r1
 8006b5a:	b90b      	cbnz	r3, 8006b60 <_puts_r+0x10>
 8006b5c:	f7ff ffb0 	bl	8006ac0 <__sinit>
 8006b60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b62:	07db      	lsls	r3, r3, #31
 8006b64:	d405      	bmi.n	8006b72 <_puts_r+0x22>
 8006b66:	89a3      	ldrh	r3, [r4, #12]
 8006b68:	0598      	lsls	r0, r3, #22
 8006b6a:	d402      	bmi.n	8006b72 <_puts_r+0x22>
 8006b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b6e:	f000 f9be 	bl	8006eee <__retarget_lock_acquire_recursive>
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	0719      	lsls	r1, r3, #28
 8006b76:	d502      	bpl.n	8006b7e <_puts_r+0x2e>
 8006b78:	6923      	ldr	r3, [r4, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d135      	bne.n	8006bea <_puts_r+0x9a>
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4628      	mov	r0, r5
 8006b82:	f000 f8e5 	bl	8006d50 <__swsetup_r>
 8006b86:	b380      	cbz	r0, 8006bea <_puts_r+0x9a>
 8006b88:	f04f 35ff 	mov.w	r5, #4294967295
 8006b8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b8e:	07da      	lsls	r2, r3, #31
 8006b90:	d405      	bmi.n	8006b9e <_puts_r+0x4e>
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	059b      	lsls	r3, r3, #22
 8006b96:	d402      	bmi.n	8006b9e <_puts_r+0x4e>
 8006b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b9a:	f000 f9a9 	bl	8006ef0 <__retarget_lock_release_recursive>
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	bd70      	pop	{r4, r5, r6, pc}
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	da04      	bge.n	8006bb0 <_puts_r+0x60>
 8006ba6:	69a2      	ldr	r2, [r4, #24]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	dc17      	bgt.n	8006bdc <_puts_r+0x8c>
 8006bac:	290a      	cmp	r1, #10
 8006bae:	d015      	beq.n	8006bdc <_puts_r+0x8c>
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	6022      	str	r2, [r4, #0]
 8006bb6:	7019      	strb	r1, [r3, #0]
 8006bb8:	68a3      	ldr	r3, [r4, #8]
 8006bba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	60a3      	str	r3, [r4, #8]
 8006bc2:	2900      	cmp	r1, #0
 8006bc4:	d1ed      	bne.n	8006ba2 <_puts_r+0x52>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	da11      	bge.n	8006bee <_puts_r+0x9e>
 8006bca:	4622      	mov	r2, r4
 8006bcc:	210a      	movs	r1, #10
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 f87f 	bl	8006cd2 <__swbuf_r>
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d0d7      	beq.n	8006b88 <_puts_r+0x38>
 8006bd8:	250a      	movs	r5, #10
 8006bda:	e7d7      	b.n	8006b8c <_puts_r+0x3c>
 8006bdc:	4622      	mov	r2, r4
 8006bde:	4628      	mov	r0, r5
 8006be0:	f000 f877 	bl	8006cd2 <__swbuf_r>
 8006be4:	3001      	adds	r0, #1
 8006be6:	d1e7      	bne.n	8006bb8 <_puts_r+0x68>
 8006be8:	e7ce      	b.n	8006b88 <_puts_r+0x38>
 8006bea:	3e01      	subs	r6, #1
 8006bec:	e7e4      	b.n	8006bb8 <_puts_r+0x68>
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	6022      	str	r2, [r4, #0]
 8006bf4:	220a      	movs	r2, #10
 8006bf6:	701a      	strb	r2, [r3, #0]
 8006bf8:	e7ee      	b.n	8006bd8 <_puts_r+0x88>
	...

08006bfc <puts>:
 8006bfc:	4b02      	ldr	r3, [pc, #8]	@ (8006c08 <puts+0xc>)
 8006bfe:	4601      	mov	r1, r0
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	f7ff bfa5 	b.w	8006b50 <_puts_r>
 8006c06:	bf00      	nop
 8006c08:	20000030 	.word	0x20000030

08006c0c <siprintf>:
 8006c0c:	b40e      	push	{r1, r2, r3}
 8006c0e:	b500      	push	{lr}
 8006c10:	b09c      	sub	sp, #112	@ 0x70
 8006c12:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c14:	9002      	str	r0, [sp, #8]
 8006c16:	9006      	str	r0, [sp, #24]
 8006c18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c1c:	4809      	ldr	r0, [pc, #36]	@ (8006c44 <siprintf+0x38>)
 8006c1e:	9107      	str	r1, [sp, #28]
 8006c20:	9104      	str	r1, [sp, #16]
 8006c22:	4909      	ldr	r1, [pc, #36]	@ (8006c48 <siprintf+0x3c>)
 8006c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c28:	9105      	str	r1, [sp, #20]
 8006c2a:	6800      	ldr	r0, [r0, #0]
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	a902      	add	r1, sp, #8
 8006c30:	f000 fab4 	bl	800719c <_svfiprintf_r>
 8006c34:	9b02      	ldr	r3, [sp, #8]
 8006c36:	2200      	movs	r2, #0
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	b01c      	add	sp, #112	@ 0x70
 8006c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c40:	b003      	add	sp, #12
 8006c42:	4770      	bx	lr
 8006c44:	20000030 	.word	0x20000030
 8006c48:	ffff0208 	.word	0xffff0208

08006c4c <__sread>:
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	460c      	mov	r4, r1
 8006c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c54:	f000 f8fc 	bl	8006e50 <_read_r>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	bfab      	itete	ge
 8006c5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c60:	181b      	addge	r3, r3, r0
 8006c62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c66:	bfac      	ite	ge
 8006c68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c6a:	81a3      	strhlt	r3, [r4, #12]
 8006c6c:	bd10      	pop	{r4, pc}

08006c6e <__swrite>:
 8006c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c72:	461f      	mov	r7, r3
 8006c74:	898b      	ldrh	r3, [r1, #12]
 8006c76:	05db      	lsls	r3, r3, #23
 8006c78:	4605      	mov	r5, r0
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	4616      	mov	r6, r2
 8006c7e:	d505      	bpl.n	8006c8c <__swrite+0x1e>
 8006c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c84:	2302      	movs	r3, #2
 8006c86:	2200      	movs	r2, #0
 8006c88:	f000 f8d0 	bl	8006e2c <_lseek_r>
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c96:	81a3      	strh	r3, [r4, #12]
 8006c98:	4632      	mov	r2, r6
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca2:	f000 b8e7 	b.w	8006e74 <_write_r>

08006ca6 <__sseek>:
 8006ca6:	b510      	push	{r4, lr}
 8006ca8:	460c      	mov	r4, r1
 8006caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cae:	f000 f8bd 	bl	8006e2c <_lseek_r>
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	bf15      	itete	ne
 8006cb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cc2:	81a3      	strheq	r3, [r4, #12]
 8006cc4:	bf18      	it	ne
 8006cc6:	81a3      	strhne	r3, [r4, #12]
 8006cc8:	bd10      	pop	{r4, pc}

08006cca <__sclose>:
 8006cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cce:	f000 b89d 	b.w	8006e0c <_close_r>

08006cd2 <__swbuf_r>:
 8006cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd4:	460e      	mov	r6, r1
 8006cd6:	4614      	mov	r4, r2
 8006cd8:	4605      	mov	r5, r0
 8006cda:	b118      	cbz	r0, 8006ce4 <__swbuf_r+0x12>
 8006cdc:	6a03      	ldr	r3, [r0, #32]
 8006cde:	b90b      	cbnz	r3, 8006ce4 <__swbuf_r+0x12>
 8006ce0:	f7ff feee 	bl	8006ac0 <__sinit>
 8006ce4:	69a3      	ldr	r3, [r4, #24]
 8006ce6:	60a3      	str	r3, [r4, #8]
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	071a      	lsls	r2, r3, #28
 8006cec:	d501      	bpl.n	8006cf2 <__swbuf_r+0x20>
 8006cee:	6923      	ldr	r3, [r4, #16]
 8006cf0:	b943      	cbnz	r3, 8006d04 <__swbuf_r+0x32>
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	f000 f82b 	bl	8006d50 <__swsetup_r>
 8006cfa:	b118      	cbz	r0, 8006d04 <__swbuf_r+0x32>
 8006cfc:	f04f 37ff 	mov.w	r7, #4294967295
 8006d00:	4638      	mov	r0, r7
 8006d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	6922      	ldr	r2, [r4, #16]
 8006d08:	1a98      	subs	r0, r3, r2
 8006d0a:	6963      	ldr	r3, [r4, #20]
 8006d0c:	b2f6      	uxtb	r6, r6
 8006d0e:	4283      	cmp	r3, r0
 8006d10:	4637      	mov	r7, r6
 8006d12:	dc05      	bgt.n	8006d20 <__swbuf_r+0x4e>
 8006d14:	4621      	mov	r1, r4
 8006d16:	4628      	mov	r0, r5
 8006d18:	f000 fe90 	bl	8007a3c <_fflush_r>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d1ed      	bne.n	8006cfc <__swbuf_r+0x2a>
 8006d20:	68a3      	ldr	r3, [r4, #8]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	60a3      	str	r3, [r4, #8]
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	6022      	str	r2, [r4, #0]
 8006d2c:	701e      	strb	r6, [r3, #0]
 8006d2e:	6962      	ldr	r2, [r4, #20]
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d004      	beq.n	8006d40 <__swbuf_r+0x6e>
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	07db      	lsls	r3, r3, #31
 8006d3a:	d5e1      	bpl.n	8006d00 <__swbuf_r+0x2e>
 8006d3c:	2e0a      	cmp	r6, #10
 8006d3e:	d1df      	bne.n	8006d00 <__swbuf_r+0x2e>
 8006d40:	4621      	mov	r1, r4
 8006d42:	4628      	mov	r0, r5
 8006d44:	f000 fe7a 	bl	8007a3c <_fflush_r>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d0d9      	beq.n	8006d00 <__swbuf_r+0x2e>
 8006d4c:	e7d6      	b.n	8006cfc <__swbuf_r+0x2a>
	...

08006d50 <__swsetup_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	4b29      	ldr	r3, [pc, #164]	@ (8006df8 <__swsetup_r+0xa8>)
 8006d54:	4605      	mov	r5, r0
 8006d56:	6818      	ldr	r0, [r3, #0]
 8006d58:	460c      	mov	r4, r1
 8006d5a:	b118      	cbz	r0, 8006d64 <__swsetup_r+0x14>
 8006d5c:	6a03      	ldr	r3, [r0, #32]
 8006d5e:	b90b      	cbnz	r3, 8006d64 <__swsetup_r+0x14>
 8006d60:	f7ff feae 	bl	8006ac0 <__sinit>
 8006d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d68:	0719      	lsls	r1, r3, #28
 8006d6a:	d422      	bmi.n	8006db2 <__swsetup_r+0x62>
 8006d6c:	06da      	lsls	r2, r3, #27
 8006d6e:	d407      	bmi.n	8006d80 <__swsetup_r+0x30>
 8006d70:	2209      	movs	r2, #9
 8006d72:	602a      	str	r2, [r5, #0]
 8006d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d78:	81a3      	strh	r3, [r4, #12]
 8006d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7e:	e033      	b.n	8006de8 <__swsetup_r+0x98>
 8006d80:	0758      	lsls	r0, r3, #29
 8006d82:	d512      	bpl.n	8006daa <__swsetup_r+0x5a>
 8006d84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d86:	b141      	cbz	r1, 8006d9a <__swsetup_r+0x4a>
 8006d88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d8c:	4299      	cmp	r1, r3
 8006d8e:	d002      	beq.n	8006d96 <__swsetup_r+0x46>
 8006d90:	4628      	mov	r0, r5
 8006d92:	f000 f8af 	bl	8006ef4 <_free_r>
 8006d96:	2300      	movs	r3, #0
 8006d98:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006da0:	81a3      	strh	r3, [r4, #12]
 8006da2:	2300      	movs	r3, #0
 8006da4:	6063      	str	r3, [r4, #4]
 8006da6:	6923      	ldr	r3, [r4, #16]
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	f043 0308 	orr.w	r3, r3, #8
 8006db0:	81a3      	strh	r3, [r4, #12]
 8006db2:	6923      	ldr	r3, [r4, #16]
 8006db4:	b94b      	cbnz	r3, 8006dca <__swsetup_r+0x7a>
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dc0:	d003      	beq.n	8006dca <__swsetup_r+0x7a>
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f000 fe87 	bl	8007ad8 <__smakebuf_r>
 8006dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dce:	f013 0201 	ands.w	r2, r3, #1
 8006dd2:	d00a      	beq.n	8006dea <__swsetup_r+0x9a>
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	60a2      	str	r2, [r4, #8]
 8006dd8:	6962      	ldr	r2, [r4, #20]
 8006dda:	4252      	negs	r2, r2
 8006ddc:	61a2      	str	r2, [r4, #24]
 8006dde:	6922      	ldr	r2, [r4, #16]
 8006de0:	b942      	cbnz	r2, 8006df4 <__swsetup_r+0xa4>
 8006de2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006de6:	d1c5      	bne.n	8006d74 <__swsetup_r+0x24>
 8006de8:	bd38      	pop	{r3, r4, r5, pc}
 8006dea:	0799      	lsls	r1, r3, #30
 8006dec:	bf58      	it	pl
 8006dee:	6962      	ldrpl	r2, [r4, #20]
 8006df0:	60a2      	str	r2, [r4, #8]
 8006df2:	e7f4      	b.n	8006dde <__swsetup_r+0x8e>
 8006df4:	2000      	movs	r0, #0
 8006df6:	e7f7      	b.n	8006de8 <__swsetup_r+0x98>
 8006df8:	20000030 	.word	0x20000030

08006dfc <memset>:
 8006dfc:	4402      	add	r2, r0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d100      	bne.n	8006e06 <memset+0xa>
 8006e04:	4770      	bx	lr
 8006e06:	f803 1b01 	strb.w	r1, [r3], #1
 8006e0a:	e7f9      	b.n	8006e00 <memset+0x4>

08006e0c <_close_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	4d06      	ldr	r5, [pc, #24]	@ (8006e28 <_close_r+0x1c>)
 8006e10:	2300      	movs	r3, #0
 8006e12:	4604      	mov	r4, r0
 8006e14:	4608      	mov	r0, r1
 8006e16:	602b      	str	r3, [r5, #0]
 8006e18:	f7fa fe95 	bl	8001b46 <_close>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d102      	bne.n	8006e26 <_close_r+0x1a>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	b103      	cbz	r3, 8006e26 <_close_r+0x1a>
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	200028fc 	.word	0x200028fc

08006e2c <_lseek_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4d07      	ldr	r5, [pc, #28]	@ (8006e4c <_lseek_r+0x20>)
 8006e30:	4604      	mov	r4, r0
 8006e32:	4608      	mov	r0, r1
 8006e34:	4611      	mov	r1, r2
 8006e36:	2200      	movs	r2, #0
 8006e38:	602a      	str	r2, [r5, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f7fa feaa 	bl	8001b94 <_lseek>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d102      	bne.n	8006e4a <_lseek_r+0x1e>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	b103      	cbz	r3, 8006e4a <_lseek_r+0x1e>
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	200028fc 	.word	0x200028fc

08006e50 <_read_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4d07      	ldr	r5, [pc, #28]	@ (8006e70 <_read_r+0x20>)
 8006e54:	4604      	mov	r4, r0
 8006e56:	4608      	mov	r0, r1
 8006e58:	4611      	mov	r1, r2
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	602a      	str	r2, [r5, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f7fa fe38 	bl	8001ad4 <_read>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_read_r+0x1e>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_read_r+0x1e>
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	200028fc 	.word	0x200028fc

08006e74 <_write_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4d07      	ldr	r5, [pc, #28]	@ (8006e94 <_write_r+0x20>)
 8006e78:	4604      	mov	r4, r0
 8006e7a:	4608      	mov	r0, r1
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	2200      	movs	r2, #0
 8006e80:	602a      	str	r2, [r5, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	f7fa fe43 	bl	8001b0e <_write>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	d102      	bne.n	8006e92 <_write_r+0x1e>
 8006e8c:	682b      	ldr	r3, [r5, #0]
 8006e8e:	b103      	cbz	r3, 8006e92 <_write_r+0x1e>
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	bd38      	pop	{r3, r4, r5, pc}
 8006e94:	200028fc 	.word	0x200028fc

08006e98 <__errno>:
 8006e98:	4b01      	ldr	r3, [pc, #4]	@ (8006ea0 <__errno+0x8>)
 8006e9a:	6818      	ldr	r0, [r3, #0]
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	20000030 	.word	0x20000030

08006ea4 <__libc_init_array>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	4d0d      	ldr	r5, [pc, #52]	@ (8006edc <__libc_init_array+0x38>)
 8006ea8:	4c0d      	ldr	r4, [pc, #52]	@ (8006ee0 <__libc_init_array+0x3c>)
 8006eaa:	1b64      	subs	r4, r4, r5
 8006eac:	10a4      	asrs	r4, r4, #2
 8006eae:	2600      	movs	r6, #0
 8006eb0:	42a6      	cmp	r6, r4
 8006eb2:	d109      	bne.n	8006ec8 <__libc_init_array+0x24>
 8006eb4:	4d0b      	ldr	r5, [pc, #44]	@ (8006ee4 <__libc_init_array+0x40>)
 8006eb6:	4c0c      	ldr	r4, [pc, #48]	@ (8006ee8 <__libc_init_array+0x44>)
 8006eb8:	f000 feda 	bl	8007c70 <_init>
 8006ebc:	1b64      	subs	r4, r4, r5
 8006ebe:	10a4      	asrs	r4, r4, #2
 8006ec0:	2600      	movs	r6, #0
 8006ec2:	42a6      	cmp	r6, r4
 8006ec4:	d105      	bne.n	8006ed2 <__libc_init_array+0x2e>
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ecc:	4798      	blx	r3
 8006ece:	3601      	adds	r6, #1
 8006ed0:	e7ee      	b.n	8006eb0 <__libc_init_array+0xc>
 8006ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed6:	4798      	blx	r3
 8006ed8:	3601      	adds	r6, #1
 8006eda:	e7f2      	b.n	8006ec2 <__libc_init_array+0x1e>
 8006edc:	08008300 	.word	0x08008300
 8006ee0:	08008300 	.word	0x08008300
 8006ee4:	08008300 	.word	0x08008300
 8006ee8:	08008304 	.word	0x08008304

08006eec <__retarget_lock_init_recursive>:
 8006eec:	4770      	bx	lr

08006eee <__retarget_lock_acquire_recursive>:
 8006eee:	4770      	bx	lr

08006ef0 <__retarget_lock_release_recursive>:
 8006ef0:	4770      	bx	lr
	...

08006ef4 <_free_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	2900      	cmp	r1, #0
 8006efa:	d041      	beq.n	8006f80 <_free_r+0x8c>
 8006efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f00:	1f0c      	subs	r4, r1, #4
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	bfb8      	it	lt
 8006f06:	18e4      	addlt	r4, r4, r3
 8006f08:	f000 f8e0 	bl	80070cc <__malloc_lock>
 8006f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006f84 <_free_r+0x90>)
 8006f0e:	6813      	ldr	r3, [r2, #0]
 8006f10:	b933      	cbnz	r3, 8006f20 <_free_r+0x2c>
 8006f12:	6063      	str	r3, [r4, #4]
 8006f14:	6014      	str	r4, [r2, #0]
 8006f16:	4628      	mov	r0, r5
 8006f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f1c:	f000 b8dc 	b.w	80070d8 <__malloc_unlock>
 8006f20:	42a3      	cmp	r3, r4
 8006f22:	d908      	bls.n	8006f36 <_free_r+0x42>
 8006f24:	6820      	ldr	r0, [r4, #0]
 8006f26:	1821      	adds	r1, r4, r0
 8006f28:	428b      	cmp	r3, r1
 8006f2a:	bf01      	itttt	eq
 8006f2c:	6819      	ldreq	r1, [r3, #0]
 8006f2e:	685b      	ldreq	r3, [r3, #4]
 8006f30:	1809      	addeq	r1, r1, r0
 8006f32:	6021      	streq	r1, [r4, #0]
 8006f34:	e7ed      	b.n	8006f12 <_free_r+0x1e>
 8006f36:	461a      	mov	r2, r3
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	b10b      	cbz	r3, 8006f40 <_free_r+0x4c>
 8006f3c:	42a3      	cmp	r3, r4
 8006f3e:	d9fa      	bls.n	8006f36 <_free_r+0x42>
 8006f40:	6811      	ldr	r1, [r2, #0]
 8006f42:	1850      	adds	r0, r2, r1
 8006f44:	42a0      	cmp	r0, r4
 8006f46:	d10b      	bne.n	8006f60 <_free_r+0x6c>
 8006f48:	6820      	ldr	r0, [r4, #0]
 8006f4a:	4401      	add	r1, r0
 8006f4c:	1850      	adds	r0, r2, r1
 8006f4e:	4283      	cmp	r3, r0
 8006f50:	6011      	str	r1, [r2, #0]
 8006f52:	d1e0      	bne.n	8006f16 <_free_r+0x22>
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	6053      	str	r3, [r2, #4]
 8006f5a:	4408      	add	r0, r1
 8006f5c:	6010      	str	r0, [r2, #0]
 8006f5e:	e7da      	b.n	8006f16 <_free_r+0x22>
 8006f60:	d902      	bls.n	8006f68 <_free_r+0x74>
 8006f62:	230c      	movs	r3, #12
 8006f64:	602b      	str	r3, [r5, #0]
 8006f66:	e7d6      	b.n	8006f16 <_free_r+0x22>
 8006f68:	6820      	ldr	r0, [r4, #0]
 8006f6a:	1821      	adds	r1, r4, r0
 8006f6c:	428b      	cmp	r3, r1
 8006f6e:	bf04      	itt	eq
 8006f70:	6819      	ldreq	r1, [r3, #0]
 8006f72:	685b      	ldreq	r3, [r3, #4]
 8006f74:	6063      	str	r3, [r4, #4]
 8006f76:	bf04      	itt	eq
 8006f78:	1809      	addeq	r1, r1, r0
 8006f7a:	6021      	streq	r1, [r4, #0]
 8006f7c:	6054      	str	r4, [r2, #4]
 8006f7e:	e7ca      	b.n	8006f16 <_free_r+0x22>
 8006f80:	bd38      	pop	{r3, r4, r5, pc}
 8006f82:	bf00      	nop
 8006f84:	20002908 	.word	0x20002908

08006f88 <sbrk_aligned>:
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	4e0f      	ldr	r6, [pc, #60]	@ (8006fc8 <sbrk_aligned+0x40>)
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	6831      	ldr	r1, [r6, #0]
 8006f90:	4605      	mov	r5, r0
 8006f92:	b911      	cbnz	r1, 8006f9a <sbrk_aligned+0x12>
 8006f94:	f000 fe18 	bl	8007bc8 <_sbrk_r>
 8006f98:	6030      	str	r0, [r6, #0]
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	f000 fe13 	bl	8007bc8 <_sbrk_r>
 8006fa2:	1c43      	adds	r3, r0, #1
 8006fa4:	d103      	bne.n	8006fae <sbrk_aligned+0x26>
 8006fa6:	f04f 34ff 	mov.w	r4, #4294967295
 8006faa:	4620      	mov	r0, r4
 8006fac:	bd70      	pop	{r4, r5, r6, pc}
 8006fae:	1cc4      	adds	r4, r0, #3
 8006fb0:	f024 0403 	bic.w	r4, r4, #3
 8006fb4:	42a0      	cmp	r0, r4
 8006fb6:	d0f8      	beq.n	8006faa <sbrk_aligned+0x22>
 8006fb8:	1a21      	subs	r1, r4, r0
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f000 fe04 	bl	8007bc8 <_sbrk_r>
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d1f2      	bne.n	8006faa <sbrk_aligned+0x22>
 8006fc4:	e7ef      	b.n	8006fa6 <sbrk_aligned+0x1e>
 8006fc6:	bf00      	nop
 8006fc8:	20002904 	.word	0x20002904

08006fcc <_malloc_r>:
 8006fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd0:	1ccd      	adds	r5, r1, #3
 8006fd2:	f025 0503 	bic.w	r5, r5, #3
 8006fd6:	3508      	adds	r5, #8
 8006fd8:	2d0c      	cmp	r5, #12
 8006fda:	bf38      	it	cc
 8006fdc:	250c      	movcc	r5, #12
 8006fde:	2d00      	cmp	r5, #0
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	db01      	blt.n	8006fe8 <_malloc_r+0x1c>
 8006fe4:	42a9      	cmp	r1, r5
 8006fe6:	d904      	bls.n	8006ff2 <_malloc_r+0x26>
 8006fe8:	230c      	movs	r3, #12
 8006fea:	6033      	str	r3, [r6, #0]
 8006fec:	2000      	movs	r0, #0
 8006fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ff2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070c8 <_malloc_r+0xfc>
 8006ff6:	f000 f869 	bl	80070cc <__malloc_lock>
 8006ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8006ffe:	461c      	mov	r4, r3
 8007000:	bb44      	cbnz	r4, 8007054 <_malloc_r+0x88>
 8007002:	4629      	mov	r1, r5
 8007004:	4630      	mov	r0, r6
 8007006:	f7ff ffbf 	bl	8006f88 <sbrk_aligned>
 800700a:	1c43      	adds	r3, r0, #1
 800700c:	4604      	mov	r4, r0
 800700e:	d158      	bne.n	80070c2 <_malloc_r+0xf6>
 8007010:	f8d8 4000 	ldr.w	r4, [r8]
 8007014:	4627      	mov	r7, r4
 8007016:	2f00      	cmp	r7, #0
 8007018:	d143      	bne.n	80070a2 <_malloc_r+0xd6>
 800701a:	2c00      	cmp	r4, #0
 800701c:	d04b      	beq.n	80070b6 <_malloc_r+0xea>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	4639      	mov	r1, r7
 8007022:	4630      	mov	r0, r6
 8007024:	eb04 0903 	add.w	r9, r4, r3
 8007028:	f000 fdce 	bl	8007bc8 <_sbrk_r>
 800702c:	4581      	cmp	r9, r0
 800702e:	d142      	bne.n	80070b6 <_malloc_r+0xea>
 8007030:	6821      	ldr	r1, [r4, #0]
 8007032:	1a6d      	subs	r5, r5, r1
 8007034:	4629      	mov	r1, r5
 8007036:	4630      	mov	r0, r6
 8007038:	f7ff ffa6 	bl	8006f88 <sbrk_aligned>
 800703c:	3001      	adds	r0, #1
 800703e:	d03a      	beq.n	80070b6 <_malloc_r+0xea>
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	442b      	add	r3, r5
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	f8d8 3000 	ldr.w	r3, [r8]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	bb62      	cbnz	r2, 80070a8 <_malloc_r+0xdc>
 800704e:	f8c8 7000 	str.w	r7, [r8]
 8007052:	e00f      	b.n	8007074 <_malloc_r+0xa8>
 8007054:	6822      	ldr	r2, [r4, #0]
 8007056:	1b52      	subs	r2, r2, r5
 8007058:	d420      	bmi.n	800709c <_malloc_r+0xd0>
 800705a:	2a0b      	cmp	r2, #11
 800705c:	d917      	bls.n	800708e <_malloc_r+0xc2>
 800705e:	1961      	adds	r1, r4, r5
 8007060:	42a3      	cmp	r3, r4
 8007062:	6025      	str	r5, [r4, #0]
 8007064:	bf18      	it	ne
 8007066:	6059      	strne	r1, [r3, #4]
 8007068:	6863      	ldr	r3, [r4, #4]
 800706a:	bf08      	it	eq
 800706c:	f8c8 1000 	streq.w	r1, [r8]
 8007070:	5162      	str	r2, [r4, r5]
 8007072:	604b      	str	r3, [r1, #4]
 8007074:	4630      	mov	r0, r6
 8007076:	f000 f82f 	bl	80070d8 <__malloc_unlock>
 800707a:	f104 000b 	add.w	r0, r4, #11
 800707e:	1d23      	adds	r3, r4, #4
 8007080:	f020 0007 	bic.w	r0, r0, #7
 8007084:	1ac2      	subs	r2, r0, r3
 8007086:	bf1c      	itt	ne
 8007088:	1a1b      	subne	r3, r3, r0
 800708a:	50a3      	strne	r3, [r4, r2]
 800708c:	e7af      	b.n	8006fee <_malloc_r+0x22>
 800708e:	6862      	ldr	r2, [r4, #4]
 8007090:	42a3      	cmp	r3, r4
 8007092:	bf0c      	ite	eq
 8007094:	f8c8 2000 	streq.w	r2, [r8]
 8007098:	605a      	strne	r2, [r3, #4]
 800709a:	e7eb      	b.n	8007074 <_malloc_r+0xa8>
 800709c:	4623      	mov	r3, r4
 800709e:	6864      	ldr	r4, [r4, #4]
 80070a0:	e7ae      	b.n	8007000 <_malloc_r+0x34>
 80070a2:	463c      	mov	r4, r7
 80070a4:	687f      	ldr	r7, [r7, #4]
 80070a6:	e7b6      	b.n	8007016 <_malloc_r+0x4a>
 80070a8:	461a      	mov	r2, r3
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	d1fb      	bne.n	80070a8 <_malloc_r+0xdc>
 80070b0:	2300      	movs	r3, #0
 80070b2:	6053      	str	r3, [r2, #4]
 80070b4:	e7de      	b.n	8007074 <_malloc_r+0xa8>
 80070b6:	230c      	movs	r3, #12
 80070b8:	6033      	str	r3, [r6, #0]
 80070ba:	4630      	mov	r0, r6
 80070bc:	f000 f80c 	bl	80070d8 <__malloc_unlock>
 80070c0:	e794      	b.n	8006fec <_malloc_r+0x20>
 80070c2:	6005      	str	r5, [r0, #0]
 80070c4:	e7d6      	b.n	8007074 <_malloc_r+0xa8>
 80070c6:	bf00      	nop
 80070c8:	20002908 	.word	0x20002908

080070cc <__malloc_lock>:
 80070cc:	4801      	ldr	r0, [pc, #4]	@ (80070d4 <__malloc_lock+0x8>)
 80070ce:	f7ff bf0e 	b.w	8006eee <__retarget_lock_acquire_recursive>
 80070d2:	bf00      	nop
 80070d4:	20002900 	.word	0x20002900

080070d8 <__malloc_unlock>:
 80070d8:	4801      	ldr	r0, [pc, #4]	@ (80070e0 <__malloc_unlock+0x8>)
 80070da:	f7ff bf09 	b.w	8006ef0 <__retarget_lock_release_recursive>
 80070de:	bf00      	nop
 80070e0:	20002900 	.word	0x20002900

080070e4 <__ssputs_r>:
 80070e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e8:	688e      	ldr	r6, [r1, #8]
 80070ea:	461f      	mov	r7, r3
 80070ec:	42be      	cmp	r6, r7
 80070ee:	680b      	ldr	r3, [r1, #0]
 80070f0:	4682      	mov	sl, r0
 80070f2:	460c      	mov	r4, r1
 80070f4:	4690      	mov	r8, r2
 80070f6:	d82d      	bhi.n	8007154 <__ssputs_r+0x70>
 80070f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007100:	d026      	beq.n	8007150 <__ssputs_r+0x6c>
 8007102:	6965      	ldr	r5, [r4, #20]
 8007104:	6909      	ldr	r1, [r1, #16]
 8007106:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800710a:	eba3 0901 	sub.w	r9, r3, r1
 800710e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007112:	1c7b      	adds	r3, r7, #1
 8007114:	444b      	add	r3, r9
 8007116:	106d      	asrs	r5, r5, #1
 8007118:	429d      	cmp	r5, r3
 800711a:	bf38      	it	cc
 800711c:	461d      	movcc	r5, r3
 800711e:	0553      	lsls	r3, r2, #21
 8007120:	d527      	bpl.n	8007172 <__ssputs_r+0x8e>
 8007122:	4629      	mov	r1, r5
 8007124:	f7ff ff52 	bl	8006fcc <_malloc_r>
 8007128:	4606      	mov	r6, r0
 800712a:	b360      	cbz	r0, 8007186 <__ssputs_r+0xa2>
 800712c:	6921      	ldr	r1, [r4, #16]
 800712e:	464a      	mov	r2, r9
 8007130:	f000 fd5a 	bl	8007be8 <memcpy>
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800713a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800713e:	81a3      	strh	r3, [r4, #12]
 8007140:	6126      	str	r6, [r4, #16]
 8007142:	6165      	str	r5, [r4, #20]
 8007144:	444e      	add	r6, r9
 8007146:	eba5 0509 	sub.w	r5, r5, r9
 800714a:	6026      	str	r6, [r4, #0]
 800714c:	60a5      	str	r5, [r4, #8]
 800714e:	463e      	mov	r6, r7
 8007150:	42be      	cmp	r6, r7
 8007152:	d900      	bls.n	8007156 <__ssputs_r+0x72>
 8007154:	463e      	mov	r6, r7
 8007156:	6820      	ldr	r0, [r4, #0]
 8007158:	4632      	mov	r2, r6
 800715a:	4641      	mov	r1, r8
 800715c:	f000 fcf8 	bl	8007b50 <memmove>
 8007160:	68a3      	ldr	r3, [r4, #8]
 8007162:	1b9b      	subs	r3, r3, r6
 8007164:	60a3      	str	r3, [r4, #8]
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	4433      	add	r3, r6
 800716a:	6023      	str	r3, [r4, #0]
 800716c:	2000      	movs	r0, #0
 800716e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007172:	462a      	mov	r2, r5
 8007174:	f000 fd46 	bl	8007c04 <_realloc_r>
 8007178:	4606      	mov	r6, r0
 800717a:	2800      	cmp	r0, #0
 800717c:	d1e0      	bne.n	8007140 <__ssputs_r+0x5c>
 800717e:	6921      	ldr	r1, [r4, #16]
 8007180:	4650      	mov	r0, sl
 8007182:	f7ff feb7 	bl	8006ef4 <_free_r>
 8007186:	230c      	movs	r3, #12
 8007188:	f8ca 3000 	str.w	r3, [sl]
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	e7e9      	b.n	800716e <__ssputs_r+0x8a>
	...

0800719c <_svfiprintf_r>:
 800719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a0:	4698      	mov	r8, r3
 80071a2:	898b      	ldrh	r3, [r1, #12]
 80071a4:	061b      	lsls	r3, r3, #24
 80071a6:	b09d      	sub	sp, #116	@ 0x74
 80071a8:	4607      	mov	r7, r0
 80071aa:	460d      	mov	r5, r1
 80071ac:	4614      	mov	r4, r2
 80071ae:	d510      	bpl.n	80071d2 <_svfiprintf_r+0x36>
 80071b0:	690b      	ldr	r3, [r1, #16]
 80071b2:	b973      	cbnz	r3, 80071d2 <_svfiprintf_r+0x36>
 80071b4:	2140      	movs	r1, #64	@ 0x40
 80071b6:	f7ff ff09 	bl	8006fcc <_malloc_r>
 80071ba:	6028      	str	r0, [r5, #0]
 80071bc:	6128      	str	r0, [r5, #16]
 80071be:	b930      	cbnz	r0, 80071ce <_svfiprintf_r+0x32>
 80071c0:	230c      	movs	r3, #12
 80071c2:	603b      	str	r3, [r7, #0]
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295
 80071c8:	b01d      	add	sp, #116	@ 0x74
 80071ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ce:	2340      	movs	r3, #64	@ 0x40
 80071d0:	616b      	str	r3, [r5, #20]
 80071d2:	2300      	movs	r3, #0
 80071d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071d6:	2320      	movs	r3, #32
 80071d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80071e0:	2330      	movs	r3, #48	@ 0x30
 80071e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007380 <_svfiprintf_r+0x1e4>
 80071e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071ea:	f04f 0901 	mov.w	r9, #1
 80071ee:	4623      	mov	r3, r4
 80071f0:	469a      	mov	sl, r3
 80071f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071f6:	b10a      	cbz	r2, 80071fc <_svfiprintf_r+0x60>
 80071f8:	2a25      	cmp	r2, #37	@ 0x25
 80071fa:	d1f9      	bne.n	80071f0 <_svfiprintf_r+0x54>
 80071fc:	ebba 0b04 	subs.w	fp, sl, r4
 8007200:	d00b      	beq.n	800721a <_svfiprintf_r+0x7e>
 8007202:	465b      	mov	r3, fp
 8007204:	4622      	mov	r2, r4
 8007206:	4629      	mov	r1, r5
 8007208:	4638      	mov	r0, r7
 800720a:	f7ff ff6b 	bl	80070e4 <__ssputs_r>
 800720e:	3001      	adds	r0, #1
 8007210:	f000 80a7 	beq.w	8007362 <_svfiprintf_r+0x1c6>
 8007214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007216:	445a      	add	r2, fp
 8007218:	9209      	str	r2, [sp, #36]	@ 0x24
 800721a:	f89a 3000 	ldrb.w	r3, [sl]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 809f 	beq.w	8007362 <_svfiprintf_r+0x1c6>
 8007224:	2300      	movs	r3, #0
 8007226:	f04f 32ff 	mov.w	r2, #4294967295
 800722a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800722e:	f10a 0a01 	add.w	sl, sl, #1
 8007232:	9304      	str	r3, [sp, #16]
 8007234:	9307      	str	r3, [sp, #28]
 8007236:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800723a:	931a      	str	r3, [sp, #104]	@ 0x68
 800723c:	4654      	mov	r4, sl
 800723e:	2205      	movs	r2, #5
 8007240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007244:	484e      	ldr	r0, [pc, #312]	@ (8007380 <_svfiprintf_r+0x1e4>)
 8007246:	f7f8 ffc3 	bl	80001d0 <memchr>
 800724a:	9a04      	ldr	r2, [sp, #16]
 800724c:	b9d8      	cbnz	r0, 8007286 <_svfiprintf_r+0xea>
 800724e:	06d0      	lsls	r0, r2, #27
 8007250:	bf44      	itt	mi
 8007252:	2320      	movmi	r3, #32
 8007254:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007258:	0711      	lsls	r1, r2, #28
 800725a:	bf44      	itt	mi
 800725c:	232b      	movmi	r3, #43	@ 0x2b
 800725e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007262:	f89a 3000 	ldrb.w	r3, [sl]
 8007266:	2b2a      	cmp	r3, #42	@ 0x2a
 8007268:	d015      	beq.n	8007296 <_svfiprintf_r+0xfa>
 800726a:	9a07      	ldr	r2, [sp, #28]
 800726c:	4654      	mov	r4, sl
 800726e:	2000      	movs	r0, #0
 8007270:	f04f 0c0a 	mov.w	ip, #10
 8007274:	4621      	mov	r1, r4
 8007276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800727a:	3b30      	subs	r3, #48	@ 0x30
 800727c:	2b09      	cmp	r3, #9
 800727e:	d94b      	bls.n	8007318 <_svfiprintf_r+0x17c>
 8007280:	b1b0      	cbz	r0, 80072b0 <_svfiprintf_r+0x114>
 8007282:	9207      	str	r2, [sp, #28]
 8007284:	e014      	b.n	80072b0 <_svfiprintf_r+0x114>
 8007286:	eba0 0308 	sub.w	r3, r0, r8
 800728a:	fa09 f303 	lsl.w	r3, r9, r3
 800728e:	4313      	orrs	r3, r2
 8007290:	9304      	str	r3, [sp, #16]
 8007292:	46a2      	mov	sl, r4
 8007294:	e7d2      	b.n	800723c <_svfiprintf_r+0xa0>
 8007296:	9b03      	ldr	r3, [sp, #12]
 8007298:	1d19      	adds	r1, r3, #4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	9103      	str	r1, [sp, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	bfbb      	ittet	lt
 80072a2:	425b      	neglt	r3, r3
 80072a4:	f042 0202 	orrlt.w	r2, r2, #2
 80072a8:	9307      	strge	r3, [sp, #28]
 80072aa:	9307      	strlt	r3, [sp, #28]
 80072ac:	bfb8      	it	lt
 80072ae:	9204      	strlt	r2, [sp, #16]
 80072b0:	7823      	ldrb	r3, [r4, #0]
 80072b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80072b4:	d10a      	bne.n	80072cc <_svfiprintf_r+0x130>
 80072b6:	7863      	ldrb	r3, [r4, #1]
 80072b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80072ba:	d132      	bne.n	8007322 <_svfiprintf_r+0x186>
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	1d1a      	adds	r2, r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	9203      	str	r2, [sp, #12]
 80072c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072c8:	3402      	adds	r4, #2
 80072ca:	9305      	str	r3, [sp, #20]
 80072cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007390 <_svfiprintf_r+0x1f4>
 80072d0:	7821      	ldrb	r1, [r4, #0]
 80072d2:	2203      	movs	r2, #3
 80072d4:	4650      	mov	r0, sl
 80072d6:	f7f8 ff7b 	bl	80001d0 <memchr>
 80072da:	b138      	cbz	r0, 80072ec <_svfiprintf_r+0x150>
 80072dc:	9b04      	ldr	r3, [sp, #16]
 80072de:	eba0 000a 	sub.w	r0, r0, sl
 80072e2:	2240      	movs	r2, #64	@ 0x40
 80072e4:	4082      	lsls	r2, r0
 80072e6:	4313      	orrs	r3, r2
 80072e8:	3401      	adds	r4, #1
 80072ea:	9304      	str	r3, [sp, #16]
 80072ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f0:	4824      	ldr	r0, [pc, #144]	@ (8007384 <_svfiprintf_r+0x1e8>)
 80072f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072f6:	2206      	movs	r2, #6
 80072f8:	f7f8 ff6a 	bl	80001d0 <memchr>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d036      	beq.n	800736e <_svfiprintf_r+0x1d2>
 8007300:	4b21      	ldr	r3, [pc, #132]	@ (8007388 <_svfiprintf_r+0x1ec>)
 8007302:	bb1b      	cbnz	r3, 800734c <_svfiprintf_r+0x1b0>
 8007304:	9b03      	ldr	r3, [sp, #12]
 8007306:	3307      	adds	r3, #7
 8007308:	f023 0307 	bic.w	r3, r3, #7
 800730c:	3308      	adds	r3, #8
 800730e:	9303      	str	r3, [sp, #12]
 8007310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007312:	4433      	add	r3, r6
 8007314:	9309      	str	r3, [sp, #36]	@ 0x24
 8007316:	e76a      	b.n	80071ee <_svfiprintf_r+0x52>
 8007318:	fb0c 3202 	mla	r2, ip, r2, r3
 800731c:	460c      	mov	r4, r1
 800731e:	2001      	movs	r0, #1
 8007320:	e7a8      	b.n	8007274 <_svfiprintf_r+0xd8>
 8007322:	2300      	movs	r3, #0
 8007324:	3401      	adds	r4, #1
 8007326:	9305      	str	r3, [sp, #20]
 8007328:	4619      	mov	r1, r3
 800732a:	f04f 0c0a 	mov.w	ip, #10
 800732e:	4620      	mov	r0, r4
 8007330:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007334:	3a30      	subs	r2, #48	@ 0x30
 8007336:	2a09      	cmp	r2, #9
 8007338:	d903      	bls.n	8007342 <_svfiprintf_r+0x1a6>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0c6      	beq.n	80072cc <_svfiprintf_r+0x130>
 800733e:	9105      	str	r1, [sp, #20]
 8007340:	e7c4      	b.n	80072cc <_svfiprintf_r+0x130>
 8007342:	fb0c 2101 	mla	r1, ip, r1, r2
 8007346:	4604      	mov	r4, r0
 8007348:	2301      	movs	r3, #1
 800734a:	e7f0      	b.n	800732e <_svfiprintf_r+0x192>
 800734c:	ab03      	add	r3, sp, #12
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	462a      	mov	r2, r5
 8007352:	4b0e      	ldr	r3, [pc, #56]	@ (800738c <_svfiprintf_r+0x1f0>)
 8007354:	a904      	add	r1, sp, #16
 8007356:	4638      	mov	r0, r7
 8007358:	f3af 8000 	nop.w
 800735c:	1c42      	adds	r2, r0, #1
 800735e:	4606      	mov	r6, r0
 8007360:	d1d6      	bne.n	8007310 <_svfiprintf_r+0x174>
 8007362:	89ab      	ldrh	r3, [r5, #12]
 8007364:	065b      	lsls	r3, r3, #25
 8007366:	f53f af2d 	bmi.w	80071c4 <_svfiprintf_r+0x28>
 800736a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800736c:	e72c      	b.n	80071c8 <_svfiprintf_r+0x2c>
 800736e:	ab03      	add	r3, sp, #12
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	462a      	mov	r2, r5
 8007374:	4b05      	ldr	r3, [pc, #20]	@ (800738c <_svfiprintf_r+0x1f0>)
 8007376:	a904      	add	r1, sp, #16
 8007378:	4638      	mov	r0, r7
 800737a:	f000 f9bb 	bl	80076f4 <_printf_i>
 800737e:	e7ed      	b.n	800735c <_svfiprintf_r+0x1c0>
 8007380:	080082c4 	.word	0x080082c4
 8007384:	080082ce 	.word	0x080082ce
 8007388:	00000000 	.word	0x00000000
 800738c:	080070e5 	.word	0x080070e5
 8007390:	080082ca 	.word	0x080082ca

08007394 <__sfputc_r>:
 8007394:	6893      	ldr	r3, [r2, #8]
 8007396:	3b01      	subs	r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	b410      	push	{r4}
 800739c:	6093      	str	r3, [r2, #8]
 800739e:	da08      	bge.n	80073b2 <__sfputc_r+0x1e>
 80073a0:	6994      	ldr	r4, [r2, #24]
 80073a2:	42a3      	cmp	r3, r4
 80073a4:	db01      	blt.n	80073aa <__sfputc_r+0x16>
 80073a6:	290a      	cmp	r1, #10
 80073a8:	d103      	bne.n	80073b2 <__sfputc_r+0x1e>
 80073aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073ae:	f7ff bc90 	b.w	8006cd2 <__swbuf_r>
 80073b2:	6813      	ldr	r3, [r2, #0]
 80073b4:	1c58      	adds	r0, r3, #1
 80073b6:	6010      	str	r0, [r2, #0]
 80073b8:	7019      	strb	r1, [r3, #0]
 80073ba:	4608      	mov	r0, r1
 80073bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <__sfputs_r>:
 80073c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c4:	4606      	mov	r6, r0
 80073c6:	460f      	mov	r7, r1
 80073c8:	4614      	mov	r4, r2
 80073ca:	18d5      	adds	r5, r2, r3
 80073cc:	42ac      	cmp	r4, r5
 80073ce:	d101      	bne.n	80073d4 <__sfputs_r+0x12>
 80073d0:	2000      	movs	r0, #0
 80073d2:	e007      	b.n	80073e4 <__sfputs_r+0x22>
 80073d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d8:	463a      	mov	r2, r7
 80073da:	4630      	mov	r0, r6
 80073dc:	f7ff ffda 	bl	8007394 <__sfputc_r>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d1f3      	bne.n	80073cc <__sfputs_r+0xa>
 80073e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073e8 <_vfiprintf_r>:
 80073e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ec:	460d      	mov	r5, r1
 80073ee:	b09d      	sub	sp, #116	@ 0x74
 80073f0:	4614      	mov	r4, r2
 80073f2:	4698      	mov	r8, r3
 80073f4:	4606      	mov	r6, r0
 80073f6:	b118      	cbz	r0, 8007400 <_vfiprintf_r+0x18>
 80073f8:	6a03      	ldr	r3, [r0, #32]
 80073fa:	b90b      	cbnz	r3, 8007400 <_vfiprintf_r+0x18>
 80073fc:	f7ff fb60 	bl	8006ac0 <__sinit>
 8007400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007402:	07d9      	lsls	r1, r3, #31
 8007404:	d405      	bmi.n	8007412 <_vfiprintf_r+0x2a>
 8007406:	89ab      	ldrh	r3, [r5, #12]
 8007408:	059a      	lsls	r2, r3, #22
 800740a:	d402      	bmi.n	8007412 <_vfiprintf_r+0x2a>
 800740c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800740e:	f7ff fd6e 	bl	8006eee <__retarget_lock_acquire_recursive>
 8007412:	89ab      	ldrh	r3, [r5, #12]
 8007414:	071b      	lsls	r3, r3, #28
 8007416:	d501      	bpl.n	800741c <_vfiprintf_r+0x34>
 8007418:	692b      	ldr	r3, [r5, #16]
 800741a:	b99b      	cbnz	r3, 8007444 <_vfiprintf_r+0x5c>
 800741c:	4629      	mov	r1, r5
 800741e:	4630      	mov	r0, r6
 8007420:	f7ff fc96 	bl	8006d50 <__swsetup_r>
 8007424:	b170      	cbz	r0, 8007444 <_vfiprintf_r+0x5c>
 8007426:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007428:	07dc      	lsls	r4, r3, #31
 800742a:	d504      	bpl.n	8007436 <_vfiprintf_r+0x4e>
 800742c:	f04f 30ff 	mov.w	r0, #4294967295
 8007430:	b01d      	add	sp, #116	@ 0x74
 8007432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007436:	89ab      	ldrh	r3, [r5, #12]
 8007438:	0598      	lsls	r0, r3, #22
 800743a:	d4f7      	bmi.n	800742c <_vfiprintf_r+0x44>
 800743c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800743e:	f7ff fd57 	bl	8006ef0 <__retarget_lock_release_recursive>
 8007442:	e7f3      	b.n	800742c <_vfiprintf_r+0x44>
 8007444:	2300      	movs	r3, #0
 8007446:	9309      	str	r3, [sp, #36]	@ 0x24
 8007448:	2320      	movs	r3, #32
 800744a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800744e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007452:	2330      	movs	r3, #48	@ 0x30
 8007454:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007604 <_vfiprintf_r+0x21c>
 8007458:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800745c:	f04f 0901 	mov.w	r9, #1
 8007460:	4623      	mov	r3, r4
 8007462:	469a      	mov	sl, r3
 8007464:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007468:	b10a      	cbz	r2, 800746e <_vfiprintf_r+0x86>
 800746a:	2a25      	cmp	r2, #37	@ 0x25
 800746c:	d1f9      	bne.n	8007462 <_vfiprintf_r+0x7a>
 800746e:	ebba 0b04 	subs.w	fp, sl, r4
 8007472:	d00b      	beq.n	800748c <_vfiprintf_r+0xa4>
 8007474:	465b      	mov	r3, fp
 8007476:	4622      	mov	r2, r4
 8007478:	4629      	mov	r1, r5
 800747a:	4630      	mov	r0, r6
 800747c:	f7ff ffa1 	bl	80073c2 <__sfputs_r>
 8007480:	3001      	adds	r0, #1
 8007482:	f000 80a7 	beq.w	80075d4 <_vfiprintf_r+0x1ec>
 8007486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007488:	445a      	add	r2, fp
 800748a:	9209      	str	r2, [sp, #36]	@ 0x24
 800748c:	f89a 3000 	ldrb.w	r3, [sl]
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 809f 	beq.w	80075d4 <_vfiprintf_r+0x1ec>
 8007496:	2300      	movs	r3, #0
 8007498:	f04f 32ff 	mov.w	r2, #4294967295
 800749c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074a0:	f10a 0a01 	add.w	sl, sl, #1
 80074a4:	9304      	str	r3, [sp, #16]
 80074a6:	9307      	str	r3, [sp, #28]
 80074a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80074ae:	4654      	mov	r4, sl
 80074b0:	2205      	movs	r2, #5
 80074b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b6:	4853      	ldr	r0, [pc, #332]	@ (8007604 <_vfiprintf_r+0x21c>)
 80074b8:	f7f8 fe8a 	bl	80001d0 <memchr>
 80074bc:	9a04      	ldr	r2, [sp, #16]
 80074be:	b9d8      	cbnz	r0, 80074f8 <_vfiprintf_r+0x110>
 80074c0:	06d1      	lsls	r1, r2, #27
 80074c2:	bf44      	itt	mi
 80074c4:	2320      	movmi	r3, #32
 80074c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ca:	0713      	lsls	r3, r2, #28
 80074cc:	bf44      	itt	mi
 80074ce:	232b      	movmi	r3, #43	@ 0x2b
 80074d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074d4:	f89a 3000 	ldrb.w	r3, [sl]
 80074d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80074da:	d015      	beq.n	8007508 <_vfiprintf_r+0x120>
 80074dc:	9a07      	ldr	r2, [sp, #28]
 80074de:	4654      	mov	r4, sl
 80074e0:	2000      	movs	r0, #0
 80074e2:	f04f 0c0a 	mov.w	ip, #10
 80074e6:	4621      	mov	r1, r4
 80074e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074ec:	3b30      	subs	r3, #48	@ 0x30
 80074ee:	2b09      	cmp	r3, #9
 80074f0:	d94b      	bls.n	800758a <_vfiprintf_r+0x1a2>
 80074f2:	b1b0      	cbz	r0, 8007522 <_vfiprintf_r+0x13a>
 80074f4:	9207      	str	r2, [sp, #28]
 80074f6:	e014      	b.n	8007522 <_vfiprintf_r+0x13a>
 80074f8:	eba0 0308 	sub.w	r3, r0, r8
 80074fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007500:	4313      	orrs	r3, r2
 8007502:	9304      	str	r3, [sp, #16]
 8007504:	46a2      	mov	sl, r4
 8007506:	e7d2      	b.n	80074ae <_vfiprintf_r+0xc6>
 8007508:	9b03      	ldr	r3, [sp, #12]
 800750a:	1d19      	adds	r1, r3, #4
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	9103      	str	r1, [sp, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	bfbb      	ittet	lt
 8007514:	425b      	neglt	r3, r3
 8007516:	f042 0202 	orrlt.w	r2, r2, #2
 800751a:	9307      	strge	r3, [sp, #28]
 800751c:	9307      	strlt	r3, [sp, #28]
 800751e:	bfb8      	it	lt
 8007520:	9204      	strlt	r2, [sp, #16]
 8007522:	7823      	ldrb	r3, [r4, #0]
 8007524:	2b2e      	cmp	r3, #46	@ 0x2e
 8007526:	d10a      	bne.n	800753e <_vfiprintf_r+0x156>
 8007528:	7863      	ldrb	r3, [r4, #1]
 800752a:	2b2a      	cmp	r3, #42	@ 0x2a
 800752c:	d132      	bne.n	8007594 <_vfiprintf_r+0x1ac>
 800752e:	9b03      	ldr	r3, [sp, #12]
 8007530:	1d1a      	adds	r2, r3, #4
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	9203      	str	r2, [sp, #12]
 8007536:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800753a:	3402      	adds	r4, #2
 800753c:	9305      	str	r3, [sp, #20]
 800753e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007614 <_vfiprintf_r+0x22c>
 8007542:	7821      	ldrb	r1, [r4, #0]
 8007544:	2203      	movs	r2, #3
 8007546:	4650      	mov	r0, sl
 8007548:	f7f8 fe42 	bl	80001d0 <memchr>
 800754c:	b138      	cbz	r0, 800755e <_vfiprintf_r+0x176>
 800754e:	9b04      	ldr	r3, [sp, #16]
 8007550:	eba0 000a 	sub.w	r0, r0, sl
 8007554:	2240      	movs	r2, #64	@ 0x40
 8007556:	4082      	lsls	r2, r0
 8007558:	4313      	orrs	r3, r2
 800755a:	3401      	adds	r4, #1
 800755c:	9304      	str	r3, [sp, #16]
 800755e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007562:	4829      	ldr	r0, [pc, #164]	@ (8007608 <_vfiprintf_r+0x220>)
 8007564:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007568:	2206      	movs	r2, #6
 800756a:	f7f8 fe31 	bl	80001d0 <memchr>
 800756e:	2800      	cmp	r0, #0
 8007570:	d03f      	beq.n	80075f2 <_vfiprintf_r+0x20a>
 8007572:	4b26      	ldr	r3, [pc, #152]	@ (800760c <_vfiprintf_r+0x224>)
 8007574:	bb1b      	cbnz	r3, 80075be <_vfiprintf_r+0x1d6>
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	3307      	adds	r3, #7
 800757a:	f023 0307 	bic.w	r3, r3, #7
 800757e:	3308      	adds	r3, #8
 8007580:	9303      	str	r3, [sp, #12]
 8007582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007584:	443b      	add	r3, r7
 8007586:	9309      	str	r3, [sp, #36]	@ 0x24
 8007588:	e76a      	b.n	8007460 <_vfiprintf_r+0x78>
 800758a:	fb0c 3202 	mla	r2, ip, r2, r3
 800758e:	460c      	mov	r4, r1
 8007590:	2001      	movs	r0, #1
 8007592:	e7a8      	b.n	80074e6 <_vfiprintf_r+0xfe>
 8007594:	2300      	movs	r3, #0
 8007596:	3401      	adds	r4, #1
 8007598:	9305      	str	r3, [sp, #20]
 800759a:	4619      	mov	r1, r3
 800759c:	f04f 0c0a 	mov.w	ip, #10
 80075a0:	4620      	mov	r0, r4
 80075a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075a6:	3a30      	subs	r2, #48	@ 0x30
 80075a8:	2a09      	cmp	r2, #9
 80075aa:	d903      	bls.n	80075b4 <_vfiprintf_r+0x1cc>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d0c6      	beq.n	800753e <_vfiprintf_r+0x156>
 80075b0:	9105      	str	r1, [sp, #20]
 80075b2:	e7c4      	b.n	800753e <_vfiprintf_r+0x156>
 80075b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80075b8:	4604      	mov	r4, r0
 80075ba:	2301      	movs	r3, #1
 80075bc:	e7f0      	b.n	80075a0 <_vfiprintf_r+0x1b8>
 80075be:	ab03      	add	r3, sp, #12
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	462a      	mov	r2, r5
 80075c4:	4b12      	ldr	r3, [pc, #72]	@ (8007610 <_vfiprintf_r+0x228>)
 80075c6:	a904      	add	r1, sp, #16
 80075c8:	4630      	mov	r0, r6
 80075ca:	f3af 8000 	nop.w
 80075ce:	4607      	mov	r7, r0
 80075d0:	1c78      	adds	r0, r7, #1
 80075d2:	d1d6      	bne.n	8007582 <_vfiprintf_r+0x19a>
 80075d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075d6:	07d9      	lsls	r1, r3, #31
 80075d8:	d405      	bmi.n	80075e6 <_vfiprintf_r+0x1fe>
 80075da:	89ab      	ldrh	r3, [r5, #12]
 80075dc:	059a      	lsls	r2, r3, #22
 80075de:	d402      	bmi.n	80075e6 <_vfiprintf_r+0x1fe>
 80075e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075e2:	f7ff fc85 	bl	8006ef0 <__retarget_lock_release_recursive>
 80075e6:	89ab      	ldrh	r3, [r5, #12]
 80075e8:	065b      	lsls	r3, r3, #25
 80075ea:	f53f af1f 	bmi.w	800742c <_vfiprintf_r+0x44>
 80075ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075f0:	e71e      	b.n	8007430 <_vfiprintf_r+0x48>
 80075f2:	ab03      	add	r3, sp, #12
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	462a      	mov	r2, r5
 80075f8:	4b05      	ldr	r3, [pc, #20]	@ (8007610 <_vfiprintf_r+0x228>)
 80075fa:	a904      	add	r1, sp, #16
 80075fc:	4630      	mov	r0, r6
 80075fe:	f000 f879 	bl	80076f4 <_printf_i>
 8007602:	e7e4      	b.n	80075ce <_vfiprintf_r+0x1e6>
 8007604:	080082c4 	.word	0x080082c4
 8007608:	080082ce 	.word	0x080082ce
 800760c:	00000000 	.word	0x00000000
 8007610:	080073c3 	.word	0x080073c3
 8007614:	080082ca 	.word	0x080082ca

08007618 <_printf_common>:
 8007618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800761c:	4616      	mov	r6, r2
 800761e:	4698      	mov	r8, r3
 8007620:	688a      	ldr	r2, [r1, #8]
 8007622:	690b      	ldr	r3, [r1, #16]
 8007624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007628:	4293      	cmp	r3, r2
 800762a:	bfb8      	it	lt
 800762c:	4613      	movlt	r3, r2
 800762e:	6033      	str	r3, [r6, #0]
 8007630:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007634:	4607      	mov	r7, r0
 8007636:	460c      	mov	r4, r1
 8007638:	b10a      	cbz	r2, 800763e <_printf_common+0x26>
 800763a:	3301      	adds	r3, #1
 800763c:	6033      	str	r3, [r6, #0]
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	0699      	lsls	r1, r3, #26
 8007642:	bf42      	ittt	mi
 8007644:	6833      	ldrmi	r3, [r6, #0]
 8007646:	3302      	addmi	r3, #2
 8007648:	6033      	strmi	r3, [r6, #0]
 800764a:	6825      	ldr	r5, [r4, #0]
 800764c:	f015 0506 	ands.w	r5, r5, #6
 8007650:	d106      	bne.n	8007660 <_printf_common+0x48>
 8007652:	f104 0a19 	add.w	sl, r4, #25
 8007656:	68e3      	ldr	r3, [r4, #12]
 8007658:	6832      	ldr	r2, [r6, #0]
 800765a:	1a9b      	subs	r3, r3, r2
 800765c:	42ab      	cmp	r3, r5
 800765e:	dc26      	bgt.n	80076ae <_printf_common+0x96>
 8007660:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007664:	6822      	ldr	r2, [r4, #0]
 8007666:	3b00      	subs	r3, #0
 8007668:	bf18      	it	ne
 800766a:	2301      	movne	r3, #1
 800766c:	0692      	lsls	r2, r2, #26
 800766e:	d42b      	bmi.n	80076c8 <_printf_common+0xb0>
 8007670:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007674:	4641      	mov	r1, r8
 8007676:	4638      	mov	r0, r7
 8007678:	47c8      	blx	r9
 800767a:	3001      	adds	r0, #1
 800767c:	d01e      	beq.n	80076bc <_printf_common+0xa4>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	6922      	ldr	r2, [r4, #16]
 8007682:	f003 0306 	and.w	r3, r3, #6
 8007686:	2b04      	cmp	r3, #4
 8007688:	bf02      	ittt	eq
 800768a:	68e5      	ldreq	r5, [r4, #12]
 800768c:	6833      	ldreq	r3, [r6, #0]
 800768e:	1aed      	subeq	r5, r5, r3
 8007690:	68a3      	ldr	r3, [r4, #8]
 8007692:	bf0c      	ite	eq
 8007694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007698:	2500      	movne	r5, #0
 800769a:	4293      	cmp	r3, r2
 800769c:	bfc4      	itt	gt
 800769e:	1a9b      	subgt	r3, r3, r2
 80076a0:	18ed      	addgt	r5, r5, r3
 80076a2:	2600      	movs	r6, #0
 80076a4:	341a      	adds	r4, #26
 80076a6:	42b5      	cmp	r5, r6
 80076a8:	d11a      	bne.n	80076e0 <_printf_common+0xc8>
 80076aa:	2000      	movs	r0, #0
 80076ac:	e008      	b.n	80076c0 <_printf_common+0xa8>
 80076ae:	2301      	movs	r3, #1
 80076b0:	4652      	mov	r2, sl
 80076b2:	4641      	mov	r1, r8
 80076b4:	4638      	mov	r0, r7
 80076b6:	47c8      	blx	r9
 80076b8:	3001      	adds	r0, #1
 80076ba:	d103      	bne.n	80076c4 <_printf_common+0xac>
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295
 80076c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c4:	3501      	adds	r5, #1
 80076c6:	e7c6      	b.n	8007656 <_printf_common+0x3e>
 80076c8:	18e1      	adds	r1, r4, r3
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	2030      	movs	r0, #48	@ 0x30
 80076ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076d2:	4422      	add	r2, r4
 80076d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076dc:	3302      	adds	r3, #2
 80076de:	e7c7      	b.n	8007670 <_printf_common+0x58>
 80076e0:	2301      	movs	r3, #1
 80076e2:	4622      	mov	r2, r4
 80076e4:	4641      	mov	r1, r8
 80076e6:	4638      	mov	r0, r7
 80076e8:	47c8      	blx	r9
 80076ea:	3001      	adds	r0, #1
 80076ec:	d0e6      	beq.n	80076bc <_printf_common+0xa4>
 80076ee:	3601      	adds	r6, #1
 80076f0:	e7d9      	b.n	80076a6 <_printf_common+0x8e>
	...

080076f4 <_printf_i>:
 80076f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f8:	7e0f      	ldrb	r7, [r1, #24]
 80076fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076fc:	2f78      	cmp	r7, #120	@ 0x78
 80076fe:	4691      	mov	r9, r2
 8007700:	4680      	mov	r8, r0
 8007702:	460c      	mov	r4, r1
 8007704:	469a      	mov	sl, r3
 8007706:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800770a:	d807      	bhi.n	800771c <_printf_i+0x28>
 800770c:	2f62      	cmp	r7, #98	@ 0x62
 800770e:	d80a      	bhi.n	8007726 <_printf_i+0x32>
 8007710:	2f00      	cmp	r7, #0
 8007712:	f000 80d2 	beq.w	80078ba <_printf_i+0x1c6>
 8007716:	2f58      	cmp	r7, #88	@ 0x58
 8007718:	f000 80b9 	beq.w	800788e <_printf_i+0x19a>
 800771c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007720:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007724:	e03a      	b.n	800779c <_printf_i+0xa8>
 8007726:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800772a:	2b15      	cmp	r3, #21
 800772c:	d8f6      	bhi.n	800771c <_printf_i+0x28>
 800772e:	a101      	add	r1, pc, #4	@ (adr r1, 8007734 <_printf_i+0x40>)
 8007730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007734:	0800778d 	.word	0x0800778d
 8007738:	080077a1 	.word	0x080077a1
 800773c:	0800771d 	.word	0x0800771d
 8007740:	0800771d 	.word	0x0800771d
 8007744:	0800771d 	.word	0x0800771d
 8007748:	0800771d 	.word	0x0800771d
 800774c:	080077a1 	.word	0x080077a1
 8007750:	0800771d 	.word	0x0800771d
 8007754:	0800771d 	.word	0x0800771d
 8007758:	0800771d 	.word	0x0800771d
 800775c:	0800771d 	.word	0x0800771d
 8007760:	080078a1 	.word	0x080078a1
 8007764:	080077cb 	.word	0x080077cb
 8007768:	0800785b 	.word	0x0800785b
 800776c:	0800771d 	.word	0x0800771d
 8007770:	0800771d 	.word	0x0800771d
 8007774:	080078c3 	.word	0x080078c3
 8007778:	0800771d 	.word	0x0800771d
 800777c:	080077cb 	.word	0x080077cb
 8007780:	0800771d 	.word	0x0800771d
 8007784:	0800771d 	.word	0x0800771d
 8007788:	08007863 	.word	0x08007863
 800778c:	6833      	ldr	r3, [r6, #0]
 800778e:	1d1a      	adds	r2, r3, #4
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6032      	str	r2, [r6, #0]
 8007794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007798:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800779c:	2301      	movs	r3, #1
 800779e:	e09d      	b.n	80078dc <_printf_i+0x1e8>
 80077a0:	6833      	ldr	r3, [r6, #0]
 80077a2:	6820      	ldr	r0, [r4, #0]
 80077a4:	1d19      	adds	r1, r3, #4
 80077a6:	6031      	str	r1, [r6, #0]
 80077a8:	0606      	lsls	r6, r0, #24
 80077aa:	d501      	bpl.n	80077b0 <_printf_i+0xbc>
 80077ac:	681d      	ldr	r5, [r3, #0]
 80077ae:	e003      	b.n	80077b8 <_printf_i+0xc4>
 80077b0:	0645      	lsls	r5, r0, #25
 80077b2:	d5fb      	bpl.n	80077ac <_printf_i+0xb8>
 80077b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077b8:	2d00      	cmp	r5, #0
 80077ba:	da03      	bge.n	80077c4 <_printf_i+0xd0>
 80077bc:	232d      	movs	r3, #45	@ 0x2d
 80077be:	426d      	negs	r5, r5
 80077c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077c4:	4859      	ldr	r0, [pc, #356]	@ (800792c <_printf_i+0x238>)
 80077c6:	230a      	movs	r3, #10
 80077c8:	e011      	b.n	80077ee <_printf_i+0xfa>
 80077ca:	6821      	ldr	r1, [r4, #0]
 80077cc:	6833      	ldr	r3, [r6, #0]
 80077ce:	0608      	lsls	r0, r1, #24
 80077d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80077d4:	d402      	bmi.n	80077dc <_printf_i+0xe8>
 80077d6:	0649      	lsls	r1, r1, #25
 80077d8:	bf48      	it	mi
 80077da:	b2ad      	uxthmi	r5, r5
 80077dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80077de:	4853      	ldr	r0, [pc, #332]	@ (800792c <_printf_i+0x238>)
 80077e0:	6033      	str	r3, [r6, #0]
 80077e2:	bf14      	ite	ne
 80077e4:	230a      	movne	r3, #10
 80077e6:	2308      	moveq	r3, #8
 80077e8:	2100      	movs	r1, #0
 80077ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077ee:	6866      	ldr	r6, [r4, #4]
 80077f0:	60a6      	str	r6, [r4, #8]
 80077f2:	2e00      	cmp	r6, #0
 80077f4:	bfa2      	ittt	ge
 80077f6:	6821      	ldrge	r1, [r4, #0]
 80077f8:	f021 0104 	bicge.w	r1, r1, #4
 80077fc:	6021      	strge	r1, [r4, #0]
 80077fe:	b90d      	cbnz	r5, 8007804 <_printf_i+0x110>
 8007800:	2e00      	cmp	r6, #0
 8007802:	d04b      	beq.n	800789c <_printf_i+0x1a8>
 8007804:	4616      	mov	r6, r2
 8007806:	fbb5 f1f3 	udiv	r1, r5, r3
 800780a:	fb03 5711 	mls	r7, r3, r1, r5
 800780e:	5dc7      	ldrb	r7, [r0, r7]
 8007810:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007814:	462f      	mov	r7, r5
 8007816:	42bb      	cmp	r3, r7
 8007818:	460d      	mov	r5, r1
 800781a:	d9f4      	bls.n	8007806 <_printf_i+0x112>
 800781c:	2b08      	cmp	r3, #8
 800781e:	d10b      	bne.n	8007838 <_printf_i+0x144>
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	07df      	lsls	r7, r3, #31
 8007824:	d508      	bpl.n	8007838 <_printf_i+0x144>
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	6861      	ldr	r1, [r4, #4]
 800782a:	4299      	cmp	r1, r3
 800782c:	bfde      	ittt	le
 800782e:	2330      	movle	r3, #48	@ 0x30
 8007830:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007834:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007838:	1b92      	subs	r2, r2, r6
 800783a:	6122      	str	r2, [r4, #16]
 800783c:	f8cd a000 	str.w	sl, [sp]
 8007840:	464b      	mov	r3, r9
 8007842:	aa03      	add	r2, sp, #12
 8007844:	4621      	mov	r1, r4
 8007846:	4640      	mov	r0, r8
 8007848:	f7ff fee6 	bl	8007618 <_printf_common>
 800784c:	3001      	adds	r0, #1
 800784e:	d14a      	bne.n	80078e6 <_printf_i+0x1f2>
 8007850:	f04f 30ff 	mov.w	r0, #4294967295
 8007854:	b004      	add	sp, #16
 8007856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	f043 0320 	orr.w	r3, r3, #32
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	4833      	ldr	r0, [pc, #204]	@ (8007930 <_printf_i+0x23c>)
 8007864:	2778      	movs	r7, #120	@ 0x78
 8007866:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	6831      	ldr	r1, [r6, #0]
 800786e:	061f      	lsls	r7, r3, #24
 8007870:	f851 5b04 	ldr.w	r5, [r1], #4
 8007874:	d402      	bmi.n	800787c <_printf_i+0x188>
 8007876:	065f      	lsls	r7, r3, #25
 8007878:	bf48      	it	mi
 800787a:	b2ad      	uxthmi	r5, r5
 800787c:	6031      	str	r1, [r6, #0]
 800787e:	07d9      	lsls	r1, r3, #31
 8007880:	bf44      	itt	mi
 8007882:	f043 0320 	orrmi.w	r3, r3, #32
 8007886:	6023      	strmi	r3, [r4, #0]
 8007888:	b11d      	cbz	r5, 8007892 <_printf_i+0x19e>
 800788a:	2310      	movs	r3, #16
 800788c:	e7ac      	b.n	80077e8 <_printf_i+0xf4>
 800788e:	4827      	ldr	r0, [pc, #156]	@ (800792c <_printf_i+0x238>)
 8007890:	e7e9      	b.n	8007866 <_printf_i+0x172>
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	f023 0320 	bic.w	r3, r3, #32
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	e7f6      	b.n	800788a <_printf_i+0x196>
 800789c:	4616      	mov	r6, r2
 800789e:	e7bd      	b.n	800781c <_printf_i+0x128>
 80078a0:	6833      	ldr	r3, [r6, #0]
 80078a2:	6825      	ldr	r5, [r4, #0]
 80078a4:	6961      	ldr	r1, [r4, #20]
 80078a6:	1d18      	adds	r0, r3, #4
 80078a8:	6030      	str	r0, [r6, #0]
 80078aa:	062e      	lsls	r6, r5, #24
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	d501      	bpl.n	80078b4 <_printf_i+0x1c0>
 80078b0:	6019      	str	r1, [r3, #0]
 80078b2:	e002      	b.n	80078ba <_printf_i+0x1c6>
 80078b4:	0668      	lsls	r0, r5, #25
 80078b6:	d5fb      	bpl.n	80078b0 <_printf_i+0x1bc>
 80078b8:	8019      	strh	r1, [r3, #0]
 80078ba:	2300      	movs	r3, #0
 80078bc:	6123      	str	r3, [r4, #16]
 80078be:	4616      	mov	r6, r2
 80078c0:	e7bc      	b.n	800783c <_printf_i+0x148>
 80078c2:	6833      	ldr	r3, [r6, #0]
 80078c4:	1d1a      	adds	r2, r3, #4
 80078c6:	6032      	str	r2, [r6, #0]
 80078c8:	681e      	ldr	r6, [r3, #0]
 80078ca:	6862      	ldr	r2, [r4, #4]
 80078cc:	2100      	movs	r1, #0
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7f8 fc7e 	bl	80001d0 <memchr>
 80078d4:	b108      	cbz	r0, 80078da <_printf_i+0x1e6>
 80078d6:	1b80      	subs	r0, r0, r6
 80078d8:	6060      	str	r0, [r4, #4]
 80078da:	6863      	ldr	r3, [r4, #4]
 80078dc:	6123      	str	r3, [r4, #16]
 80078de:	2300      	movs	r3, #0
 80078e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078e4:	e7aa      	b.n	800783c <_printf_i+0x148>
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	4632      	mov	r2, r6
 80078ea:	4649      	mov	r1, r9
 80078ec:	4640      	mov	r0, r8
 80078ee:	47d0      	blx	sl
 80078f0:	3001      	adds	r0, #1
 80078f2:	d0ad      	beq.n	8007850 <_printf_i+0x15c>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	079b      	lsls	r3, r3, #30
 80078f8:	d413      	bmi.n	8007922 <_printf_i+0x22e>
 80078fa:	68e0      	ldr	r0, [r4, #12]
 80078fc:	9b03      	ldr	r3, [sp, #12]
 80078fe:	4298      	cmp	r0, r3
 8007900:	bfb8      	it	lt
 8007902:	4618      	movlt	r0, r3
 8007904:	e7a6      	b.n	8007854 <_printf_i+0x160>
 8007906:	2301      	movs	r3, #1
 8007908:	4632      	mov	r2, r6
 800790a:	4649      	mov	r1, r9
 800790c:	4640      	mov	r0, r8
 800790e:	47d0      	blx	sl
 8007910:	3001      	adds	r0, #1
 8007912:	d09d      	beq.n	8007850 <_printf_i+0x15c>
 8007914:	3501      	adds	r5, #1
 8007916:	68e3      	ldr	r3, [r4, #12]
 8007918:	9903      	ldr	r1, [sp, #12]
 800791a:	1a5b      	subs	r3, r3, r1
 800791c:	42ab      	cmp	r3, r5
 800791e:	dcf2      	bgt.n	8007906 <_printf_i+0x212>
 8007920:	e7eb      	b.n	80078fa <_printf_i+0x206>
 8007922:	2500      	movs	r5, #0
 8007924:	f104 0619 	add.w	r6, r4, #25
 8007928:	e7f5      	b.n	8007916 <_printf_i+0x222>
 800792a:	bf00      	nop
 800792c:	080082d5 	.word	0x080082d5
 8007930:	080082e6 	.word	0x080082e6

08007934 <__sflush_r>:
 8007934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800793c:	0716      	lsls	r6, r2, #28
 800793e:	4605      	mov	r5, r0
 8007940:	460c      	mov	r4, r1
 8007942:	d454      	bmi.n	80079ee <__sflush_r+0xba>
 8007944:	684b      	ldr	r3, [r1, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	dc02      	bgt.n	8007950 <__sflush_r+0x1c>
 800794a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800794c:	2b00      	cmp	r3, #0
 800794e:	dd48      	ble.n	80079e2 <__sflush_r+0xae>
 8007950:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007952:	2e00      	cmp	r6, #0
 8007954:	d045      	beq.n	80079e2 <__sflush_r+0xae>
 8007956:	2300      	movs	r3, #0
 8007958:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800795c:	682f      	ldr	r7, [r5, #0]
 800795e:	6a21      	ldr	r1, [r4, #32]
 8007960:	602b      	str	r3, [r5, #0]
 8007962:	d030      	beq.n	80079c6 <__sflush_r+0x92>
 8007964:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007966:	89a3      	ldrh	r3, [r4, #12]
 8007968:	0759      	lsls	r1, r3, #29
 800796a:	d505      	bpl.n	8007978 <__sflush_r+0x44>
 800796c:	6863      	ldr	r3, [r4, #4]
 800796e:	1ad2      	subs	r2, r2, r3
 8007970:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007972:	b10b      	cbz	r3, 8007978 <__sflush_r+0x44>
 8007974:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007976:	1ad2      	subs	r2, r2, r3
 8007978:	2300      	movs	r3, #0
 800797a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800797c:	6a21      	ldr	r1, [r4, #32]
 800797e:	4628      	mov	r0, r5
 8007980:	47b0      	blx	r6
 8007982:	1c43      	adds	r3, r0, #1
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	d106      	bne.n	8007996 <__sflush_r+0x62>
 8007988:	6829      	ldr	r1, [r5, #0]
 800798a:	291d      	cmp	r1, #29
 800798c:	d82b      	bhi.n	80079e6 <__sflush_r+0xb2>
 800798e:	4a2a      	ldr	r2, [pc, #168]	@ (8007a38 <__sflush_r+0x104>)
 8007990:	410a      	asrs	r2, r1
 8007992:	07d6      	lsls	r6, r2, #31
 8007994:	d427      	bmi.n	80079e6 <__sflush_r+0xb2>
 8007996:	2200      	movs	r2, #0
 8007998:	6062      	str	r2, [r4, #4]
 800799a:	04d9      	lsls	r1, r3, #19
 800799c:	6922      	ldr	r2, [r4, #16]
 800799e:	6022      	str	r2, [r4, #0]
 80079a0:	d504      	bpl.n	80079ac <__sflush_r+0x78>
 80079a2:	1c42      	adds	r2, r0, #1
 80079a4:	d101      	bne.n	80079aa <__sflush_r+0x76>
 80079a6:	682b      	ldr	r3, [r5, #0]
 80079a8:	b903      	cbnz	r3, 80079ac <__sflush_r+0x78>
 80079aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80079ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079ae:	602f      	str	r7, [r5, #0]
 80079b0:	b1b9      	cbz	r1, 80079e2 <__sflush_r+0xae>
 80079b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079b6:	4299      	cmp	r1, r3
 80079b8:	d002      	beq.n	80079c0 <__sflush_r+0x8c>
 80079ba:	4628      	mov	r0, r5
 80079bc:	f7ff fa9a 	bl	8006ef4 <_free_r>
 80079c0:	2300      	movs	r3, #0
 80079c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80079c4:	e00d      	b.n	80079e2 <__sflush_r+0xae>
 80079c6:	2301      	movs	r3, #1
 80079c8:	4628      	mov	r0, r5
 80079ca:	47b0      	blx	r6
 80079cc:	4602      	mov	r2, r0
 80079ce:	1c50      	adds	r0, r2, #1
 80079d0:	d1c9      	bne.n	8007966 <__sflush_r+0x32>
 80079d2:	682b      	ldr	r3, [r5, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d0c6      	beq.n	8007966 <__sflush_r+0x32>
 80079d8:	2b1d      	cmp	r3, #29
 80079da:	d001      	beq.n	80079e0 <__sflush_r+0xac>
 80079dc:	2b16      	cmp	r3, #22
 80079de:	d11e      	bne.n	8007a1e <__sflush_r+0xea>
 80079e0:	602f      	str	r7, [r5, #0]
 80079e2:	2000      	movs	r0, #0
 80079e4:	e022      	b.n	8007a2c <__sflush_r+0xf8>
 80079e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ea:	b21b      	sxth	r3, r3
 80079ec:	e01b      	b.n	8007a26 <__sflush_r+0xf2>
 80079ee:	690f      	ldr	r7, [r1, #16]
 80079f0:	2f00      	cmp	r7, #0
 80079f2:	d0f6      	beq.n	80079e2 <__sflush_r+0xae>
 80079f4:	0793      	lsls	r3, r2, #30
 80079f6:	680e      	ldr	r6, [r1, #0]
 80079f8:	bf08      	it	eq
 80079fa:	694b      	ldreq	r3, [r1, #20]
 80079fc:	600f      	str	r7, [r1, #0]
 80079fe:	bf18      	it	ne
 8007a00:	2300      	movne	r3, #0
 8007a02:	eba6 0807 	sub.w	r8, r6, r7
 8007a06:	608b      	str	r3, [r1, #8]
 8007a08:	f1b8 0f00 	cmp.w	r8, #0
 8007a0c:	dde9      	ble.n	80079e2 <__sflush_r+0xae>
 8007a0e:	6a21      	ldr	r1, [r4, #32]
 8007a10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a12:	4643      	mov	r3, r8
 8007a14:	463a      	mov	r2, r7
 8007a16:	4628      	mov	r0, r5
 8007a18:	47b0      	blx	r6
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	dc08      	bgt.n	8007a30 <__sflush_r+0xfc>
 8007a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a26:	81a3      	strh	r3, [r4, #12]
 8007a28:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a30:	4407      	add	r7, r0
 8007a32:	eba8 0800 	sub.w	r8, r8, r0
 8007a36:	e7e7      	b.n	8007a08 <__sflush_r+0xd4>
 8007a38:	dfbffffe 	.word	0xdfbffffe

08007a3c <_fflush_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	690b      	ldr	r3, [r1, #16]
 8007a40:	4605      	mov	r5, r0
 8007a42:	460c      	mov	r4, r1
 8007a44:	b913      	cbnz	r3, 8007a4c <_fflush_r+0x10>
 8007a46:	2500      	movs	r5, #0
 8007a48:	4628      	mov	r0, r5
 8007a4a:	bd38      	pop	{r3, r4, r5, pc}
 8007a4c:	b118      	cbz	r0, 8007a56 <_fflush_r+0x1a>
 8007a4e:	6a03      	ldr	r3, [r0, #32]
 8007a50:	b90b      	cbnz	r3, 8007a56 <_fflush_r+0x1a>
 8007a52:	f7ff f835 	bl	8006ac0 <__sinit>
 8007a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0f3      	beq.n	8007a46 <_fflush_r+0xa>
 8007a5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a60:	07d0      	lsls	r0, r2, #31
 8007a62:	d404      	bmi.n	8007a6e <_fflush_r+0x32>
 8007a64:	0599      	lsls	r1, r3, #22
 8007a66:	d402      	bmi.n	8007a6e <_fflush_r+0x32>
 8007a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a6a:	f7ff fa40 	bl	8006eee <__retarget_lock_acquire_recursive>
 8007a6e:	4628      	mov	r0, r5
 8007a70:	4621      	mov	r1, r4
 8007a72:	f7ff ff5f 	bl	8007934 <__sflush_r>
 8007a76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a78:	07da      	lsls	r2, r3, #31
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	d4e4      	bmi.n	8007a48 <_fflush_r+0xc>
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	059b      	lsls	r3, r3, #22
 8007a82:	d4e1      	bmi.n	8007a48 <_fflush_r+0xc>
 8007a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a86:	f7ff fa33 	bl	8006ef0 <__retarget_lock_release_recursive>
 8007a8a:	e7dd      	b.n	8007a48 <_fflush_r+0xc>

08007a8c <__swhatbuf_r>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	460c      	mov	r4, r1
 8007a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a94:	2900      	cmp	r1, #0
 8007a96:	b096      	sub	sp, #88	@ 0x58
 8007a98:	4615      	mov	r5, r2
 8007a9a:	461e      	mov	r6, r3
 8007a9c:	da0d      	bge.n	8007aba <__swhatbuf_r+0x2e>
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007aa4:	f04f 0100 	mov.w	r1, #0
 8007aa8:	bf14      	ite	ne
 8007aaa:	2340      	movne	r3, #64	@ 0x40
 8007aac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	6031      	str	r1, [r6, #0]
 8007ab4:	602b      	str	r3, [r5, #0]
 8007ab6:	b016      	add	sp, #88	@ 0x58
 8007ab8:	bd70      	pop	{r4, r5, r6, pc}
 8007aba:	466a      	mov	r2, sp
 8007abc:	f000 f862 	bl	8007b84 <_fstat_r>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	dbec      	blt.n	8007a9e <__swhatbuf_r+0x12>
 8007ac4:	9901      	ldr	r1, [sp, #4]
 8007ac6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007aca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ace:	4259      	negs	r1, r3
 8007ad0:	4159      	adcs	r1, r3
 8007ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ad6:	e7eb      	b.n	8007ab0 <__swhatbuf_r+0x24>

08007ad8 <__smakebuf_r>:
 8007ad8:	898b      	ldrh	r3, [r1, #12]
 8007ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007adc:	079d      	lsls	r5, r3, #30
 8007ade:	4606      	mov	r6, r0
 8007ae0:	460c      	mov	r4, r1
 8007ae2:	d507      	bpl.n	8007af4 <__smakebuf_r+0x1c>
 8007ae4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	6123      	str	r3, [r4, #16]
 8007aec:	2301      	movs	r3, #1
 8007aee:	6163      	str	r3, [r4, #20]
 8007af0:	b003      	add	sp, #12
 8007af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007af4:	ab01      	add	r3, sp, #4
 8007af6:	466a      	mov	r2, sp
 8007af8:	f7ff ffc8 	bl	8007a8c <__swhatbuf_r>
 8007afc:	9f00      	ldr	r7, [sp, #0]
 8007afe:	4605      	mov	r5, r0
 8007b00:	4639      	mov	r1, r7
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7ff fa62 	bl	8006fcc <_malloc_r>
 8007b08:	b948      	cbnz	r0, 8007b1e <__smakebuf_r+0x46>
 8007b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b0e:	059a      	lsls	r2, r3, #22
 8007b10:	d4ee      	bmi.n	8007af0 <__smakebuf_r+0x18>
 8007b12:	f023 0303 	bic.w	r3, r3, #3
 8007b16:	f043 0302 	orr.w	r3, r3, #2
 8007b1a:	81a3      	strh	r3, [r4, #12]
 8007b1c:	e7e2      	b.n	8007ae4 <__smakebuf_r+0xc>
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	6020      	str	r0, [r4, #0]
 8007b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	9b01      	ldr	r3, [sp, #4]
 8007b2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b2e:	b15b      	cbz	r3, 8007b48 <__smakebuf_r+0x70>
 8007b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b34:	4630      	mov	r0, r6
 8007b36:	f000 f837 	bl	8007ba8 <_isatty_r>
 8007b3a:	b128      	cbz	r0, 8007b48 <__smakebuf_r+0x70>
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f023 0303 	bic.w	r3, r3, #3
 8007b42:	f043 0301 	orr.w	r3, r3, #1
 8007b46:	81a3      	strh	r3, [r4, #12]
 8007b48:	89a3      	ldrh	r3, [r4, #12]
 8007b4a:	431d      	orrs	r5, r3
 8007b4c:	81a5      	strh	r5, [r4, #12]
 8007b4e:	e7cf      	b.n	8007af0 <__smakebuf_r+0x18>

08007b50 <memmove>:
 8007b50:	4288      	cmp	r0, r1
 8007b52:	b510      	push	{r4, lr}
 8007b54:	eb01 0402 	add.w	r4, r1, r2
 8007b58:	d902      	bls.n	8007b60 <memmove+0x10>
 8007b5a:	4284      	cmp	r4, r0
 8007b5c:	4623      	mov	r3, r4
 8007b5e:	d807      	bhi.n	8007b70 <memmove+0x20>
 8007b60:	1e43      	subs	r3, r0, #1
 8007b62:	42a1      	cmp	r1, r4
 8007b64:	d008      	beq.n	8007b78 <memmove+0x28>
 8007b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b6e:	e7f8      	b.n	8007b62 <memmove+0x12>
 8007b70:	4402      	add	r2, r0
 8007b72:	4601      	mov	r1, r0
 8007b74:	428a      	cmp	r2, r1
 8007b76:	d100      	bne.n	8007b7a <memmove+0x2a>
 8007b78:	bd10      	pop	{r4, pc}
 8007b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b82:	e7f7      	b.n	8007b74 <memmove+0x24>

08007b84 <_fstat_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4d07      	ldr	r5, [pc, #28]	@ (8007ba4 <_fstat_r+0x20>)
 8007b88:	2300      	movs	r3, #0
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	4611      	mov	r1, r2
 8007b90:	602b      	str	r3, [r5, #0]
 8007b92:	f7f9 ffe4 	bl	8001b5e <_fstat>
 8007b96:	1c43      	adds	r3, r0, #1
 8007b98:	d102      	bne.n	8007ba0 <_fstat_r+0x1c>
 8007b9a:	682b      	ldr	r3, [r5, #0]
 8007b9c:	b103      	cbz	r3, 8007ba0 <_fstat_r+0x1c>
 8007b9e:	6023      	str	r3, [r4, #0]
 8007ba0:	bd38      	pop	{r3, r4, r5, pc}
 8007ba2:	bf00      	nop
 8007ba4:	200028fc 	.word	0x200028fc

08007ba8 <_isatty_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d06      	ldr	r5, [pc, #24]	@ (8007bc4 <_isatty_r+0x1c>)
 8007bac:	2300      	movs	r3, #0
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	602b      	str	r3, [r5, #0]
 8007bb4:	f7f9 ffe3 	bl	8001b7e <_isatty>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_isatty_r+0x1a>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_isatty_r+0x1a>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	200028fc 	.word	0x200028fc

08007bc8 <_sbrk_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4d06      	ldr	r5, [pc, #24]	@ (8007be4 <_sbrk_r+0x1c>)
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	602b      	str	r3, [r5, #0]
 8007bd4:	f7f9 ffec 	bl	8001bb0 <_sbrk>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d102      	bne.n	8007be2 <_sbrk_r+0x1a>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	b103      	cbz	r3, 8007be2 <_sbrk_r+0x1a>
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	200028fc 	.word	0x200028fc

08007be8 <memcpy>:
 8007be8:	440a      	add	r2, r1
 8007bea:	4291      	cmp	r1, r2
 8007bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bf0:	d100      	bne.n	8007bf4 <memcpy+0xc>
 8007bf2:	4770      	bx	lr
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bfe:	4291      	cmp	r1, r2
 8007c00:	d1f9      	bne.n	8007bf6 <memcpy+0xe>
 8007c02:	bd10      	pop	{r4, pc}

08007c04 <_realloc_r>:
 8007c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c08:	4680      	mov	r8, r0
 8007c0a:	4615      	mov	r5, r2
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	b921      	cbnz	r1, 8007c1a <_realloc_r+0x16>
 8007c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c14:	4611      	mov	r1, r2
 8007c16:	f7ff b9d9 	b.w	8006fcc <_malloc_r>
 8007c1a:	b92a      	cbnz	r2, 8007c28 <_realloc_r+0x24>
 8007c1c:	f7ff f96a 	bl	8006ef4 <_free_r>
 8007c20:	2400      	movs	r4, #0
 8007c22:	4620      	mov	r0, r4
 8007c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c28:	f000 f81a 	bl	8007c60 <_malloc_usable_size_r>
 8007c2c:	4285      	cmp	r5, r0
 8007c2e:	4606      	mov	r6, r0
 8007c30:	d802      	bhi.n	8007c38 <_realloc_r+0x34>
 8007c32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c36:	d8f4      	bhi.n	8007c22 <_realloc_r+0x1e>
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	f7ff f9c6 	bl	8006fcc <_malloc_r>
 8007c40:	4607      	mov	r7, r0
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d0ec      	beq.n	8007c20 <_realloc_r+0x1c>
 8007c46:	42b5      	cmp	r5, r6
 8007c48:	462a      	mov	r2, r5
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	bf28      	it	cs
 8007c4e:	4632      	movcs	r2, r6
 8007c50:	f7ff ffca 	bl	8007be8 <memcpy>
 8007c54:	4621      	mov	r1, r4
 8007c56:	4640      	mov	r0, r8
 8007c58:	f7ff f94c 	bl	8006ef4 <_free_r>
 8007c5c:	463c      	mov	r4, r7
 8007c5e:	e7e0      	b.n	8007c22 <_realloc_r+0x1e>

08007c60 <_malloc_usable_size_r>:
 8007c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c64:	1f18      	subs	r0, r3, #4
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	bfbc      	itt	lt
 8007c6a:	580b      	ldrlt	r3, [r1, r0]
 8007c6c:	18c0      	addlt	r0, r0, r3
 8007c6e:	4770      	bx	lr

08007c70 <_init>:
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	bf00      	nop
 8007c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c76:	bc08      	pop	{r3}
 8007c78:	469e      	mov	lr, r3
 8007c7a:	4770      	bx	lr

08007c7c <_fini>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	bf00      	nop
 8007c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c82:	bc08      	pop	{r3}
 8007c84:	469e      	mov	lr, r3
 8007c86:	4770      	bx	lr
